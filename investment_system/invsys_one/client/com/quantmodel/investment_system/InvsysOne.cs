// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace investment_system.invsys_one {
  
  public static partial class InvsysOne {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_Timebar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Timebar, global::investment_system.invsys_one.Timebar.Builder> internal__static_investment_system_invsys_one_Timebar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_Trend__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Trend, global::investment_system.invsys_one.Trend.Builder> internal__static_investment_system_invsys_one_Trend__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_Pivot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Pivot, global::investment_system.invsys_one.Pivot.Builder> internal__static_investment_system_invsys_one_Pivot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_OrderExecution__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.OrderExecution, global::investment_system.invsys_one.OrderExecution.Builder> internal__static_investment_system_invsys_one_OrderExecution__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneRequest, global::investment_system.invsys_one.InvestmentSystemOneRequest.Builder> internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneResponse, global::investment_system.invsys_one.InvestmentSystemOneResponse.Builder> internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_investment_system_invsys_one_InvestmentSystemOneData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneData, global::investment_system.invsys_one.InvestmentSystemOneData.Builder> internal__static_investment_system_invsys_one_InvestmentSystemOneData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static InvsysOne() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBpbnZzeXNfb25lLnByb3RvEhxpbnZlc3RtZW50X3N5c3RlbS5pbnZzeXNf" + 
          "b25lItwBCgdUaW1lYmFyEhEKCXRpbWVzdGFtcBgBIAEoDRIPCgRvcGVuGAIg" + 
          "ASgBOgEwEg8KBGhpZ2gYAyABKAE6ATASDgoDbG93GAQgASgBOgEwEhAKBWNs" + 
          "b3NlGAUgASgBOgEwEhIKB2J1eV9xdHkYBiABKA06ATASEwoIc2VsbF9xdHkY" + 
          "ByABKA06ATASEwoIdW5rbl9xdHkYCCABKA06ATASEgoHYnV5X3ZhbBgJIAEo" + 
          "AToBMBITCghzZWxsX3ZhbBgKIAEoAToBMBITCgh1bmtuX3ZhbBgLIAEoAToB" + 
          "MCKjAQoFVHJlbmQSEQoJdGltZXN0YW1wGAEgASgNEjsKBHR5cGUYAiABKA4y" + 
          "LS5pbnZlc3RtZW50X3N5c3RlbS5pbnZzeXNfb25lLlRyZW5kLlRyZW5kVHlw" + 
          "ZRIPCgRoaWdoGAMgASgBOgEwEg4KA2xvdxgEIAEoAToBMCIpCglUcmVuZFR5" + 
          "cGUSDAoIVVBfVFJFTkQQARIOCgpET1dOX1RSRU5EEAIilAEKBVBpdm90EhEK" + 
          "CXRpbWVzdGFtcBgBIAEoDRI7CgR0eXBlGAIgASgOMi0uaW52ZXN0bWVudF9z" + 
          "eXN0ZW0uaW52c3lzX29uZS5QaXZvdC5QaXZvdFR5cGUSEAoFcHJpY2UYAyAB" + 
          "KAE6ATAiKQoJUGl2b3RUeXBlEgwKCFVQX1BJVk9UEAESDgoKRE9XTl9QSVZP" + 
          "VBACIskBCg5PcmRlckV4ZWN1dGlvbhIRCgl0aW1lc3RhbXAYASABKA0SDwoH" + 
          "dGltZWJhchgCIAEoDRJICgR0eXBlGAMgASgOMjouaW52ZXN0bWVudF9zeXN0" + 
          "ZW0uaW52c3lzX29uZS5PcmRlckV4ZWN1dGlvbi5FeGVjdXRpb25UeXBlEhAK" + 
          "BXByaWNlGAQgASgBOgEwEhMKCHF1YW50aXR5GAUgASgNOgEwIiIKDUV4ZWN1" + 
          "dGlvblR5cGUSBwoDQlVZEAESCAoEU0VMTBACIuMBChpJbnZlc3RtZW50U3lz" + 
          "dGVtT25lUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgASgJEhEKCXRpbWVzdGFt" + 
          "cBgCIAEoCRJSCgR0eXBlGAMgASgOMkQuaW52ZXN0bWVudF9zeXN0ZW0uaW52" + 
          "c3lzX29uZS5JbnZlc3RtZW50U3lzdGVtT25lUmVxdWVzdC5SZXF1ZXN0VHlw" + 
          "ZSJKCgtSZXF1ZXN0VHlwZRIJCgVMT0dJThABEgkKBVBBVVNFEAISCgoGUkVT" + 
          "VU1FEAMSCwoHRkxBVFRFThAEEgwKCFNIVVRET1dOEAUi/gEKG0ludmVzdG1l" + 
          "bnRTeXN0ZW1PbmVSZXNwb25zZRITCgtyZXNwb25zZV9pZBgBIAEoCRISCgpy" + 
          "ZXF1ZXN0X2lkGAIgASgJEhEKCXRpbWVzdGFtcBgDIAEoCRJUCgR0eXBlGAQg" + 
          "ASgOMkYuaW52ZXN0bWVudF9zeXN0ZW0uaW52c3lzX29uZS5JbnZlc3RtZW50" + 
          "U3lzdGVtT25lUmVzcG9uc2UuUmVzcG9uc2VUeXBlEhEKCWVycm9yX21zZxgF" + 
          "IAEoCSI6CgxSZXNwb25zZVR5cGUSEwoPQUNLTk9XTEVER0VNRU5UEAESCgoG" + 
          "UkVKRUNUEAISCQoFRVJST1IQAyK2BAoXSW52ZXN0bWVudFN5c3RlbU9uZURh" + 
          "dGESTAoEdHlwZRgBIAEoDjI+LmludmVzdG1lbnRfc3lzdGVtLmludnN5c19v" + 
          "bmUuSW52ZXN0bWVudFN5c3RlbU9uZURhdGEuRGF0YVR5cGUSEgoKb3Blbmlu" + 
          "Z190bRgCIAEoCRISCgpjbG9zaW5nX3RtGAMgASgJEhEKCXVwZGF0ZV90bRgE" + 
          "IAEoCRIOCgZzdGF0dXMYBSABKAkSEAoIYmVzdF9iaWQYBiABKAESEAoIYmVz" + 
          "dF9hc2sYByABKAESDwoHb3Blbl9wbBgIIAEoARIRCgljbG9zZWRfcGwYCSAB" + 
          "KAESRQoPb3JkZXJfZXhlY3V0aW9uGAogAygLMiwuaW52ZXN0bWVudF9zeXN0" + 
          "ZW0uaW52c3lzX29uZS5PcmRlckV4ZWN1dGlvbhI2Cgd0aW1lYmFyGAsgAygL" + 
          "MiUuaW52ZXN0bWVudF9zeXN0ZW0uaW52c3lzX29uZS5UaW1lYmFyEjIKBXRy" + 
          "ZW5kGAwgAygLMiMuaW52ZXN0bWVudF9zeXN0ZW0uaW52c3lzX29uZS5UcmVu" + 
          "ZBIyCgVwaXZvdBgNIAMoCzIjLmludmVzdG1lbnRfc3lzdGVtLmludnN5c19v" + 
          "bmUuUGl2b3QiUwoIRGF0YVR5cGUSCgoGU1lTVEVNEAESCwoHVElNRUJBUhAC" + 
          "EgkKBVRSRU5EEAMSCQoFUElWT1QQBBINCglFWEVDVVRJT04QBRIJCgVMT0dJ" + 
          "ThAGQgVIAYABAA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_investment_system_invsys_one_Timebar__Descriptor = Descriptor.MessageTypes[0];
        internal__static_investment_system_invsys_one_Timebar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Timebar, global::investment_system.invsys_one.Timebar.Builder>(internal__static_investment_system_invsys_one_Timebar__Descriptor,
                new string[] { "Timestamp", "Open", "High", "Low", "Close", "BuyQty", "SellQty", "UnknQty", "BuyVal", "SellVal", "UnknVal", });
        internal__static_investment_system_invsys_one_Trend__Descriptor = Descriptor.MessageTypes[1];
        internal__static_investment_system_invsys_one_Trend__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Trend, global::investment_system.invsys_one.Trend.Builder>(internal__static_investment_system_invsys_one_Trend__Descriptor,
                new string[] { "Timestamp", "Type", "High", "Low", });
        internal__static_investment_system_invsys_one_Pivot__Descriptor = Descriptor.MessageTypes[2];
        internal__static_investment_system_invsys_one_Pivot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.Pivot, global::investment_system.invsys_one.Pivot.Builder>(internal__static_investment_system_invsys_one_Pivot__Descriptor,
                new string[] { "Timestamp", "Type", "Price", });
        internal__static_investment_system_invsys_one_OrderExecution__Descriptor = Descriptor.MessageTypes[3];
        internal__static_investment_system_invsys_one_OrderExecution__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.OrderExecution, global::investment_system.invsys_one.OrderExecution.Builder>(internal__static_investment_system_invsys_one_OrderExecution__Descriptor,
                new string[] { "Timestamp", "Timebar", "Type", "Price", "Quantity", });
        internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneRequest, global::investment_system.invsys_one.InvestmentSystemOneRequest.Builder>(internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__Descriptor,
                new string[] { "RequestId", "Timestamp", "Type", });
        internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneResponse, global::investment_system.invsys_one.InvestmentSystemOneResponse.Builder>(internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "Timestamp", "Type", "ErrorMsg", });
        internal__static_investment_system_invsys_one_InvestmentSystemOneData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_investment_system_invsys_one_InvestmentSystemOneData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::investment_system.invsys_one.InvestmentSystemOneData, global::investment_system.invsys_one.InvestmentSystemOneData.Builder>(internal__static_investment_system_invsys_one_InvestmentSystemOneData__Descriptor,
                new string[] { "Type", "OpeningTm", "ClosingTm", "UpdateTm", "Status", "BestBid", "BestAsk", "OpenPl", "ClosedPl", "OrderExecution", "Timebar", "Trend", "Pivot", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class Timebar : pb::GeneratedMessage<Timebar, Timebar.Builder> {
    private static readonly Timebar defaultInstance = new Builder().BuildPartial();
    public static Timebar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Timebar DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Timebar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Timebar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Timebar, Timebar.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Timebar__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private uint timestamp_ = 0;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return timestamp_; }
    }
    
    public const int OpenFieldNumber = 2;
    private bool hasOpen;
    private double open_ = 0D;
    public bool HasOpen {
      get { return hasOpen; }
    }
    public double Open {
      get { return open_; }
    }
    
    public const int HighFieldNumber = 3;
    private bool hasHigh;
    private double high_ = 0D;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public double High {
      get { return high_; }
    }
    
    public const int LowFieldNumber = 4;
    private bool hasLow;
    private double low_ = 0D;
    public bool HasLow {
      get { return hasLow; }
    }
    public double Low {
      get { return low_; }
    }
    
    public const int CloseFieldNumber = 5;
    private bool hasClose;
    private double close_ = 0D;
    public bool HasClose {
      get { return hasClose; }
    }
    public double Close {
      get { return close_; }
    }
    
    public const int BuyQtyFieldNumber = 6;
    private bool hasBuyQty;
    private uint buyQty_ = 0;
    public bool HasBuyQty {
      get { return hasBuyQty; }
    }
    [global::System.CLSCompliant(false)]
    public uint BuyQty {
      get { return buyQty_; }
    }
    
    public const int SellQtyFieldNumber = 7;
    private bool hasSellQty;
    private uint sellQty_ = 0;
    public bool HasSellQty {
      get { return hasSellQty; }
    }
    [global::System.CLSCompliant(false)]
    public uint SellQty {
      get { return sellQty_; }
    }
    
    public const int UnknQtyFieldNumber = 8;
    private bool hasUnknQty;
    private uint unknQty_ = 0;
    public bool HasUnknQty {
      get { return hasUnknQty; }
    }
    [global::System.CLSCompliant(false)]
    public uint UnknQty {
      get { return unknQty_; }
    }
    
    public const int BuyValFieldNumber = 9;
    private bool hasBuyVal;
    private double buyVal_ = 0D;
    public bool HasBuyVal {
      get { return hasBuyVal; }
    }
    public double BuyVal {
      get { return buyVal_; }
    }
    
    public const int SellValFieldNumber = 10;
    private bool hasSellVal;
    private double sellVal_ = 0D;
    public bool HasSellVal {
      get { return hasSellVal; }
    }
    public double SellVal {
      get { return sellVal_; }
    }
    
    public const int UnknValFieldNumber = 11;
    private bool hasUnknVal;
    private double unknVal_ = 0D;
    public bool HasUnknVal {
      get { return hasUnknVal; }
    }
    public double UnknVal {
      get { return unknVal_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteUInt32(1, Timestamp);
      }
      if (HasOpen) {
        output.WriteDouble(2, Open);
      }
      if (HasHigh) {
        output.WriteDouble(3, High);
      }
      if (HasLow) {
        output.WriteDouble(4, Low);
      }
      if (HasClose) {
        output.WriteDouble(5, Close);
      }
      if (HasBuyQty) {
        output.WriteUInt32(6, BuyQty);
      }
      if (HasSellQty) {
        output.WriteUInt32(7, SellQty);
      }
      if (HasUnknQty) {
        output.WriteUInt32(8, UnknQty);
      }
      if (HasBuyVal) {
        output.WriteDouble(9, BuyVal);
      }
      if (HasSellVal) {
        output.WriteDouble(10, SellVal);
      }
      if (HasUnknVal) {
        output.WriteDouble(11, UnknVal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Timestamp);
        }
        if (HasOpen) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Open);
        }
        if (HasHigh) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, High);
        }
        if (HasLow) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Low);
        }
        if (HasClose) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Close);
        }
        if (HasBuyQty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, BuyQty);
        }
        if (HasSellQty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SellQty);
        }
        if (HasUnknQty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, UnknQty);
        }
        if (HasBuyVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, BuyVal);
        }
        if (HasSellVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, SellVal);
        }
        if (HasUnknVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, UnknVal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Timebar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timebar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timebar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timebar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timebar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timebar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Timebar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Timebar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Timebar ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timebar ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Timebar prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Timebar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Timebar result = new Timebar();
      
      protected override Timebar MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Timebar();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.Timebar.Descriptor; }
      }
      
      public override Timebar DefaultInstanceForType {
        get { return global::investment_system.invsys_one.Timebar.DefaultInstance; }
      }
      
      public override Timebar BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Timebar returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Timebar) {
          return MergeFrom((Timebar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Timebar other) {
        if (other == global::investment_system.invsys_one.Timebar.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasOpen) {
          Open = other.Open;
        }
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        if (other.HasClose) {
          Close = other.Close;
        }
        if (other.HasBuyQty) {
          BuyQty = other.BuyQty;
        }
        if (other.HasSellQty) {
          SellQty = other.SellQty;
        }
        if (other.HasUnknQty) {
          UnknQty = other.UnknQty;
        }
        if (other.HasBuyVal) {
          BuyVal = other.BuyVal;
        }
        if (other.HasSellVal) {
          SellVal = other.SellVal;
        }
        if (other.HasUnknVal) {
          UnknVal = other.UnknVal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Timestamp = input.ReadUInt32();
              break;
            }
            case 17: {
              Open = input.ReadDouble();
              break;
            }
            case 25: {
              High = input.ReadDouble();
              break;
            }
            case 33: {
              Low = input.ReadDouble();
              break;
            }
            case 41: {
              Close = input.ReadDouble();
              break;
            }
            case 48: {
              BuyQty = input.ReadUInt32();
              break;
            }
            case 56: {
              SellQty = input.ReadUInt32();
              break;
            }
            case 64: {
              UnknQty = input.ReadUInt32();
              break;
            }
            case 73: {
              BuyVal = input.ReadDouble();
              break;
            }
            case 81: {
              SellVal = input.ReadDouble();
              break;
            }
            case 89: {
              UnknVal = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(uint value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasOpen {
        get { return result.HasOpen; }
      }
      public double Open {
        get { return result.Open; }
        set { SetOpen(value); }
      }
      public Builder SetOpen(double value) {
        result.hasOpen = true;
        result.open_ = value;
        return this;
      }
      public Builder ClearOpen() {
        result.hasOpen = false;
        result.open_ = 0D;
        return this;
      }
      
      public bool HasHigh {
        get { return result.HasHigh; }
      }
      public double High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(double value) {
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        result.hasHigh = false;
        result.high_ = 0D;
        return this;
      }
      
      public bool HasLow {
        get { return result.HasLow; }
      }
      public double Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(double value) {
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        result.hasLow = false;
        result.low_ = 0D;
        return this;
      }
      
      public bool HasClose {
        get { return result.HasClose; }
      }
      public double Close {
        get { return result.Close; }
        set { SetClose(value); }
      }
      public Builder SetClose(double value) {
        result.hasClose = true;
        result.close_ = value;
        return this;
      }
      public Builder ClearClose() {
        result.hasClose = false;
        result.close_ = 0D;
        return this;
      }
      
      public bool HasBuyQty {
        get { return result.HasBuyQty; }
      }
      [global::System.CLSCompliant(false)]
      public uint BuyQty {
        get { return result.BuyQty; }
        set { SetBuyQty(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBuyQty(uint value) {
        result.hasBuyQty = true;
        result.buyQty_ = value;
        return this;
      }
      public Builder ClearBuyQty() {
        result.hasBuyQty = false;
        result.buyQty_ = 0;
        return this;
      }
      
      public bool HasSellQty {
        get { return result.HasSellQty; }
      }
      [global::System.CLSCompliant(false)]
      public uint SellQty {
        get { return result.SellQty; }
        set { SetSellQty(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSellQty(uint value) {
        result.hasSellQty = true;
        result.sellQty_ = value;
        return this;
      }
      public Builder ClearSellQty() {
        result.hasSellQty = false;
        result.sellQty_ = 0;
        return this;
      }
      
      public bool HasUnknQty {
        get { return result.HasUnknQty; }
      }
      [global::System.CLSCompliant(false)]
      public uint UnknQty {
        get { return result.UnknQty; }
        set { SetUnknQty(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnknQty(uint value) {
        result.hasUnknQty = true;
        result.unknQty_ = value;
        return this;
      }
      public Builder ClearUnknQty() {
        result.hasUnknQty = false;
        result.unknQty_ = 0;
        return this;
      }
      
      public bool HasBuyVal {
        get { return result.HasBuyVal; }
      }
      public double BuyVal {
        get { return result.BuyVal; }
        set { SetBuyVal(value); }
      }
      public Builder SetBuyVal(double value) {
        result.hasBuyVal = true;
        result.buyVal_ = value;
        return this;
      }
      public Builder ClearBuyVal() {
        result.hasBuyVal = false;
        result.buyVal_ = 0D;
        return this;
      }
      
      public bool HasSellVal {
        get { return result.HasSellVal; }
      }
      public double SellVal {
        get { return result.SellVal; }
        set { SetSellVal(value); }
      }
      public Builder SetSellVal(double value) {
        result.hasSellVal = true;
        result.sellVal_ = value;
        return this;
      }
      public Builder ClearSellVal() {
        result.hasSellVal = false;
        result.sellVal_ = 0D;
        return this;
      }
      
      public bool HasUnknVal {
        get { return result.HasUnknVal; }
      }
      public double UnknVal {
        get { return result.UnknVal; }
        set { SetUnknVal(value); }
      }
      public Builder SetUnknVal(double value) {
        result.hasUnknVal = true;
        result.unknVal_ = value;
        return this;
      }
      public Builder ClearUnknVal() {
        result.hasUnknVal = false;
        result.unknVal_ = 0D;
        return this;
      }
    }
    static Timebar() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class Trend : pb::GeneratedMessage<Trend, Trend.Builder> {
    private static readonly Trend defaultInstance = new Builder().BuildPartial();
    public static Trend DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Trend DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Trend ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Trend__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Trend, Trend.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Trend__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum TrendType {
        UP_TREND = 1,
        DOWN_TREND = 2,
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private uint timestamp_ = 0;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::investment_system.invsys_one.Trend.Types.TrendType type_ = global::investment_system.invsys_one.Trend.Types.TrendType.UP_TREND;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.Trend.Types.TrendType Type {
      get { return type_; }
    }
    
    public const int HighFieldNumber = 3;
    private bool hasHigh;
    private double high_ = 0D;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public double High {
      get { return high_; }
    }
    
    public const int LowFieldNumber = 4;
    private bool hasLow;
    private double low_ = 0D;
    public bool HasLow {
      get { return hasLow; }
    }
    public double Low {
      get { return low_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteUInt32(1, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(2, (int) Type);
      }
      if (HasHigh) {
        output.WriteDouble(3, High);
      }
      if (HasLow) {
        output.WriteDouble(4, Low);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (HasHigh) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, High);
        }
        if (HasLow) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Low);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Trend ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trend ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trend ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trend ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trend ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trend ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Trend ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Trend ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Trend ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trend ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Trend prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Trend, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Trend result = new Trend();
      
      protected override Trend MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Trend();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.Trend.Descriptor; }
      }
      
      public override Trend DefaultInstanceForType {
        get { return global::investment_system.invsys_one.Trend.DefaultInstance; }
      }
      
      public override Trend BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Trend returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Trend) {
          return MergeFrom((Trend) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Trend other) {
        if (other == global::investment_system.invsys_one.Trend.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Timestamp = input.ReadUInt32();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.Trend.Types.TrendType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.Trend.Types.TrendType) rawValue;
              }
              break;
            }
            case 25: {
              High = input.ReadDouble();
              break;
            }
            case 33: {
              Low = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(uint value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.Trend.Types.TrendType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.Trend.Types.TrendType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.Trend.Types.TrendType.UP_TREND;
        return this;
      }
      
      public bool HasHigh {
        get { return result.HasHigh; }
      }
      public double High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(double value) {
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        result.hasHigh = false;
        result.high_ = 0D;
        return this;
      }
      
      public bool HasLow {
        get { return result.HasLow; }
      }
      public double Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(double value) {
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        result.hasLow = false;
        result.low_ = 0D;
        return this;
      }
    }
    static Trend() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class Pivot : pb::GeneratedMessage<Pivot, Pivot.Builder> {
    private static readonly Pivot defaultInstance = new Builder().BuildPartial();
    public static Pivot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Pivot DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Pivot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Pivot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Pivot, Pivot.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_Pivot__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum PivotType {
        UP_PIVOT = 1,
        DOWN_PIVOT = 2,
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private uint timestamp_ = 0;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::investment_system.invsys_one.Pivot.Types.PivotType type_ = global::investment_system.invsys_one.Pivot.Types.PivotType.UP_PIVOT;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.Pivot.Types.PivotType Type {
      get { return type_; }
    }
    
    public const int PriceFieldNumber = 3;
    private bool hasPrice;
    private double price_ = 0D;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteUInt32(1, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(2, (int) Type);
      }
      if (HasPrice) {
        output.WriteDouble(3, Price);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (HasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, Price);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Pivot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pivot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pivot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pivot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pivot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pivot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Pivot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Pivot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Pivot ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pivot ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Pivot prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Pivot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Pivot result = new Pivot();
      
      protected override Pivot MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Pivot();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.Pivot.Descriptor; }
      }
      
      public override Pivot DefaultInstanceForType {
        get { return global::investment_system.invsys_one.Pivot.DefaultInstance; }
      }
      
      public override Pivot BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Pivot returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Pivot) {
          return MergeFrom((Pivot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Pivot other) {
        if (other == global::investment_system.invsys_one.Pivot.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Timestamp = input.ReadUInt32();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.Pivot.Types.PivotType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.Pivot.Types.PivotType) rawValue;
              }
              break;
            }
            case 25: {
              Price = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(uint value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.Pivot.Types.PivotType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.Pivot.Types.PivotType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.Pivot.Types.PivotType.UP_PIVOT;
        return this;
      }
      
      public bool HasPrice {
        get { return result.HasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
    }
    static Pivot() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class OrderExecution : pb::GeneratedMessage<OrderExecution, OrderExecution.Builder> {
    private static readonly OrderExecution defaultInstance = new Builder().BuildPartial();
    public static OrderExecution DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrderExecution DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OrderExecution ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_OrderExecution__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrderExecution, OrderExecution.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_OrderExecution__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ExecutionType {
        BUY = 1,
        SELL = 2,
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private uint timestamp_ = 0;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return timestamp_; }
    }
    
    public const int TimebarFieldNumber = 2;
    private bool hasTimebar;
    private uint timebar_ = 0;
    public bool HasTimebar {
      get { return hasTimebar; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timebar {
      get { return timebar_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::investment_system.invsys_one.OrderExecution.Types.ExecutionType type_ = global::investment_system.invsys_one.OrderExecution.Types.ExecutionType.BUY;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.OrderExecution.Types.ExecutionType Type {
      get { return type_; }
    }
    
    public const int PriceFieldNumber = 4;
    private bool hasPrice;
    private double price_ = 0D;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public const int QuantityFieldNumber = 5;
    private bool hasQuantity;
    private uint quantity_ = 0;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    [global::System.CLSCompliant(false)]
    public uint Quantity {
      get { return quantity_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteUInt32(1, Timestamp);
      }
      if (HasTimebar) {
        output.WriteUInt32(2, Timebar);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      if (HasPrice) {
        output.WriteDouble(4, Price);
      }
      if (HasQuantity) {
        output.WriteUInt32(5, Quantity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Timestamp);
        }
        if (HasTimebar) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Timebar);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (HasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Price);
        }
        if (HasQuantity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Quantity);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OrderExecution ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderExecution ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderExecution ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderExecution ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderExecution ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderExecution ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrderExecution ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrderExecution ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrderExecution ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderExecution ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrderExecution prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OrderExecution, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OrderExecution result = new OrderExecution();
      
      protected override OrderExecution MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OrderExecution();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.OrderExecution.Descriptor; }
      }
      
      public override OrderExecution DefaultInstanceForType {
        get { return global::investment_system.invsys_one.OrderExecution.DefaultInstance; }
      }
      
      public override OrderExecution BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OrderExecution returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrderExecution) {
          return MergeFrom((OrderExecution) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrderExecution other) {
        if (other == global::investment_system.invsys_one.OrderExecution.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasTimebar) {
          Timebar = other.Timebar;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Timestamp = input.ReadUInt32();
              break;
            }
            case 16: {
              Timebar = input.ReadUInt32();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.OrderExecution.Types.ExecutionType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.OrderExecution.Types.ExecutionType) rawValue;
              }
              break;
            }
            case 33: {
              Price = input.ReadDouble();
              break;
            }
            case 40: {
              Quantity = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(uint value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasTimebar {
        get { return result.HasTimebar; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timebar {
        get { return result.Timebar; }
        set { SetTimebar(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimebar(uint value) {
        result.hasTimebar = true;
        result.timebar_ = value;
        return this;
      }
      public Builder ClearTimebar() {
        result.hasTimebar = false;
        result.timebar_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.OrderExecution.Types.ExecutionType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.OrderExecution.Types.ExecutionType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.OrderExecution.Types.ExecutionType.BUY;
        return this;
      }
      
      public bool HasPrice {
        get { return result.HasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.HasQuantity; }
      }
      [global::System.CLSCompliant(false)]
      public uint Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetQuantity(uint value) {
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        result.hasQuantity = false;
        result.quantity_ = 0;
        return this;
      }
    }
    static OrderExecution() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemOneRequest : pb::GeneratedMessage<InvestmentSystemOneRequest, InvestmentSystemOneRequest.Builder> {
    private static readonly InvestmentSystemOneRequest defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemOneRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemOneRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemOneRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemOneRequest, InvestmentSystemOneRequest.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum RequestType {
        LOGIN = 1,
        PAUSE = 2,
        RESUME = 3,
        FLATTEN = 4,
        SHUTDOWN = 5,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType type_ = global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType.LOGIN;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemOneRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemOneRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemOneRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemOneRequest result = new InvestmentSystemOneRequest();
      
      protected override InvestmentSystemOneRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemOneRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneRequest.Descriptor; }
      }
      
      public override InvestmentSystemOneRequest DefaultInstanceForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneRequest.DefaultInstance; }
      }
      
      public override InvestmentSystemOneRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemOneRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemOneRequest) {
          return MergeFrom((InvestmentSystemOneRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemOneRequest other) {
        if (other == global::investment_system.invsys_one.InvestmentSystemOneRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.InvestmentSystemOneRequest.Types.RequestType.LOGIN;
        return this;
      }
    }
    static InvestmentSystemOneRequest() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemOneResponse : pb::GeneratedMessage<InvestmentSystemOneResponse, InvestmentSystemOneResponse.Builder> {
    private static readonly InvestmentSystemOneResponse defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemOneResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemOneResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemOneResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemOneResponse, InvestmentSystemOneResponse.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ResponseType {
        ACKNOWLEDGEMENT = 1,
        REJECT = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType type_ = global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType.ACKNOWLEDGEMENT;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType Type {
      get { return type_; }
    }
    
    public const int ErrorMsgFieldNumber = 5;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasErrorMsg) {
        output.WriteString(5, ErrorMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasErrorMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ErrorMsg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemOneResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemOneResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemOneResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemOneResponse result = new InvestmentSystemOneResponse();
      
      protected override InvestmentSystemOneResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemOneResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneResponse.Descriptor; }
      }
      
      public override InvestmentSystemOneResponse DefaultInstanceForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneResponse.DefaultInstance; }
      }
      
      public override InvestmentSystemOneResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemOneResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemOneResponse) {
          return MergeFrom((InvestmentSystemOneResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemOneResponse other) {
        if (other == global::investment_system.invsys_one.InvestmentSystemOneResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType) rawValue;
              }
              break;
            }
            case 42: {
              ErrorMsg = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.InvestmentSystemOneResponse.Types.ResponseType.ACKNOWLEDGEMENT;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.HasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
    }
    static InvestmentSystemOneResponse() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemOneData : pb::GeneratedMessage<InvestmentSystemOneData, InvestmentSystemOneData.Builder> {
    private static readonly InvestmentSystemOneData defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemOneData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemOneData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemOneData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemOneData, InvestmentSystemOneData.Builder> InternalFieldAccessors {
      get { return global::investment_system.invsys_one.InvsysOne.internal__static_investment_system_invsys_one_InvestmentSystemOneData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum DataType {
        SYSTEM = 1,
        TIMEBAR = 2,
        TREND = 3,
        PIVOT = 4,
        EXECUTION = 5,
        LOGIN = 6,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType type_ = global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType.SYSTEM;
    public bool HasType {
      get { return hasType; }
    }
    public global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType Type {
      get { return type_; }
    }
    
    public const int OpeningTmFieldNumber = 2;
    private bool hasOpeningTm;
    private string openingTm_ = "";
    public bool HasOpeningTm {
      get { return hasOpeningTm; }
    }
    public string OpeningTm {
      get { return openingTm_; }
    }
    
    public const int ClosingTmFieldNumber = 3;
    private bool hasClosingTm;
    private string closingTm_ = "";
    public bool HasClosingTm {
      get { return hasClosingTm; }
    }
    public string ClosingTm {
      get { return closingTm_; }
    }
    
    public const int UpdateTmFieldNumber = 4;
    private bool hasUpdateTm;
    private string updateTm_ = "";
    public bool HasUpdateTm {
      get { return hasUpdateTm; }
    }
    public string UpdateTm {
      get { return updateTm_; }
    }
    
    public const int StatusFieldNumber = 5;
    private bool hasStatus;
    private string status_ = "";
    public bool HasStatus {
      get { return hasStatus; }
    }
    public string Status {
      get { return status_; }
    }
    
    public const int BestBidFieldNumber = 6;
    private bool hasBestBid;
    private double bestBid_ = 0D;
    public bool HasBestBid {
      get { return hasBestBid; }
    }
    public double BestBid {
      get { return bestBid_; }
    }
    
    public const int BestAskFieldNumber = 7;
    private bool hasBestAsk;
    private double bestAsk_ = 0D;
    public bool HasBestAsk {
      get { return hasBestAsk; }
    }
    public double BestAsk {
      get { return bestAsk_; }
    }
    
    public const int OpenPlFieldNumber = 8;
    private bool hasOpenPl;
    private double openPl_ = 0D;
    public bool HasOpenPl {
      get { return hasOpenPl; }
    }
    public double OpenPl {
      get { return openPl_; }
    }
    
    public const int ClosedPlFieldNumber = 9;
    private bool hasClosedPl;
    private double closedPl_ = 0D;
    public bool HasClosedPl {
      get { return hasClosedPl; }
    }
    public double ClosedPl {
      get { return closedPl_; }
    }
    
    public const int OrderExecutionFieldNumber = 10;
    private pbc::PopsicleList<global::investment_system.invsys_one.OrderExecution> orderExecution_ = new pbc::PopsicleList<global::investment_system.invsys_one.OrderExecution>();
    public scg::IList<global::investment_system.invsys_one.OrderExecution> OrderExecutionList {
      get { return orderExecution_; }
    }
    public int OrderExecutionCount {
      get { return orderExecution_.Count; }
    }
    public global::investment_system.invsys_one.OrderExecution GetOrderExecution(int index) {
      return orderExecution_[index];
    }
    
    public const int TimebarFieldNumber = 11;
    private pbc::PopsicleList<global::investment_system.invsys_one.Timebar> timebar_ = new pbc::PopsicleList<global::investment_system.invsys_one.Timebar>();
    public scg::IList<global::investment_system.invsys_one.Timebar> TimebarList {
      get { return timebar_; }
    }
    public int TimebarCount {
      get { return timebar_.Count; }
    }
    public global::investment_system.invsys_one.Timebar GetTimebar(int index) {
      return timebar_[index];
    }
    
    public const int TrendFieldNumber = 12;
    private pbc::PopsicleList<global::investment_system.invsys_one.Trend> trend_ = new pbc::PopsicleList<global::investment_system.invsys_one.Trend>();
    public scg::IList<global::investment_system.invsys_one.Trend> TrendList {
      get { return trend_; }
    }
    public int TrendCount {
      get { return trend_.Count; }
    }
    public global::investment_system.invsys_one.Trend GetTrend(int index) {
      return trend_[index];
    }
    
    public const int PivotFieldNumber = 13;
    private pbc::PopsicleList<global::investment_system.invsys_one.Pivot> pivot_ = new pbc::PopsicleList<global::investment_system.invsys_one.Pivot>();
    public scg::IList<global::investment_system.invsys_one.Pivot> PivotList {
      get { return pivot_; }
    }
    public int PivotCount {
      get { return pivot_.Count; }
    }
    public global::investment_system.invsys_one.Pivot GetPivot(int index) {
      return pivot_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasType) {
        output.WriteEnum(1, (int) Type);
      }
      if (HasOpeningTm) {
        output.WriteString(2, OpeningTm);
      }
      if (HasClosingTm) {
        output.WriteString(3, ClosingTm);
      }
      if (HasUpdateTm) {
        output.WriteString(4, UpdateTm);
      }
      if (HasStatus) {
        output.WriteString(5, Status);
      }
      if (HasBestBid) {
        output.WriteDouble(6, BestBid);
      }
      if (HasBestAsk) {
        output.WriteDouble(7, BestAsk);
      }
      if (HasOpenPl) {
        output.WriteDouble(8, OpenPl);
      }
      if (HasClosedPl) {
        output.WriteDouble(9, ClosedPl);
      }
      foreach (global::investment_system.invsys_one.OrderExecution element in OrderExecutionList) {
        output.WriteMessage(10, element);
      }
      foreach (global::investment_system.invsys_one.Timebar element in TimebarList) {
        output.WriteMessage(11, element);
      }
      foreach (global::investment_system.invsys_one.Trend element in TrendList) {
        output.WriteMessage(12, element);
      }
      foreach (global::investment_system.invsys_one.Pivot element in PivotList) {
        output.WriteMessage(13, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (HasOpeningTm) {
          size += pb::CodedOutputStream.ComputeStringSize(2, OpeningTm);
        }
        if (HasClosingTm) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ClosingTm);
        }
        if (HasUpdateTm) {
          size += pb::CodedOutputStream.ComputeStringSize(4, UpdateTm);
        }
        if (HasStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Status);
        }
        if (HasBestBid) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, BestBid);
        }
        if (HasBestAsk) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, BestAsk);
        }
        if (HasOpenPl) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, OpenPl);
        }
        if (HasClosedPl) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, ClosedPl);
        }
        foreach (global::investment_system.invsys_one.OrderExecution element in OrderExecutionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        foreach (global::investment_system.invsys_one.Timebar element in TimebarList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        foreach (global::investment_system.invsys_one.Trend element in TrendList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        foreach (global::investment_system.invsys_one.Pivot element in PivotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemOneData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemOneData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemOneData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemOneData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemOneData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemOneData result = new InvestmentSystemOneData();
      
      protected override InvestmentSystemOneData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemOneData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneData.Descriptor; }
      }
      
      public override InvestmentSystemOneData DefaultInstanceForType {
        get { return global::investment_system.invsys_one.InvestmentSystemOneData.DefaultInstance; }
      }
      
      public override InvestmentSystemOneData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.orderExecution_.MakeReadOnly();
        result.timebar_.MakeReadOnly();
        result.trend_.MakeReadOnly();
        result.pivot_.MakeReadOnly();
        InvestmentSystemOneData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemOneData) {
          return MergeFrom((InvestmentSystemOneData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemOneData other) {
        if (other == global::investment_system.invsys_one.InvestmentSystemOneData.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasOpeningTm) {
          OpeningTm = other.OpeningTm;
        }
        if (other.HasClosingTm) {
          ClosingTm = other.ClosingTm;
        }
        if (other.HasUpdateTm) {
          UpdateTm = other.UpdateTm;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasBestBid) {
          BestBid = other.BestBid;
        }
        if (other.HasBestAsk) {
          BestAsk = other.BestAsk;
        }
        if (other.HasOpenPl) {
          OpenPl = other.OpenPl;
        }
        if (other.HasClosedPl) {
          ClosedPl = other.ClosedPl;
        }
        if (other.orderExecution_.Count != 0) {
          base.AddRange(other.orderExecution_, result.orderExecution_);
        }
        if (other.timebar_.Count != 0) {
          base.AddRange(other.timebar_, result.timebar_);
        }
        if (other.trend_.Count != 0) {
          base.AddRange(other.trend_, result.trend_);
        }
        if (other.pivot_.Count != 0) {
          base.AddRange(other.pivot_, result.pivot_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Type = (global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType) rawValue;
              }
              break;
            }
            case 18: {
              OpeningTm = input.ReadString();
              break;
            }
            case 26: {
              ClosingTm = input.ReadString();
              break;
            }
            case 34: {
              UpdateTm = input.ReadString();
              break;
            }
            case 42: {
              Status = input.ReadString();
              break;
            }
            case 49: {
              BestBid = input.ReadDouble();
              break;
            }
            case 57: {
              BestAsk = input.ReadDouble();
              break;
            }
            case 65: {
              OpenPl = input.ReadDouble();
              break;
            }
            case 73: {
              ClosedPl = input.ReadDouble();
              break;
            }
            case 82: {
              global::investment_system.invsys_one.OrderExecution.Builder subBuilder = global::investment_system.invsys_one.OrderExecution.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddOrderExecution(subBuilder.BuildPartial());
              break;
            }
            case 90: {
              global::investment_system.invsys_one.Timebar.Builder subBuilder = global::investment_system.invsys_one.Timebar.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddTimebar(subBuilder.BuildPartial());
              break;
            }
            case 98: {
              global::investment_system.invsys_one.Trend.Builder subBuilder = global::investment_system.invsys_one.Trend.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddTrend(subBuilder.BuildPartial());
              break;
            }
            case 106: {
              global::investment_system.invsys_one.Pivot.Builder subBuilder = global::investment_system.invsys_one.Pivot.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPivot(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::investment_system.invsys_one.InvestmentSystemOneData.Types.DataType.SYSTEM;
        return this;
      }
      
      public bool HasOpeningTm {
        get { return result.HasOpeningTm; }
      }
      public string OpeningTm {
        get { return result.OpeningTm; }
        set { SetOpeningTm(value); }
      }
      public Builder SetOpeningTm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpeningTm = true;
        result.openingTm_ = value;
        return this;
      }
      public Builder ClearOpeningTm() {
        result.hasOpeningTm = false;
        result.openingTm_ = "";
        return this;
      }
      
      public bool HasClosingTm {
        get { return result.HasClosingTm; }
      }
      public string ClosingTm {
        get { return result.ClosingTm; }
        set { SetClosingTm(value); }
      }
      public Builder SetClosingTm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClosingTm = true;
        result.closingTm_ = value;
        return this;
      }
      public Builder ClearClosingTm() {
        result.hasClosingTm = false;
        result.closingTm_ = "";
        return this;
      }
      
      public bool HasUpdateTm {
        get { return result.HasUpdateTm; }
      }
      public string UpdateTm {
        get { return result.UpdateTm; }
        set { SetUpdateTm(value); }
      }
      public Builder SetUpdateTm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdateTm = true;
        result.updateTm_ = value;
        return this;
      }
      public Builder ClearUpdateTm() {
        result.hasUpdateTm = false;
        result.updateTm_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.HasStatus; }
      }
      public string Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        result.hasStatus = false;
        result.status_ = "";
        return this;
      }
      
      public bool HasBestBid {
        get { return result.HasBestBid; }
      }
      public double BestBid {
        get { return result.BestBid; }
        set { SetBestBid(value); }
      }
      public Builder SetBestBid(double value) {
        result.hasBestBid = true;
        result.bestBid_ = value;
        return this;
      }
      public Builder ClearBestBid() {
        result.hasBestBid = false;
        result.bestBid_ = 0D;
        return this;
      }
      
      public bool HasBestAsk {
        get { return result.HasBestAsk; }
      }
      public double BestAsk {
        get { return result.BestAsk; }
        set { SetBestAsk(value); }
      }
      public Builder SetBestAsk(double value) {
        result.hasBestAsk = true;
        result.bestAsk_ = value;
        return this;
      }
      public Builder ClearBestAsk() {
        result.hasBestAsk = false;
        result.bestAsk_ = 0D;
        return this;
      }
      
      public bool HasOpenPl {
        get { return result.HasOpenPl; }
      }
      public double OpenPl {
        get { return result.OpenPl; }
        set { SetOpenPl(value); }
      }
      public Builder SetOpenPl(double value) {
        result.hasOpenPl = true;
        result.openPl_ = value;
        return this;
      }
      public Builder ClearOpenPl() {
        result.hasOpenPl = false;
        result.openPl_ = 0D;
        return this;
      }
      
      public bool HasClosedPl {
        get { return result.HasClosedPl; }
      }
      public double ClosedPl {
        get { return result.ClosedPl; }
        set { SetClosedPl(value); }
      }
      public Builder SetClosedPl(double value) {
        result.hasClosedPl = true;
        result.closedPl_ = value;
        return this;
      }
      public Builder ClearClosedPl() {
        result.hasClosedPl = false;
        result.closedPl_ = 0D;
        return this;
      }
      
      public pbc::IPopsicleList<global::investment_system.invsys_one.OrderExecution> OrderExecutionList {
        get { return result.orderExecution_; }
      }
      public int OrderExecutionCount {
        get { return result.OrderExecutionCount; }
      }
      public global::investment_system.invsys_one.OrderExecution GetOrderExecution(int index) {
        return result.GetOrderExecution(index);
      }
      public Builder SetOrderExecution(int index, global::investment_system.invsys_one.OrderExecution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.orderExecution_[index] = value;
        return this;
      }
      public Builder SetOrderExecution(int index, global::investment_system.invsys_one.OrderExecution.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.orderExecution_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOrderExecution(global::investment_system.invsys_one.OrderExecution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.orderExecution_.Add(value);
        return this;
      }
      public Builder AddOrderExecution(global::investment_system.invsys_one.OrderExecution.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.orderExecution_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOrderExecution(scg::IEnumerable<global::investment_system.invsys_one.OrderExecution> values) {
        base.AddRange(values, result.orderExecution_);
        return this;
      }
      public Builder ClearOrderExecution() {
        result.orderExecution_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::investment_system.invsys_one.Timebar> TimebarList {
        get { return result.timebar_; }
      }
      public int TimebarCount {
        get { return result.TimebarCount; }
      }
      public global::investment_system.invsys_one.Timebar GetTimebar(int index) {
        return result.GetTimebar(index);
      }
      public Builder SetTimebar(int index, global::investment_system.invsys_one.Timebar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.timebar_[index] = value;
        return this;
      }
      public Builder SetTimebar(int index, global::investment_system.invsys_one.Timebar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.timebar_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTimebar(global::investment_system.invsys_one.Timebar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.timebar_.Add(value);
        return this;
      }
      public Builder AddTimebar(global::investment_system.invsys_one.Timebar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.timebar_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTimebar(scg::IEnumerable<global::investment_system.invsys_one.Timebar> values) {
        base.AddRange(values, result.timebar_);
        return this;
      }
      public Builder ClearTimebar() {
        result.timebar_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::investment_system.invsys_one.Trend> TrendList {
        get { return result.trend_; }
      }
      public int TrendCount {
        get { return result.TrendCount; }
      }
      public global::investment_system.invsys_one.Trend GetTrend(int index) {
        return result.GetTrend(index);
      }
      public Builder SetTrend(int index, global::investment_system.invsys_one.Trend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.trend_[index] = value;
        return this;
      }
      public Builder SetTrend(int index, global::investment_system.invsys_one.Trend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.trend_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTrend(global::investment_system.invsys_one.Trend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.trend_.Add(value);
        return this;
      }
      public Builder AddTrend(global::investment_system.invsys_one.Trend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.trend_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTrend(scg::IEnumerable<global::investment_system.invsys_one.Trend> values) {
        base.AddRange(values, result.trend_);
        return this;
      }
      public Builder ClearTrend() {
        result.trend_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::investment_system.invsys_one.Pivot> PivotList {
        get { return result.pivot_; }
      }
      public int PivotCount {
        get { return result.PivotCount; }
      }
      public global::investment_system.invsys_one.Pivot GetPivot(int index) {
        return result.GetPivot(index);
      }
      public Builder SetPivot(int index, global::investment_system.invsys_one.Pivot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pivot_[index] = value;
        return this;
      }
      public Builder SetPivot(int index, global::investment_system.invsys_one.Pivot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pivot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPivot(global::investment_system.invsys_one.Pivot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pivot_.Add(value);
        return this;
      }
      public Builder AddPivot(global::investment_system.invsys_one.Pivot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pivot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePivot(scg::IEnumerable<global::investment_system.invsys_one.Pivot> values) {
        base.AddRange(values, result.pivot_);
        return this;
      }
      public Builder ClearPivot() {
        result.pivot_.Clear();
        return this;
      }
    }
    static InvestmentSystemOneData() {
      object.ReferenceEquals(global::investment_system.invsys_one.InvsysOne.Descriptor, null);
    }
  }
  
  #endregion
  
}
