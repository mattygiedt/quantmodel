// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qmapi.proto

#ifndef PROTOBUF_qmapi_2eproto__INCLUDED
#define PROTOBUF_qmapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace QMAPI {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_qmapi_2eproto();
void protobuf_AssignDesc_qmapi_2eproto();
void protobuf_ShutdownFile_qmapi_2eproto();

class MarketDataBroadcast;
class CreateTradeRequest;

enum MarketDataBroadcast_BroadcastType {
  MarketDataBroadcast_BroadcastType_BID_QUOTE = 0,
  MarketDataBroadcast_BroadcastType_ASK_QUOTE = 1,
  MarketDataBroadcast_BroadcastType_BID_TRADE = 2,
  MarketDataBroadcast_BroadcastType_ASK_TRADE = 3,
  MarketDataBroadcast_BroadcastType_TRADE = 4
};
bool MarketDataBroadcast_BroadcastType_IsValid(int value);
const MarketDataBroadcast_BroadcastType MarketDataBroadcast_BroadcastType_BroadcastType_MIN = MarketDataBroadcast_BroadcastType_BID_QUOTE;
const MarketDataBroadcast_BroadcastType MarketDataBroadcast_BroadcastType_BroadcastType_MAX = MarketDataBroadcast_BroadcastType_TRADE;
const int MarketDataBroadcast_BroadcastType_BroadcastType_ARRAYSIZE = MarketDataBroadcast_BroadcastType_BroadcastType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketDataBroadcast_BroadcastType_descriptor();
inline const ::std::string& MarketDataBroadcast_BroadcastType_Name(MarketDataBroadcast_BroadcastType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketDataBroadcast_BroadcastType_descriptor(), value);
}
inline bool MarketDataBroadcast_BroadcastType_Parse(
    const ::std::string& name, MarketDataBroadcast_BroadcastType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketDataBroadcast_BroadcastType>(
    MarketDataBroadcast_BroadcastType_descriptor(), name, value);
}
enum MarketDataBroadcast_UpdateAction {
  MarketDataBroadcast_UpdateAction_ADD = 0,
  MarketDataBroadcast_UpdateAction_CHANGE = 1,
  MarketDataBroadcast_UpdateAction_DELETE = 2,
  MarketDataBroadcast_UpdateAction_OVERLAY = 5
};
bool MarketDataBroadcast_UpdateAction_IsValid(int value);
const MarketDataBroadcast_UpdateAction MarketDataBroadcast_UpdateAction_UpdateAction_MIN = MarketDataBroadcast_UpdateAction_ADD;
const MarketDataBroadcast_UpdateAction MarketDataBroadcast_UpdateAction_UpdateAction_MAX = MarketDataBroadcast_UpdateAction_OVERLAY;
const int MarketDataBroadcast_UpdateAction_UpdateAction_ARRAYSIZE = MarketDataBroadcast_UpdateAction_UpdateAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketDataBroadcast_UpdateAction_descriptor();
inline const ::std::string& MarketDataBroadcast_UpdateAction_Name(MarketDataBroadcast_UpdateAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketDataBroadcast_UpdateAction_descriptor(), value);
}
inline bool MarketDataBroadcast_UpdateAction_Parse(
    const ::std::string& name, MarketDataBroadcast_UpdateAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketDataBroadcast_UpdateAction>(
    MarketDataBroadcast_UpdateAction_descriptor(), name, value);
}
enum CreateTradeRequest_SideCode {
  CreateTradeRequest_SideCode_BUY = 0,
  CreateTradeRequest_SideCode_SELL = 1
};
bool CreateTradeRequest_SideCode_IsValid(int value);
const CreateTradeRequest_SideCode CreateTradeRequest_SideCode_SideCode_MIN = CreateTradeRequest_SideCode_BUY;
const CreateTradeRequest_SideCode CreateTradeRequest_SideCode_SideCode_MAX = CreateTradeRequest_SideCode_SELL;
const int CreateTradeRequest_SideCode_SideCode_ARRAYSIZE = CreateTradeRequest_SideCode_SideCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateTradeRequest_SideCode_descriptor();
inline const ::std::string& CreateTradeRequest_SideCode_Name(CreateTradeRequest_SideCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateTradeRequest_SideCode_descriptor(), value);
}
inline bool CreateTradeRequest_SideCode_Parse(
    const ::std::string& name, CreateTradeRequest_SideCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateTradeRequest_SideCode>(
    CreateTradeRequest_SideCode_descriptor(), name, value);
}
enum CreateTradeRequest_TradeCondition {
  CreateTradeRequest_TradeCondition_MARKET = 0,
  CreateTradeRequest_TradeCondition_LIMIT = 1,
  CreateTradeRequest_TradeCondition_STOP = 2,
  CreateTradeRequest_TradeCondition_STOP_LIMIT = 3
};
bool CreateTradeRequest_TradeCondition_IsValid(int value);
const CreateTradeRequest_TradeCondition CreateTradeRequest_TradeCondition_TradeCondition_MIN = CreateTradeRequest_TradeCondition_MARKET;
const CreateTradeRequest_TradeCondition CreateTradeRequest_TradeCondition_TradeCondition_MAX = CreateTradeRequest_TradeCondition_STOP_LIMIT;
const int CreateTradeRequest_TradeCondition_TradeCondition_ARRAYSIZE = CreateTradeRequest_TradeCondition_TradeCondition_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateTradeRequest_TradeCondition_descriptor();
inline const ::std::string& CreateTradeRequest_TradeCondition_Name(CreateTradeRequest_TradeCondition value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateTradeRequest_TradeCondition_descriptor(), value);
}
inline bool CreateTradeRequest_TradeCondition_Parse(
    const ::std::string& name, CreateTradeRequest_TradeCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateTradeRequest_TradeCondition>(
    CreateTradeRequest_TradeCondition_descriptor(), name, value);
}
// ===================================================================

class MarketDataBroadcast : public ::google::protobuf::Message {
 public:
  MarketDataBroadcast();
  virtual ~MarketDataBroadcast();
  
  MarketDataBroadcast(const MarketDataBroadcast& from);
  
  inline MarketDataBroadcast& operator=(const MarketDataBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDataBroadcast& default_instance();
  
  void Swap(MarketDataBroadcast* other);
  
  // implements Message ----------------------------------------------
  
  MarketDataBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketDataBroadcast& from);
  void MergeFrom(const MarketDataBroadcast& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MarketDataBroadcast_BroadcastType BroadcastType;
  static const BroadcastType BID_QUOTE = MarketDataBroadcast_BroadcastType_BID_QUOTE;
  static const BroadcastType ASK_QUOTE = MarketDataBroadcast_BroadcastType_ASK_QUOTE;
  static const BroadcastType BID_TRADE = MarketDataBroadcast_BroadcastType_BID_TRADE;
  static const BroadcastType ASK_TRADE = MarketDataBroadcast_BroadcastType_ASK_TRADE;
  static const BroadcastType TRADE = MarketDataBroadcast_BroadcastType_TRADE;
  static inline bool BroadcastType_IsValid(int value) {
    return MarketDataBroadcast_BroadcastType_IsValid(value);
  }
  static const BroadcastType BroadcastType_MIN =
    MarketDataBroadcast_BroadcastType_BroadcastType_MIN;
  static const BroadcastType BroadcastType_MAX =
    MarketDataBroadcast_BroadcastType_BroadcastType_MAX;
  static const int BroadcastType_ARRAYSIZE =
    MarketDataBroadcast_BroadcastType_BroadcastType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BroadcastType_descriptor() {
    return MarketDataBroadcast_BroadcastType_descriptor();
  }
  static inline const ::std::string& BroadcastType_Name(BroadcastType value) {
    return MarketDataBroadcast_BroadcastType_Name(value);
  }
  static inline bool BroadcastType_Parse(const ::std::string& name,
      BroadcastType* value) {
    return MarketDataBroadcast_BroadcastType_Parse(name, value);
  }
  
  typedef MarketDataBroadcast_UpdateAction UpdateAction;
  static const UpdateAction ADD = MarketDataBroadcast_UpdateAction_ADD;
  static const UpdateAction CHANGE = MarketDataBroadcast_UpdateAction_CHANGE;
  static const UpdateAction DELETE = MarketDataBroadcast_UpdateAction_DELETE;
  static const UpdateAction OVERLAY = MarketDataBroadcast_UpdateAction_OVERLAY;
  static inline bool UpdateAction_IsValid(int value) {
    return MarketDataBroadcast_UpdateAction_IsValid(value);
  }
  static const UpdateAction UpdateAction_MIN =
    MarketDataBroadcast_UpdateAction_UpdateAction_MIN;
  static const UpdateAction UpdateAction_MAX =
    MarketDataBroadcast_UpdateAction_UpdateAction_MAX;
  static const int UpdateAction_ARRAYSIZE =
    MarketDataBroadcast_UpdateAction_UpdateAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateAction_descriptor() {
    return MarketDataBroadcast_UpdateAction_descriptor();
  }
  static inline const ::std::string& UpdateAction_Name(UpdateAction value) {
    return MarketDataBroadcast_UpdateAction_Name(value);
  }
  static inline bool UpdateAction_Parse(const ::std::string& name,
      UpdateAction* value) {
    return MarketDataBroadcast_UpdateAction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  
  // required uint32 security_id = 2;
  inline bool has_security_id() const;
  inline void clear_security_id();
  static const int kSecurityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 security_id() const;
  inline void set_security_id(::google::protobuf::uint32 value);
  
  // required .QMAPI.MarketDataBroadcast.BroadcastType broadcast_type = 3;
  inline bool has_broadcast_type() const;
  inline void clear_broadcast_type();
  static const int kBroadcastTypeFieldNumber = 3;
  inline ::QMAPI::MarketDataBroadcast_BroadcastType broadcast_type() const;
  inline void set_broadcast_type(::QMAPI::MarketDataBroadcast_BroadcastType value);
  
  // required .QMAPI.MarketDataBroadcast.UpdateAction update_action = 4;
  inline bool has_update_action() const;
  inline void clear_update_action();
  static const int kUpdateActionFieldNumber = 4;
  inline ::QMAPI::MarketDataBroadcast_UpdateAction update_action() const;
  inline void set_update_action(::QMAPI::MarketDataBroadcast_UpdateAction value);
  
  // required int32 entry_size = 5 [default = 0];
  inline bool has_entry_size() const;
  inline void clear_entry_size();
  static const int kEntrySizeFieldNumber = 5;
  inline ::google::protobuf::int32 entry_size() const;
  inline void set_entry_size(::google::protobuf::int32 value);
  
  // required int64 entry_price = 6 [default = 0];
  inline bool has_entry_price() const;
  inline void clear_entry_price();
  static const int kEntryPriceFieldNumber = 6;
  inline ::google::protobuf::int64 entry_price() const;
  inline void set_entry_price(::google::protobuf::int64 value);
  
  // optional uint32 orders = 7 [default = 0];
  inline bool has_orders() const;
  inline void clear_orders();
  static const int kOrdersFieldNumber = 7;
  inline ::google::protobuf::uint32 orders() const;
  inline void set_orders(::google::protobuf::uint32 value);
  
  // optional uint32 price_level = 8 [default = 0];
  inline bool has_price_level() const;
  inline void clear_price_level();
  static const int kPriceLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 price_level() const;
  inline void set_price_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QMAPI.MarketDataBroadcast)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_security_id();
  inline void clear_has_security_id();
  inline void set_has_broadcast_type();
  inline void clear_has_broadcast_type();
  inline void set_has_update_action();
  inline void clear_has_update_action();
  inline void set_has_entry_size();
  inline void clear_has_entry_size();
  inline void set_has_entry_price();
  inline void clear_has_entry_price();
  inline void set_has_orders();
  inline void clear_has_orders();
  inline void set_has_price_level();
  inline void clear_has_price_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* timestamp_;
  ::google::protobuf::uint32 security_id_;
  int broadcast_type_;
  int update_action_;
  ::google::protobuf::int32 entry_size_;
  ::google::protobuf::int64 entry_price_;
  ::google::protobuf::uint32 orders_;
  ::google::protobuf::uint32 price_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_qmapi_2eproto();
  friend void protobuf_AssignDesc_qmapi_2eproto();
  friend void protobuf_ShutdownFile_qmapi_2eproto();
  
  void InitAsDefaultInstance();
  static MarketDataBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class CreateTradeRequest : public ::google::protobuf::Message {
 public:
  CreateTradeRequest();
  virtual ~CreateTradeRequest();
  
  CreateTradeRequest(const CreateTradeRequest& from);
  
  inline CreateTradeRequest& operator=(const CreateTradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTradeRequest& default_instance();
  
  void Swap(CreateTradeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CreateTradeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateTradeRequest& from);
  void MergeFrom(const CreateTradeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CreateTradeRequest_SideCode SideCode;
  static const SideCode BUY = CreateTradeRequest_SideCode_BUY;
  static const SideCode SELL = CreateTradeRequest_SideCode_SELL;
  static inline bool SideCode_IsValid(int value) {
    return CreateTradeRequest_SideCode_IsValid(value);
  }
  static const SideCode SideCode_MIN =
    CreateTradeRequest_SideCode_SideCode_MIN;
  static const SideCode SideCode_MAX =
    CreateTradeRequest_SideCode_SideCode_MAX;
  static const int SideCode_ARRAYSIZE =
    CreateTradeRequest_SideCode_SideCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SideCode_descriptor() {
    return CreateTradeRequest_SideCode_descriptor();
  }
  static inline const ::std::string& SideCode_Name(SideCode value) {
    return CreateTradeRequest_SideCode_Name(value);
  }
  static inline bool SideCode_Parse(const ::std::string& name,
      SideCode* value) {
    return CreateTradeRequest_SideCode_Parse(name, value);
  }
  
  typedef CreateTradeRequest_TradeCondition TradeCondition;
  static const TradeCondition MARKET = CreateTradeRequest_TradeCondition_MARKET;
  static const TradeCondition LIMIT = CreateTradeRequest_TradeCondition_LIMIT;
  static const TradeCondition STOP = CreateTradeRequest_TradeCondition_STOP;
  static const TradeCondition STOP_LIMIT = CreateTradeRequest_TradeCondition_STOP_LIMIT;
  static inline bool TradeCondition_IsValid(int value) {
    return CreateTradeRequest_TradeCondition_IsValid(value);
  }
  static const TradeCondition TradeCondition_MIN =
    CreateTradeRequest_TradeCondition_TradeCondition_MIN;
  static const TradeCondition TradeCondition_MAX =
    CreateTradeRequest_TradeCondition_TradeCondition_MAX;
  static const int TradeCondition_ARRAYSIZE =
    CreateTradeRequest_TradeCondition_TradeCondition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TradeCondition_descriptor() {
    return CreateTradeRequest_TradeCondition_descriptor();
  }
  static inline const ::std::string& TradeCondition_Name(TradeCondition value) {
    return CreateTradeRequest_TradeCondition_Name(value);
  }
  static inline bool TradeCondition_Parse(const ::std::string& name,
      TradeCondition* value) {
    return CreateTradeRequest_TradeCondition_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 security_id = 1;
  inline bool has_security_id() const;
  inline void clear_security_id();
  static const int kSecurityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 security_id() const;
  inline void set_security_id(::google::protobuf::uint32 value);
  
  // required string ext_order_id = 2;
  inline bool has_ext_order_id() const;
  inline void clear_ext_order_id();
  static const int kExtOrderIdFieldNumber = 2;
  inline const ::std::string& ext_order_id() const;
  inline void set_ext_order_id(const ::std::string& value);
  inline void set_ext_order_id(const char* value);
  inline void set_ext_order_id(const char* value, size_t size);
  inline ::std::string* mutable_ext_order_id();
  inline ::std::string* release_ext_order_id();
  
  // required string investment_system_id = 3;
  inline bool has_investment_system_id() const;
  inline void clear_investment_system_id();
  static const int kInvestmentSystemIdFieldNumber = 3;
  inline const ::std::string& investment_system_id() const;
  inline void set_investment_system_id(const ::std::string& value);
  inline void set_investment_system_id(const char* value);
  inline void set_investment_system_id(const char* value, size_t size);
  inline ::std::string* mutable_investment_system_id();
  inline ::std::string* release_investment_system_id();
  
  // required string strategy_id = 4;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 4;
  inline const ::std::string& strategy_id() const;
  inline void set_strategy_id(const ::std::string& value);
  inline void set_strategy_id(const char* value);
  inline void set_strategy_id(const char* value, size_t size);
  inline ::std::string* mutable_strategy_id();
  inline ::std::string* release_strategy_id();
  
  // required .QMAPI.CreateTradeRequest.SideCode side_code = 5;
  inline bool has_side_code() const;
  inline void clear_side_code();
  static const int kSideCodeFieldNumber = 5;
  inline ::QMAPI::CreateTradeRequest_SideCode side_code() const;
  inline void set_side_code(::QMAPI::CreateTradeRequest_SideCode value);
  
  // required .QMAPI.CreateTradeRequest.TradeCondition trade_condition = 6;
  inline bool has_trade_condition() const;
  inline void clear_trade_condition();
  static const int kTradeConditionFieldNumber = 6;
  inline ::QMAPI::CreateTradeRequest_TradeCondition trade_condition() const;
  inline void set_trade_condition(::QMAPI::CreateTradeRequest_TradeCondition value);
  
  // required uint32 signal_size = 7;
  inline bool has_signal_size() const;
  inline void clear_signal_size();
  static const int kSignalSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 signal_size() const;
  inline void set_signal_size(::google::protobuf::uint32 value);
  
  // optional int64 limit_price = 8;
  inline bool has_limit_price() const;
  inline void clear_limit_price();
  static const int kLimitPriceFieldNumber = 8;
  inline ::google::protobuf::int64 limit_price() const;
  inline void set_limit_price(::google::protobuf::int64 value);
  
  // optional int64 stop_price = 9;
  inline bool has_stop_price() const;
  inline void clear_stop_price();
  static const int kStopPriceFieldNumber = 9;
  inline ::google::protobuf::int64 stop_price() const;
  inline void set_stop_price(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:QMAPI.CreateTradeRequest)
 private:
  inline void set_has_security_id();
  inline void clear_has_security_id();
  inline void set_has_ext_order_id();
  inline void clear_has_ext_order_id();
  inline void set_has_investment_system_id();
  inline void clear_has_investment_system_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_side_code();
  inline void clear_has_side_code();
  inline void set_has_trade_condition();
  inline void clear_has_trade_condition();
  inline void set_has_signal_size();
  inline void clear_has_signal_size();
  inline void set_has_limit_price();
  inline void clear_has_limit_price();
  inline void set_has_stop_price();
  inline void clear_has_stop_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ext_order_id_;
  ::std::string* investment_system_id_;
  ::google::protobuf::uint32 security_id_;
  int side_code_;
  ::std::string* strategy_id_;
  int trade_condition_;
  ::google::protobuf::uint32 signal_size_;
  ::google::protobuf::int64 limit_price_;
  ::google::protobuf::int64 stop_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_qmapi_2eproto();
  friend void protobuf_AssignDesc_qmapi_2eproto();
  friend void protobuf_ShutdownFile_qmapi_2eproto();
  
  void InitAsDefaultInstance();
  static CreateTradeRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// MarketDataBroadcast

// required string timestamp = 1;
inline bool MarketDataBroadcast::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketDataBroadcast::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketDataBroadcast::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketDataBroadcast::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MarketDataBroadcast::timestamp() const {
  return *timestamp_;
}
inline void MarketDataBroadcast::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MarketDataBroadcast::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MarketDataBroadcast::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketDataBroadcast::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* MarketDataBroadcast::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 security_id = 2;
inline bool MarketDataBroadcast::has_security_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketDataBroadcast::set_has_security_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketDataBroadcast::clear_has_security_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketDataBroadcast::clear_security_id() {
  security_id_ = 0u;
  clear_has_security_id();
}
inline ::google::protobuf::uint32 MarketDataBroadcast::security_id() const {
  return security_id_;
}
inline void MarketDataBroadcast::set_security_id(::google::protobuf::uint32 value) {
  set_has_security_id();
  security_id_ = value;
}

// required .QMAPI.MarketDataBroadcast.BroadcastType broadcast_type = 3;
inline bool MarketDataBroadcast::has_broadcast_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketDataBroadcast::set_has_broadcast_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketDataBroadcast::clear_has_broadcast_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketDataBroadcast::clear_broadcast_type() {
  broadcast_type_ = 0;
  clear_has_broadcast_type();
}
inline ::QMAPI::MarketDataBroadcast_BroadcastType MarketDataBroadcast::broadcast_type() const {
  return static_cast< ::QMAPI::MarketDataBroadcast_BroadcastType >(broadcast_type_);
}
inline void MarketDataBroadcast::set_broadcast_type(::QMAPI::MarketDataBroadcast_BroadcastType value) {
  GOOGLE_DCHECK(::QMAPI::MarketDataBroadcast_BroadcastType_IsValid(value));
  set_has_broadcast_type();
  broadcast_type_ = value;
}

// required .QMAPI.MarketDataBroadcast.UpdateAction update_action = 4;
inline bool MarketDataBroadcast::has_update_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketDataBroadcast::set_has_update_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketDataBroadcast::clear_has_update_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketDataBroadcast::clear_update_action() {
  update_action_ = 0;
  clear_has_update_action();
}
inline ::QMAPI::MarketDataBroadcast_UpdateAction MarketDataBroadcast::update_action() const {
  return static_cast< ::QMAPI::MarketDataBroadcast_UpdateAction >(update_action_);
}
inline void MarketDataBroadcast::set_update_action(::QMAPI::MarketDataBroadcast_UpdateAction value) {
  GOOGLE_DCHECK(::QMAPI::MarketDataBroadcast_UpdateAction_IsValid(value));
  set_has_update_action();
  update_action_ = value;
}

// required int32 entry_size = 5 [default = 0];
inline bool MarketDataBroadcast::has_entry_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketDataBroadcast::set_has_entry_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketDataBroadcast::clear_has_entry_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketDataBroadcast::clear_entry_size() {
  entry_size_ = 0;
  clear_has_entry_size();
}
inline ::google::protobuf::int32 MarketDataBroadcast::entry_size() const {
  return entry_size_;
}
inline void MarketDataBroadcast::set_entry_size(::google::protobuf::int32 value) {
  set_has_entry_size();
  entry_size_ = value;
}

// required int64 entry_price = 6 [default = 0];
inline bool MarketDataBroadcast::has_entry_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketDataBroadcast::set_has_entry_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketDataBroadcast::clear_has_entry_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketDataBroadcast::clear_entry_price() {
  entry_price_ = GOOGLE_LONGLONG(0);
  clear_has_entry_price();
}
inline ::google::protobuf::int64 MarketDataBroadcast::entry_price() const {
  return entry_price_;
}
inline void MarketDataBroadcast::set_entry_price(::google::protobuf::int64 value) {
  set_has_entry_price();
  entry_price_ = value;
}

// optional uint32 orders = 7 [default = 0];
inline bool MarketDataBroadcast::has_orders() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketDataBroadcast::set_has_orders() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketDataBroadcast::clear_has_orders() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketDataBroadcast::clear_orders() {
  orders_ = 0u;
  clear_has_orders();
}
inline ::google::protobuf::uint32 MarketDataBroadcast::orders() const {
  return orders_;
}
inline void MarketDataBroadcast::set_orders(::google::protobuf::uint32 value) {
  set_has_orders();
  orders_ = value;
}

// optional uint32 price_level = 8 [default = 0];
inline bool MarketDataBroadcast::has_price_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketDataBroadcast::set_has_price_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketDataBroadcast::clear_has_price_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketDataBroadcast::clear_price_level() {
  price_level_ = 0u;
  clear_has_price_level();
}
inline ::google::protobuf::uint32 MarketDataBroadcast::price_level() const {
  return price_level_;
}
inline void MarketDataBroadcast::set_price_level(::google::protobuf::uint32 value) {
  set_has_price_level();
  price_level_ = value;
}

// -------------------------------------------------------------------

// CreateTradeRequest

// required uint32 security_id = 1;
inline bool CreateTradeRequest::has_security_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTradeRequest::set_has_security_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTradeRequest::clear_has_security_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTradeRequest::clear_security_id() {
  security_id_ = 0u;
  clear_has_security_id();
}
inline ::google::protobuf::uint32 CreateTradeRequest::security_id() const {
  return security_id_;
}
inline void CreateTradeRequest::set_security_id(::google::protobuf::uint32 value) {
  set_has_security_id();
  security_id_ = value;
}

// required string ext_order_id = 2;
inline bool CreateTradeRequest::has_ext_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTradeRequest::set_has_ext_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTradeRequest::clear_has_ext_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTradeRequest::clear_ext_order_id() {
  if (ext_order_id_ != &::google::protobuf::internal::kEmptyString) {
    ext_order_id_->clear();
  }
  clear_has_ext_order_id();
}
inline const ::std::string& CreateTradeRequest::ext_order_id() const {
  return *ext_order_id_;
}
inline void CreateTradeRequest::set_ext_order_id(const ::std::string& value) {
  set_has_ext_order_id();
  if (ext_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_order_id_ = new ::std::string;
  }
  ext_order_id_->assign(value);
}
inline void CreateTradeRequest::set_ext_order_id(const char* value) {
  set_has_ext_order_id();
  if (ext_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_order_id_ = new ::std::string;
  }
  ext_order_id_->assign(value);
}
inline void CreateTradeRequest::set_ext_order_id(const char* value, size_t size) {
  set_has_ext_order_id();
  if (ext_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_order_id_ = new ::std::string;
  }
  ext_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateTradeRequest::mutable_ext_order_id() {
  set_has_ext_order_id();
  if (ext_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_order_id_ = new ::std::string;
  }
  return ext_order_id_;
}
inline ::std::string* CreateTradeRequest::release_ext_order_id() {
  clear_has_ext_order_id();
  if (ext_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_order_id_;
    ext_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string investment_system_id = 3;
inline bool CreateTradeRequest::has_investment_system_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTradeRequest::set_has_investment_system_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTradeRequest::clear_has_investment_system_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTradeRequest::clear_investment_system_id() {
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    investment_system_id_->clear();
  }
  clear_has_investment_system_id();
}
inline const ::std::string& CreateTradeRequest::investment_system_id() const {
  return *investment_system_id_;
}
inline void CreateTradeRequest::set_investment_system_id(const ::std::string& value) {
  set_has_investment_system_id();
  if (investment_system_id_ == &::google::protobuf::internal::kEmptyString) {
    investment_system_id_ = new ::std::string;
  }
  investment_system_id_->assign(value);
}
inline void CreateTradeRequest::set_investment_system_id(const char* value) {
  set_has_investment_system_id();
  if (investment_system_id_ == &::google::protobuf::internal::kEmptyString) {
    investment_system_id_ = new ::std::string;
  }
  investment_system_id_->assign(value);
}
inline void CreateTradeRequest::set_investment_system_id(const char* value, size_t size) {
  set_has_investment_system_id();
  if (investment_system_id_ == &::google::protobuf::internal::kEmptyString) {
    investment_system_id_ = new ::std::string;
  }
  investment_system_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateTradeRequest::mutable_investment_system_id() {
  set_has_investment_system_id();
  if (investment_system_id_ == &::google::protobuf::internal::kEmptyString) {
    investment_system_id_ = new ::std::string;
  }
  return investment_system_id_;
}
inline ::std::string* CreateTradeRequest::release_investment_system_id() {
  clear_has_investment_system_id();
  if (investment_system_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = investment_system_id_;
    investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strategy_id = 4;
inline bool CreateTradeRequest::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateTradeRequest::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateTradeRequest::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateTradeRequest::clear_strategy_id() {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    strategy_id_->clear();
  }
  clear_has_strategy_id();
}
inline const ::std::string& CreateTradeRequest::strategy_id() const {
  return *strategy_id_;
}
inline void CreateTradeRequest::set_strategy_id(const ::std::string& value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void CreateTradeRequest::set_strategy_id(const char* value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void CreateTradeRequest::set_strategy_id(const char* value, size_t size) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateTradeRequest::mutable_strategy_id() {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  return strategy_id_;
}
inline ::std::string* CreateTradeRequest::release_strategy_id() {
  clear_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strategy_id_;
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .QMAPI.CreateTradeRequest.SideCode side_code = 5;
inline bool CreateTradeRequest::has_side_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateTradeRequest::set_has_side_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateTradeRequest::clear_has_side_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateTradeRequest::clear_side_code() {
  side_code_ = 0;
  clear_has_side_code();
}
inline ::QMAPI::CreateTradeRequest_SideCode CreateTradeRequest::side_code() const {
  return static_cast< ::QMAPI::CreateTradeRequest_SideCode >(side_code_);
}
inline void CreateTradeRequest::set_side_code(::QMAPI::CreateTradeRequest_SideCode value) {
  GOOGLE_DCHECK(::QMAPI::CreateTradeRequest_SideCode_IsValid(value));
  set_has_side_code();
  side_code_ = value;
}

// required .QMAPI.CreateTradeRequest.TradeCondition trade_condition = 6;
inline bool CreateTradeRequest::has_trade_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateTradeRequest::set_has_trade_condition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateTradeRequest::clear_has_trade_condition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateTradeRequest::clear_trade_condition() {
  trade_condition_ = 0;
  clear_has_trade_condition();
}
inline ::QMAPI::CreateTradeRequest_TradeCondition CreateTradeRequest::trade_condition() const {
  return static_cast< ::QMAPI::CreateTradeRequest_TradeCondition >(trade_condition_);
}
inline void CreateTradeRequest::set_trade_condition(::QMAPI::CreateTradeRequest_TradeCondition value) {
  GOOGLE_DCHECK(::QMAPI::CreateTradeRequest_TradeCondition_IsValid(value));
  set_has_trade_condition();
  trade_condition_ = value;
}

// required uint32 signal_size = 7;
inline bool CreateTradeRequest::has_signal_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateTradeRequest::set_has_signal_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateTradeRequest::clear_has_signal_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateTradeRequest::clear_signal_size() {
  signal_size_ = 0u;
  clear_has_signal_size();
}
inline ::google::protobuf::uint32 CreateTradeRequest::signal_size() const {
  return signal_size_;
}
inline void CreateTradeRequest::set_signal_size(::google::protobuf::uint32 value) {
  set_has_signal_size();
  signal_size_ = value;
}

// optional int64 limit_price = 8;
inline bool CreateTradeRequest::has_limit_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateTradeRequest::set_has_limit_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateTradeRequest::clear_has_limit_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateTradeRequest::clear_limit_price() {
  limit_price_ = GOOGLE_LONGLONG(0);
  clear_has_limit_price();
}
inline ::google::protobuf::int64 CreateTradeRequest::limit_price() const {
  return limit_price_;
}
inline void CreateTradeRequest::set_limit_price(::google::protobuf::int64 value) {
  set_has_limit_price();
  limit_price_ = value;
}

// optional int64 stop_price = 9;
inline bool CreateTradeRequest::has_stop_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateTradeRequest::set_has_stop_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateTradeRequest::clear_has_stop_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateTradeRequest::clear_stop_price() {
  stop_price_ = GOOGLE_LONGLONG(0);
  clear_has_stop_price();
}
inline ::google::protobuf::int64 CreateTradeRequest::stop_price() const {
  return stop_price_;
}
inline void CreateTradeRequest::set_stop_price(::google::protobuf::int64 value) {
  set_has_stop_price();
  stop_price_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QMAPI

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QMAPI::MarketDataBroadcast_BroadcastType>() {
  return ::QMAPI::MarketDataBroadcast_BroadcastType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QMAPI::MarketDataBroadcast_UpdateAction>() {
  return ::QMAPI::MarketDataBroadcast_UpdateAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QMAPI::CreateTradeRequest_SideCode>() {
  return ::QMAPI::CreateTradeRequest_SideCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QMAPI::CreateTradeRequest_TradeCondition>() {
  return ::QMAPI::CreateTradeRequest_TradeCondition_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qmapi_2eproto__INCLUDED
