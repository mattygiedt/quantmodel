// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CMEMarketDataProtobuf.proto

#ifndef PROTOBUF_CMEMarketDataProtobuf_2eproto__INCLUDED
#define PROTOBUF_CMEMarketDataProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fast_engine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();
void protobuf_AssignDesc_CMEMarketDataProtobuf_2eproto();
void protobuf_ShutdownFile_CMEMarketDataProtobuf_2eproto();

class CMEMarketDataEntry;
class CMEMarketDataProtobuf;

enum CMEMarketDataEntry_CMEEntryType {
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_BID = 48,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_ASK = 49,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADE = 50,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_OPENING_PRICE = 52,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SETTLEMENT_PRICE = 54,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE = 55,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADING_SESSION_LOW_PRICE = 56,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADE_VOLUME = 66,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_OPEN_INTEREST = 67,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SIMULATED_SELL = 69,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SIMULATED_BUY = 70,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_EMPTY_BOOK = 74,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_PRIOR = 77,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SESSION_HIGH_BID = 78,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SESSION_LOW_OFFER = 79,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_FIXING_PRICE = 87,
  CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_CASH_NOTE = 88
};
bool CMEMarketDataEntry_CMEEntryType_IsValid(int value);
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry_CMEEntryType_CMEEntryType_MIN = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_BID;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry_CMEEntryType_CMEEntryType_MAX = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_CASH_NOTE;
const int CMEMarketDataEntry_CMEEntryType_CMEEntryType_ARRAYSIZE = CMEMarketDataEntry_CMEEntryType_CMEEntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEEntryType_descriptor();
inline const ::std::string& CMEMarketDataEntry_CMEEntryType_Name(CMEMarketDataEntry_CMEEntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataEntry_CMEEntryType_descriptor(), value);
}
inline bool CMEMarketDataEntry_CMEEntryType_Parse(
    const ::std::string& name, CMEMarketDataEntry_CMEEntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataEntry_CMEEntryType>(
    CMEMarketDataEntry_CMEEntryType_descriptor(), name, value);
}
enum CMEMarketDataEntry_CMEQuoteCondition {
  CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_IMPLIED = 75,
  CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_LAST_BEST_PRICE = 67
};
bool CMEMarketDataEntry_CMEQuoteCondition_IsValid(int value);
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_MIN = CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_LAST_BEST_PRICE;
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_MAX = CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_IMPLIED;
const int CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_ARRAYSIZE = CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEQuoteCondition_descriptor();
inline const ::std::string& CMEMarketDataEntry_CMEQuoteCondition_Name(CMEMarketDataEntry_CMEQuoteCondition value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataEntry_CMEQuoteCondition_descriptor(), value);
}
inline bool CMEMarketDataEntry_CMEQuoteCondition_Parse(
    const ::std::string& name, CMEMarketDataEntry_CMEQuoteCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataEntry_CMEQuoteCondition>(
    CMEMarketDataEntry_CMEQuoteCondition_descriptor(), name, value);
}
enum CMEMarketDataEntry_CMETradingSessionID {
  CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_PRE_OPENING = 48,
  CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_OPENING = 49,
  CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_CONTINUOUS = 50
};
bool CMEMarketDataEntry_CMETradingSessionID_IsValid(int value);
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_MIN = CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_PRE_OPENING;
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_MAX = CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_CONTINUOUS;
const int CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_ARRAYSIZE = CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradingSessionID_descriptor();
inline const ::std::string& CMEMarketDataEntry_CMETradingSessionID_Name(CMEMarketDataEntry_CMETradingSessionID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataEntry_CMETradingSessionID_descriptor(), value);
}
inline bool CMEMarketDataEntry_CMETradingSessionID_Parse(
    const ::std::string& name, CMEMarketDataEntry_CMETradingSessionID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataEntry_CMETradingSessionID>(
    CMEMarketDataEntry_CMETradingSessionID_descriptor(), name, value);
}
enum CMEMarketDataEntry_CMETickDirection {
  CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_PLUS = 48,
  CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_MINUS = 50
};
bool CMEMarketDataEntry_CMETickDirection_IsValid(int value);
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry_CMETickDirection_CMETickDirection_MIN = CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_PLUS;
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry_CMETickDirection_CMETickDirection_MAX = CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_MINUS;
const int CMEMarketDataEntry_CMETickDirection_CMETickDirection_ARRAYSIZE = CMEMarketDataEntry_CMETickDirection_CMETickDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETickDirection_descriptor();
inline const ::std::string& CMEMarketDataEntry_CMETickDirection_Name(CMEMarketDataEntry_CMETickDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataEntry_CMETickDirection_descriptor(), value);
}
inline bool CMEMarketDataEntry_CMETickDirection_Parse(
    const ::std::string& name, CMEMarketDataEntry_CMETickDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataEntry_CMETickDirection>(
    CMEMarketDataEntry_CMETickDirection_descriptor(), name, value);
}
enum CMEMarketDataEntry_CMETradeCondition {
  CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_OPENING_TRADE = 69,
  CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_GLOBEX_PRICE = 49
};
bool CMEMarketDataEntry_CMETradeCondition_IsValid(int value);
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_MIN = CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_GLOBEX_PRICE;
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_MAX = CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_OPENING_TRADE;
const int CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_ARRAYSIZE = CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradeCondition_descriptor();
inline const ::std::string& CMEMarketDataEntry_CMETradeCondition_Name(CMEMarketDataEntry_CMETradeCondition value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataEntry_CMETradeCondition_descriptor(), value);
}
inline bool CMEMarketDataEntry_CMETradeCondition_Parse(
    const ::std::string& name, CMEMarketDataEntry_CMETradeCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataEntry_CMETradeCondition>(
    CMEMarketDataEntry_CMETradeCondition_descriptor(), name, value);
}
enum CMEMarketDataProtobuf_CMEStaticField {
  CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_APPL_VER_ID = 1,
  CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_SENDER_COMP_ID = 2
};
bool CMEMarketDataProtobuf_CMEStaticField_IsValid(int value);
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_MIN = CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_APPL_VER_ID;
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_MAX = CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_SENDER_COMP_ID;
const int CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_ARRAYSIZE = CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEStaticField_descriptor();
inline const ::std::string& CMEMarketDataProtobuf_CMEStaticField_Name(CMEMarketDataProtobuf_CMEStaticField value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataProtobuf_CMEStaticField_descriptor(), value);
}
inline bool CMEMarketDataProtobuf_CMEStaticField_Parse(
    const ::std::string& name, CMEMarketDataProtobuf_CMEStaticField* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataProtobuf_CMEStaticField>(
    CMEMarketDataProtobuf_CMEStaticField_descriptor(), name, value);
}
enum CMEMarketDataProtobuf_CMEMessageType {
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_HEARTBEAT = 48,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_LOGOUT = 53,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_LOGON = 65,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_NEWS = 66,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_SECURITY_DEFINITION = 100,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_SECURITY_STATUS = 102,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_QUOTE_REQUEST = 82,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_REQUEST = 86,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_FULL_REFRESH = 87,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_INCREMENTAL_REFRESH = 88,
  CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_REQUEST_REJECT = 89
};
bool CMEMarketDataProtobuf_CMEMessageType_IsValid(int value);
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_MIN = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_HEARTBEAT;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_MAX = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_SECURITY_STATUS;
const int CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_ARRAYSIZE = CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEMessageType_descriptor();
inline const ::std::string& CMEMarketDataProtobuf_CMEMessageType_Name(CMEMarketDataProtobuf_CMEMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataProtobuf_CMEMessageType_descriptor(), value);
}
inline bool CMEMarketDataProtobuf_CMEMessageType_Parse(
    const ::std::string& name, CMEMarketDataProtobuf_CMEMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataProtobuf_CMEMessageType>(
    CMEMarketDataProtobuf_CMEMessageType_descriptor(), name, value);
}
enum CMEMarketDataProtobuf_CMEPosDupFlag {
  CMEMarketDataProtobuf_CMEPosDupFlag_POSSIBLE_DUPLICATE = 89,
  CMEMarketDataProtobuf_CMEPosDupFlag_ORIGINAL_TRANSMISSION = 78
};
bool CMEMarketDataProtobuf_CMEPosDupFlag_IsValid(int value);
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_MIN = CMEMarketDataProtobuf_CMEPosDupFlag_ORIGINAL_TRANSMISSION;
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_MAX = CMEMarketDataProtobuf_CMEPosDupFlag_POSSIBLE_DUPLICATE;
const int CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_ARRAYSIZE = CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEPosDupFlag_descriptor();
inline const ::std::string& CMEMarketDataProtobuf_CMEPosDupFlag_Name(CMEMarketDataProtobuf_CMEPosDupFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMEMarketDataProtobuf_CMEPosDupFlag_descriptor(), value);
}
inline bool CMEMarketDataProtobuf_CMEPosDupFlag_Parse(
    const ::std::string& name, CMEMarketDataProtobuf_CMEPosDupFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMEMarketDataProtobuf_CMEPosDupFlag>(
    CMEMarketDataProtobuf_CMEPosDupFlag_descriptor(), name, value);
}
// ===================================================================

class CMEMarketDataEntry : public ::google::protobuf::Message {
 public:
  CMEMarketDataEntry();
  virtual ~CMEMarketDataEntry();
  
  CMEMarketDataEntry(const CMEMarketDataEntry& from);
  
  inline CMEMarketDataEntry& operator=(const CMEMarketDataEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMEMarketDataEntry& default_instance();
  
  void Swap(CMEMarketDataEntry* other);
  
  // implements Message ----------------------------------------------
  
  CMEMarketDataEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMEMarketDataEntry& from);
  void MergeFrom(const CMEMarketDataEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMEMarketDataEntry_CMEEntryType CMEEntryType;
  static const CMEEntryType ENTRY_TYPE_BID = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_BID;
  static const CMEEntryType ENTRY_TYPE_ASK = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_ASK;
  static const CMEEntryType ENTRY_TYPE_TRADE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADE;
  static const CMEEntryType ENTRY_TYPE_OPENING_PRICE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_OPENING_PRICE;
  static const CMEEntryType ENTRY_TYPE_SETTLEMENT_PRICE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SETTLEMENT_PRICE;
  static const CMEEntryType ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE;
  static const CMEEntryType ENTRY_TYPE_TRADING_SESSION_LOW_PRICE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADING_SESSION_LOW_PRICE;
  static const CMEEntryType ENTRY_TYPE_TRADE_VOLUME = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_TRADE_VOLUME;
  static const CMEEntryType ENTRY_TYPE_OPEN_INTEREST = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_OPEN_INTEREST;
  static const CMEEntryType ENTRY_TYPE_SIMULATED_SELL = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SIMULATED_SELL;
  static const CMEEntryType ENTRY_TYPE_SIMULATED_BUY = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SIMULATED_BUY;
  static const CMEEntryType ENTRY_TYPE_EMPTY_BOOK = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_EMPTY_BOOK;
  static const CMEEntryType ENTRY_TYPE_PRIOR = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_PRIOR;
  static const CMEEntryType ENTRY_TYPE_SESSION_HIGH_BID = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SESSION_HIGH_BID;
  static const CMEEntryType ENTRY_TYPE_SESSION_LOW_OFFER = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_SESSION_LOW_OFFER;
  static const CMEEntryType ENTRY_TYPE_FIXING_PRICE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_FIXING_PRICE;
  static const CMEEntryType ENTRY_TYPE_CASH_NOTE = CMEMarketDataEntry_CMEEntryType_ENTRY_TYPE_CASH_NOTE;
  static inline bool CMEEntryType_IsValid(int value) {
    return CMEMarketDataEntry_CMEEntryType_IsValid(value);
  }
  static const CMEEntryType CMEEntryType_MIN =
    CMEMarketDataEntry_CMEEntryType_CMEEntryType_MIN;
  static const CMEEntryType CMEEntryType_MAX =
    CMEMarketDataEntry_CMEEntryType_CMEEntryType_MAX;
  static const int CMEEntryType_ARRAYSIZE =
    CMEMarketDataEntry_CMEEntryType_CMEEntryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMEEntryType_descriptor() {
    return CMEMarketDataEntry_CMEEntryType_descriptor();
  }
  static inline const ::std::string& CMEEntryType_Name(CMEEntryType value) {
    return CMEMarketDataEntry_CMEEntryType_Name(value);
  }
  static inline bool CMEEntryType_Parse(const ::std::string& name,
      CMEEntryType* value) {
    return CMEMarketDataEntry_CMEEntryType_Parse(name, value);
  }
  
  typedef CMEMarketDataEntry_CMEQuoteCondition CMEQuoteCondition;
  static const CMEQuoteCondition QUOTE_CONDITION_IMPLIED = CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_IMPLIED;
  static const CMEQuoteCondition QUOTE_CONDITION_LAST_BEST_PRICE = CMEMarketDataEntry_CMEQuoteCondition_QUOTE_CONDITION_LAST_BEST_PRICE;
  static inline bool CMEQuoteCondition_IsValid(int value) {
    return CMEMarketDataEntry_CMEQuoteCondition_IsValid(value);
  }
  static const CMEQuoteCondition CMEQuoteCondition_MIN =
    CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_MIN;
  static const CMEQuoteCondition CMEQuoteCondition_MAX =
    CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_MAX;
  static const int CMEQuoteCondition_ARRAYSIZE =
    CMEMarketDataEntry_CMEQuoteCondition_CMEQuoteCondition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMEQuoteCondition_descriptor() {
    return CMEMarketDataEntry_CMEQuoteCondition_descriptor();
  }
  static inline const ::std::string& CMEQuoteCondition_Name(CMEQuoteCondition value) {
    return CMEMarketDataEntry_CMEQuoteCondition_Name(value);
  }
  static inline bool CMEQuoteCondition_Parse(const ::std::string& name,
      CMEQuoteCondition* value) {
    return CMEMarketDataEntry_CMEQuoteCondition_Parse(name, value);
  }
  
  typedef CMEMarketDataEntry_CMETradingSessionID CMETradingSessionID;
  static const CMETradingSessionID TRADING_SESSION_PRE_OPENING = CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_PRE_OPENING;
  static const CMETradingSessionID TRADING_SESSION_OPENING = CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_OPENING;
  static const CMETradingSessionID TRADING_SESSION_CONTINUOUS = CMEMarketDataEntry_CMETradingSessionID_TRADING_SESSION_CONTINUOUS;
  static inline bool CMETradingSessionID_IsValid(int value) {
    return CMEMarketDataEntry_CMETradingSessionID_IsValid(value);
  }
  static const CMETradingSessionID CMETradingSessionID_MIN =
    CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_MIN;
  static const CMETradingSessionID CMETradingSessionID_MAX =
    CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_MAX;
  static const int CMETradingSessionID_ARRAYSIZE =
    CMEMarketDataEntry_CMETradingSessionID_CMETradingSessionID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMETradingSessionID_descriptor() {
    return CMEMarketDataEntry_CMETradingSessionID_descriptor();
  }
  static inline const ::std::string& CMETradingSessionID_Name(CMETradingSessionID value) {
    return CMEMarketDataEntry_CMETradingSessionID_Name(value);
  }
  static inline bool CMETradingSessionID_Parse(const ::std::string& name,
      CMETradingSessionID* value) {
    return CMEMarketDataEntry_CMETradingSessionID_Parse(name, value);
  }
  
  typedef CMEMarketDataEntry_CMETickDirection CMETickDirection;
  static const CMETickDirection TICK_DIRECTION_PLUS = CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_PLUS;
  static const CMETickDirection TICK_DIRECTION_MINUS = CMEMarketDataEntry_CMETickDirection_TICK_DIRECTION_MINUS;
  static inline bool CMETickDirection_IsValid(int value) {
    return CMEMarketDataEntry_CMETickDirection_IsValid(value);
  }
  static const CMETickDirection CMETickDirection_MIN =
    CMEMarketDataEntry_CMETickDirection_CMETickDirection_MIN;
  static const CMETickDirection CMETickDirection_MAX =
    CMEMarketDataEntry_CMETickDirection_CMETickDirection_MAX;
  static const int CMETickDirection_ARRAYSIZE =
    CMEMarketDataEntry_CMETickDirection_CMETickDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMETickDirection_descriptor() {
    return CMEMarketDataEntry_CMETickDirection_descriptor();
  }
  static inline const ::std::string& CMETickDirection_Name(CMETickDirection value) {
    return CMEMarketDataEntry_CMETickDirection_Name(value);
  }
  static inline bool CMETickDirection_Parse(const ::std::string& name,
      CMETickDirection* value) {
    return CMEMarketDataEntry_CMETickDirection_Parse(name, value);
  }
  
  typedef CMEMarketDataEntry_CMETradeCondition CMETradeCondition;
  static const CMETradeCondition TRADE_CONDITION_OPENING_TRADE = CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_OPENING_TRADE;
  static const CMETradeCondition TRADE_CONDITION_GLOBEX_PRICE = CMEMarketDataEntry_CMETradeCondition_TRADE_CONDITION_GLOBEX_PRICE;
  static inline bool CMETradeCondition_IsValid(int value) {
    return CMEMarketDataEntry_CMETradeCondition_IsValid(value);
  }
  static const CMETradeCondition CMETradeCondition_MIN =
    CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_MIN;
  static const CMETradeCondition CMETradeCondition_MAX =
    CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_MAX;
  static const int CMETradeCondition_ARRAYSIZE =
    CMEMarketDataEntry_CMETradeCondition_CMETradeCondition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMETradeCondition_descriptor() {
    return CMEMarketDataEntry_CMETradeCondition_descriptor();
  }
  static inline const ::std::string& CMETradeCondition_Name(CMETradeCondition value) {
    return CMEMarketDataEntry_CMETradeCondition_Name(value);
  }
  static inline bool CMETradeCondition_Parse(const ::std::string& name,
      CMETradeCondition* value) {
    return CMEMarketDataEntry_CMETradeCondition_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 MDUpdateAction = 1;
  inline bool has_mdupdateaction() const;
  inline void clear_mdupdateaction();
  static const int kMDUpdateActionFieldNumber = 1;
  inline ::google::protobuf::uint32 mdupdateaction() const;
  inline void set_mdupdateaction(::google::protobuf::uint32 value);
  
  // optional uint32 MDPriceLevel = 2;
  inline bool has_mdpricelevel() const;
  inline void clear_mdpricelevel();
  static const int kMDPriceLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 mdpricelevel() const;
  inline void set_mdpricelevel(::google::protobuf::uint32 value);
  
  // required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
  inline bool has_mdentrytype() const;
  inline void clear_mdentrytype();
  static const int kMDEntryTypeFieldNumber = 3;
  inline ::fast_engine::CMEMarketDataEntry_CMEEntryType mdentrytype() const;
  inline void set_mdentrytype(::fast_engine::CMEMarketDataEntry_CMEEntryType value);
  
  // required uint32 SecurityIDSource = 4;
  inline bool has_securityidsource() const;
  inline void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 4;
  inline ::google::protobuf::uint32 securityidsource() const;
  inline void set_securityidsource(::google::protobuf::uint32 value);
  
  // required uint32 SecurityID = 5;
  inline bool has_securityid() const;
  inline void clear_securityid();
  static const int kSecurityIDFieldNumber = 5;
  inline ::google::protobuf::uint32 securityid() const;
  inline void set_securityid(::google::protobuf::uint32 value);
  
  // required uint32 RptSeq = 6;
  inline bool has_rptseq() const;
  inline void clear_rptseq();
  static const int kRptSeqFieldNumber = 6;
  inline ::google::protobuf::uint32 rptseq() const;
  inline void set_rptseq(::google::protobuf::uint32 value);
  
  // optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
  inline bool has_quotecondition() const;
  inline void clear_quotecondition();
  static const int kQuoteConditionFieldNumber = 7;
  inline ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition quotecondition() const;
  inline void set_quotecondition(::fast_engine::CMEMarketDataEntry_CMEQuoteCondition value);
  
  // required int32 MDEntryPxExponent = 8;
  inline bool has_mdentrypxexponent() const;
  inline void clear_mdentrypxexponent();
  static const int kMDEntryPxExponentFieldNumber = 8;
  inline ::google::protobuf::int32 mdentrypxexponent() const;
  inline void set_mdentrypxexponent(::google::protobuf::int32 value);
  
  // required int64 MDEntryPxMantissa = 9;
  inline bool has_mdentrypxmantissa() const;
  inline void clear_mdentrypxmantissa();
  static const int kMDEntryPxMantissaFieldNumber = 9;
  inline ::google::protobuf::int64 mdentrypxmantissa() const;
  inline void set_mdentrypxmantissa(::google::protobuf::int64 value);
  
  // optional uint32 NumberOfOrders = 10;
  inline bool has_numberoforders() const;
  inline void clear_numberoforders();
  static const int kNumberOfOrdersFieldNumber = 10;
  inline ::google::protobuf::uint32 numberoforders() const;
  inline void set_numberoforders(::google::protobuf::uint32 value);
  
  // required uint32 MDEntryTime = 11;
  inline bool has_mdentrytime() const;
  inline void clear_mdentrytime();
  static const int kMDEntryTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 mdentrytime() const;
  inline void set_mdentrytime(::google::protobuf::uint32 value);
  
  // optional int32 MDEntrySize = 12;
  inline bool has_mdentrysize() const;
  inline void clear_mdentrysize();
  static const int kMDEntrySizeFieldNumber = 12;
  inline ::google::protobuf::int32 mdentrysize() const;
  inline void set_mdentrysize(::google::protobuf::int32 value);
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
  inline bool has_tradingsessionid() const;
  inline void clear_tradingsessionid();
  static const int kTradingSessionIDFieldNumber = 13;
  inline ::fast_engine::CMEMarketDataEntry_CMETradingSessionID tradingsessionid() const;
  inline void set_tradingsessionid(::fast_engine::CMEMarketDataEntry_CMETradingSessionID value);
  
  // optional int32 NetChgPrevDayExponent = 14;
  inline bool has_netchgprevdayexponent() const;
  inline void clear_netchgprevdayexponent();
  static const int kNetChgPrevDayExponentFieldNumber = 14;
  inline ::google::protobuf::int32 netchgprevdayexponent() const;
  inline void set_netchgprevdayexponent(::google::protobuf::int32 value);
  
  // optional int64 NetChgPrevDayMantissa = 15;
  inline bool has_netchgprevdaymantissa() const;
  inline void clear_netchgprevdaymantissa();
  static const int kNetChgPrevDayMantissaFieldNumber = 15;
  inline ::google::protobuf::int64 netchgprevdaymantissa() const;
  inline void set_netchgprevdaymantissa(::google::protobuf::int64 value);
  
  // optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
  inline bool has_tickdirection() const;
  inline void clear_tickdirection();
  static const int kTickDirectionFieldNumber = 16;
  inline ::fast_engine::CMEMarketDataEntry_CMETickDirection tickdirection() const;
  inline void set_tickdirection(::fast_engine::CMEMarketDataEntry_CMETickDirection value);
  
  // optional uint32 OpenCloseSettleFlag = 17;
  inline bool has_openclosesettleflag() const;
  inline void clear_openclosesettleflag();
  static const int kOpenCloseSettleFlagFieldNumber = 17;
  inline ::google::protobuf::uint32 openclosesettleflag() const;
  inline void set_openclosesettleflag(::google::protobuf::uint32 value);
  
  // optional uint32 SettlDate = 18;
  inline bool has_settldate() const;
  inline void clear_settldate();
  static const int kSettlDateFieldNumber = 18;
  inline ::google::protobuf::uint32 settldate() const;
  inline void set_settldate(::google::protobuf::uint32 value);
  
  // optional uint32 TradeVolume = 19;
  inline bool has_tradevolume() const;
  inline void clear_tradevolume();
  static const int kTradeVolumeFieldNumber = 19;
  inline ::google::protobuf::uint32 tradevolume() const;
  inline void set_tradevolume(::google::protobuf::uint32 value);
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
  inline bool has_tradecondition() const;
  inline void clear_tradecondition();
  static const int kTradeConditionFieldNumber = 20;
  inline ::fast_engine::CMEMarketDataEntry_CMETradeCondition tradecondition() const;
  inline void set_tradecondition(::fast_engine::CMEMarketDataEntry_CMETradeCondition value);
  
  // optional uint32 AggressorSide = 21;
  inline bool has_aggressorside() const;
  inline void clear_aggressorside();
  static const int kAggressorSideFieldNumber = 21;
  inline ::google::protobuf::uint32 aggressorside() const;
  inline void set_aggressorside(::google::protobuf::uint32 value);
  
  // optional uint32 MDQuoteType = 22;
  inline bool has_mdquotetype() const;
  inline void clear_mdquotetype();
  static const int kMDQuoteTypeFieldNumber = 22;
  inline ::google::protobuf::uint32 mdquotetype() const;
  inline void set_mdquotetype(::google::protobuf::uint32 value);
  
  // optional uint32 TradeID = 23;
  inline bool has_tradeid() const;
  inline void clear_tradeid();
  static const int kTradeIDFieldNumber = 23;
  inline ::google::protobuf::uint32 tradeid() const;
  inline void set_tradeid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:fast_engine.CMEMarketDataEntry)
 private:
  inline void set_has_mdupdateaction();
  inline void clear_has_mdupdateaction();
  inline void set_has_mdpricelevel();
  inline void clear_has_mdpricelevel();
  inline void set_has_mdentrytype();
  inline void clear_has_mdentrytype();
  inline void set_has_securityidsource();
  inline void clear_has_securityidsource();
  inline void set_has_securityid();
  inline void clear_has_securityid();
  inline void set_has_rptseq();
  inline void clear_has_rptseq();
  inline void set_has_quotecondition();
  inline void clear_has_quotecondition();
  inline void set_has_mdentrypxexponent();
  inline void clear_has_mdentrypxexponent();
  inline void set_has_mdentrypxmantissa();
  inline void clear_has_mdentrypxmantissa();
  inline void set_has_numberoforders();
  inline void clear_has_numberoforders();
  inline void set_has_mdentrytime();
  inline void clear_has_mdentrytime();
  inline void set_has_mdentrysize();
  inline void clear_has_mdentrysize();
  inline void set_has_tradingsessionid();
  inline void clear_has_tradingsessionid();
  inline void set_has_netchgprevdayexponent();
  inline void clear_has_netchgprevdayexponent();
  inline void set_has_netchgprevdaymantissa();
  inline void clear_has_netchgprevdaymantissa();
  inline void set_has_tickdirection();
  inline void clear_has_tickdirection();
  inline void set_has_openclosesettleflag();
  inline void clear_has_openclosesettleflag();
  inline void set_has_settldate();
  inline void clear_has_settldate();
  inline void set_has_tradevolume();
  inline void clear_has_tradevolume();
  inline void set_has_tradecondition();
  inline void clear_has_tradecondition();
  inline void set_has_aggressorside();
  inline void clear_has_aggressorside();
  inline void set_has_mdquotetype();
  inline void clear_has_mdquotetype();
  inline void set_has_tradeid();
  inline void clear_has_tradeid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mdupdateaction_;
  ::google::protobuf::uint32 mdpricelevel_;
  int mdentrytype_;
  ::google::protobuf::uint32 securityidsource_;
  ::google::protobuf::uint32 securityid_;
  ::google::protobuf::uint32 rptseq_;
  int quotecondition_;
  ::google::protobuf::int32 mdentrypxexponent_;
  ::google::protobuf::int64 mdentrypxmantissa_;
  ::google::protobuf::uint32 numberoforders_;
  ::google::protobuf::uint32 mdentrytime_;
  ::google::protobuf::int32 mdentrysize_;
  int tradingsessionid_;
  ::google::protobuf::int64 netchgprevdaymantissa_;
  ::google::protobuf::int32 netchgprevdayexponent_;
  int tickdirection_;
  ::google::protobuf::uint32 openclosesettleflag_;
  ::google::protobuf::uint32 settldate_;
  ::google::protobuf::uint32 tradevolume_;
  int tradecondition_;
  ::google::protobuf::uint32 aggressorside_;
  ::google::protobuf::uint32 mdquotetype_;
  ::google::protobuf::uint32 tradeid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();
  friend void protobuf_AssignDesc_CMEMarketDataProtobuf_2eproto();
  friend void protobuf_ShutdownFile_CMEMarketDataProtobuf_2eproto();
  
  void InitAsDefaultInstance();
  static CMEMarketDataEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMEMarketDataProtobuf : public ::google::protobuf::Message {
 public:
  CMEMarketDataProtobuf();
  virtual ~CMEMarketDataProtobuf();
  
  CMEMarketDataProtobuf(const CMEMarketDataProtobuf& from);
  
  inline CMEMarketDataProtobuf& operator=(const CMEMarketDataProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMEMarketDataProtobuf& default_instance();
  
  void Swap(CMEMarketDataProtobuf* other);
  
  // implements Message ----------------------------------------------
  
  CMEMarketDataProtobuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMEMarketDataProtobuf& from);
  void MergeFrom(const CMEMarketDataProtobuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMEMarketDataProtobuf_CMEStaticField CMEStaticField;
  static const CMEStaticField STATIC_FIELD_APPL_VER_ID = CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_APPL_VER_ID;
  static const CMEStaticField STATIC_FIELD_SENDER_COMP_ID = CMEMarketDataProtobuf_CMEStaticField_STATIC_FIELD_SENDER_COMP_ID;
  static inline bool CMEStaticField_IsValid(int value) {
    return CMEMarketDataProtobuf_CMEStaticField_IsValid(value);
  }
  static const CMEStaticField CMEStaticField_MIN =
    CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_MIN;
  static const CMEStaticField CMEStaticField_MAX =
    CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_MAX;
  static const int CMEStaticField_ARRAYSIZE =
    CMEMarketDataProtobuf_CMEStaticField_CMEStaticField_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMEStaticField_descriptor() {
    return CMEMarketDataProtobuf_CMEStaticField_descriptor();
  }
  static inline const ::std::string& CMEStaticField_Name(CMEStaticField value) {
    return CMEMarketDataProtobuf_CMEStaticField_Name(value);
  }
  static inline bool CMEStaticField_Parse(const ::std::string& name,
      CMEStaticField* value) {
    return CMEMarketDataProtobuf_CMEStaticField_Parse(name, value);
  }
  
  typedef CMEMarketDataProtobuf_CMEMessageType CMEMessageType;
  static const CMEMessageType MESSAGE_TYPE_HEARTBEAT = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_HEARTBEAT;
  static const CMEMessageType MESSAGE_TYPE_LOGOUT = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_LOGOUT;
  static const CMEMessageType MESSAGE_TYPE_LOGON = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_LOGON;
  static const CMEMessageType MESSAGE_TYPE_NEWS = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_NEWS;
  static const CMEMessageType MESSAGE_TYPE_SECURITY_DEFINITION = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_SECURITY_DEFINITION;
  static const CMEMessageType MESSAGE_TYPE_SECURITY_STATUS = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_SECURITY_STATUS;
  static const CMEMessageType MESSAGE_TYPE_QUOTE_REQUEST = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_QUOTE_REQUEST;
  static const CMEMessageType MESSAGE_TYPE_MARKET_DATA_REQUEST = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_REQUEST;
  static const CMEMessageType MESSAGE_TYPE_MARKET_DATA_FULL_REFRESH = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_FULL_REFRESH;
  static const CMEMessageType MESSAGE_TYPE_MARKET_DATA_INCREMENTAL_REFRESH = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_INCREMENTAL_REFRESH;
  static const CMEMessageType MESSAGE_TYPE_MARKET_DATA_REQUEST_REJECT = CMEMarketDataProtobuf_CMEMessageType_MESSAGE_TYPE_MARKET_DATA_REQUEST_REJECT;
  static inline bool CMEMessageType_IsValid(int value) {
    return CMEMarketDataProtobuf_CMEMessageType_IsValid(value);
  }
  static const CMEMessageType CMEMessageType_MIN =
    CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_MIN;
  static const CMEMessageType CMEMessageType_MAX =
    CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_MAX;
  static const int CMEMessageType_ARRAYSIZE =
    CMEMarketDataProtobuf_CMEMessageType_CMEMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMEMessageType_descriptor() {
    return CMEMarketDataProtobuf_CMEMessageType_descriptor();
  }
  static inline const ::std::string& CMEMessageType_Name(CMEMessageType value) {
    return CMEMarketDataProtobuf_CMEMessageType_Name(value);
  }
  static inline bool CMEMessageType_Parse(const ::std::string& name,
      CMEMessageType* value) {
    return CMEMarketDataProtobuf_CMEMessageType_Parse(name, value);
  }
  
  typedef CMEMarketDataProtobuf_CMEPosDupFlag CMEPosDupFlag;
  static const CMEPosDupFlag POSSIBLE_DUPLICATE = CMEMarketDataProtobuf_CMEPosDupFlag_POSSIBLE_DUPLICATE;
  static const CMEPosDupFlag ORIGINAL_TRANSMISSION = CMEMarketDataProtobuf_CMEPosDupFlag_ORIGINAL_TRANSMISSION;
  static inline bool CMEPosDupFlag_IsValid(int value) {
    return CMEMarketDataProtobuf_CMEPosDupFlag_IsValid(value);
  }
  static const CMEPosDupFlag CMEPosDupFlag_MIN =
    CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_MIN;
  static const CMEPosDupFlag CMEPosDupFlag_MAX =
    CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_MAX;
  static const int CMEPosDupFlag_ARRAYSIZE =
    CMEMarketDataProtobuf_CMEPosDupFlag_CMEPosDupFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMEPosDupFlag_descriptor() {
    return CMEMarketDataProtobuf_CMEPosDupFlag_descriptor();
  }
  static inline const ::std::string& CMEPosDupFlag_Name(CMEPosDupFlag value) {
    return CMEMarketDataProtobuf_CMEPosDupFlag_Name(value);
  }
  static inline bool CMEPosDupFlag_Parse(const ::std::string& name,
      CMEPosDupFlag* value) {
    return CMEMarketDataProtobuf_CMEPosDupFlag_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  inline ::fast_engine::CMEMarketDataProtobuf_CMEMessageType messagetype() const;
  inline void set_messagetype(::fast_engine::CMEMarketDataProtobuf_CMEMessageType value);
  
  // required uint32 MsgSeqNum = 2;
  inline bool has_msgseqnum() const;
  inline void clear_msgseqnum();
  static const int kMsgSeqNumFieldNumber = 2;
  inline ::google::protobuf::uint32 msgseqnum() const;
  inline void set_msgseqnum(::google::protobuf::uint32 value);
  
  // required uint64 SendingTime = 3;
  inline bool has_sendingtime() const;
  inline void clear_sendingtime();
  static const int kSendingTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 sendingtime() const;
  inline void set_sendingtime(::google::protobuf::uint64 value);
  
  // optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
  inline bool has_posdupflag() const;
  inline void clear_posdupflag();
  static const int kPosDupFlagFieldNumber = 4;
  inline ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag posdupflag() const;
  inline void set_posdupflag(::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag value);
  
  // required uint32 TradeDate = 5;
  inline bool has_tradedate() const;
  inline void clear_tradedate();
  static const int kTradeDateFieldNumber = 5;
  inline ::google::protobuf::uint32 tradedate() const;
  inline void set_tradedate(::google::protobuf::uint32 value);
  
  // repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
  inline int mdentries_size() const;
  inline void clear_mdentries();
  static const int kMDEntriesFieldNumber = 6;
  inline const ::fast_engine::CMEMarketDataEntry& mdentries(int index) const;
  inline ::fast_engine::CMEMarketDataEntry* mutable_mdentries(int index);
  inline ::fast_engine::CMEMarketDataEntry* add_mdentries();
  inline const ::google::protobuf::RepeatedPtrField< ::fast_engine::CMEMarketDataEntry >&
      mdentries() const;
  inline ::google::protobuf::RepeatedPtrField< ::fast_engine::CMEMarketDataEntry >*
      mutable_mdentries();
  
  // @@protoc_insertion_point(class_scope:fast_engine.CMEMarketDataProtobuf)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_msgseqnum();
  inline void clear_has_msgseqnum();
  inline void set_has_sendingtime();
  inline void clear_has_sendingtime();
  inline void set_has_posdupflag();
  inline void clear_has_posdupflag();
  inline void set_has_tradedate();
  inline void clear_has_tradedate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int messagetype_;
  ::google::protobuf::uint32 msgseqnum_;
  ::google::protobuf::uint64 sendingtime_;
  int posdupflag_;
  ::google::protobuf::uint32 tradedate_;
  ::google::protobuf::RepeatedPtrField< ::fast_engine::CMEMarketDataEntry > mdentries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();
  friend void protobuf_AssignDesc_CMEMarketDataProtobuf_2eproto();
  friend void protobuf_ShutdownFile_CMEMarketDataProtobuf_2eproto();
  
  void InitAsDefaultInstance();
  static CMEMarketDataProtobuf* default_instance_;
};
// ===================================================================


// ===================================================================

// CMEMarketDataEntry

// required uint32 MDUpdateAction = 1;
inline bool CMEMarketDataEntry::has_mdupdateaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdupdateaction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMEMarketDataEntry::clear_has_mdupdateaction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMEMarketDataEntry::clear_mdupdateaction() {
  mdupdateaction_ = 0u;
  clear_has_mdupdateaction();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::mdupdateaction() const {
  return mdupdateaction_;
}
inline void CMEMarketDataEntry::set_mdupdateaction(::google::protobuf::uint32 value) {
  set_has_mdupdateaction();
  mdupdateaction_ = value;
}

// optional uint32 MDPriceLevel = 2;
inline bool CMEMarketDataEntry::has_mdpricelevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdpricelevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMEMarketDataEntry::clear_has_mdpricelevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMEMarketDataEntry::clear_mdpricelevel() {
  mdpricelevel_ = 0u;
  clear_has_mdpricelevel();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::mdpricelevel() const {
  return mdpricelevel_;
}
inline void CMEMarketDataEntry::set_mdpricelevel(::google::protobuf::uint32 value) {
  set_has_mdpricelevel();
  mdpricelevel_ = value;
}

// required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
inline bool CMEMarketDataEntry::has_mdentrytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdentrytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMEMarketDataEntry::clear_has_mdentrytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMEMarketDataEntry::clear_mdentrytype() {
  mdentrytype_ = 48;
  clear_has_mdentrytype();
}
inline ::fast_engine::CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::mdentrytype() const {
  return static_cast< ::fast_engine::CMEMarketDataEntry_CMEEntryType >(mdentrytype_);
}
inline void CMEMarketDataEntry::set_mdentrytype(::fast_engine::CMEMarketDataEntry_CMEEntryType value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataEntry_CMEEntryType_IsValid(value));
  set_has_mdentrytype();
  mdentrytype_ = value;
}

// required uint32 SecurityIDSource = 4;
inline bool CMEMarketDataEntry::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMEMarketDataEntry::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMEMarketDataEntry::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMEMarketDataEntry::clear_securityidsource() {
  securityidsource_ = 0u;
  clear_has_securityidsource();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::securityidsource() const {
  return securityidsource_;
}
inline void CMEMarketDataEntry::set_securityidsource(::google::protobuf::uint32 value) {
  set_has_securityidsource();
  securityidsource_ = value;
}

// required uint32 SecurityID = 5;
inline bool CMEMarketDataEntry::has_securityid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMEMarketDataEntry::set_has_securityid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMEMarketDataEntry::clear_has_securityid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMEMarketDataEntry::clear_securityid() {
  securityid_ = 0u;
  clear_has_securityid();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::securityid() const {
  return securityid_;
}
inline void CMEMarketDataEntry::set_securityid(::google::protobuf::uint32 value) {
  set_has_securityid();
  securityid_ = value;
}

// required uint32 RptSeq = 6;
inline bool CMEMarketDataEntry::has_rptseq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMEMarketDataEntry::set_has_rptseq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMEMarketDataEntry::clear_has_rptseq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMEMarketDataEntry::clear_rptseq() {
  rptseq_ = 0u;
  clear_has_rptseq();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::rptseq() const {
  return rptseq_;
}
inline void CMEMarketDataEntry::set_rptseq(::google::protobuf::uint32 value) {
  set_has_rptseq();
  rptseq_ = value;
}

// optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
inline bool CMEMarketDataEntry::has_quotecondition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMEMarketDataEntry::set_has_quotecondition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMEMarketDataEntry::clear_has_quotecondition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMEMarketDataEntry::clear_quotecondition() {
  quotecondition_ = 75;
  clear_has_quotecondition();
}
inline ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry::quotecondition() const {
  return static_cast< ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition >(quotecondition_);
}
inline void CMEMarketDataEntry::set_quotecondition(::fast_engine::CMEMarketDataEntry_CMEQuoteCondition value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataEntry_CMEQuoteCondition_IsValid(value));
  set_has_quotecondition();
  quotecondition_ = value;
}

// required int32 MDEntryPxExponent = 8;
inline bool CMEMarketDataEntry::has_mdentrypxexponent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdentrypxexponent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMEMarketDataEntry::clear_has_mdentrypxexponent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMEMarketDataEntry::clear_mdentrypxexponent() {
  mdentrypxexponent_ = 0;
  clear_has_mdentrypxexponent();
}
inline ::google::protobuf::int32 CMEMarketDataEntry::mdentrypxexponent() const {
  return mdentrypxexponent_;
}
inline void CMEMarketDataEntry::set_mdentrypxexponent(::google::protobuf::int32 value) {
  set_has_mdentrypxexponent();
  mdentrypxexponent_ = value;
}

// required int64 MDEntryPxMantissa = 9;
inline bool CMEMarketDataEntry::has_mdentrypxmantissa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdentrypxmantissa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMEMarketDataEntry::clear_has_mdentrypxmantissa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMEMarketDataEntry::clear_mdentrypxmantissa() {
  mdentrypxmantissa_ = GOOGLE_LONGLONG(0);
  clear_has_mdentrypxmantissa();
}
inline ::google::protobuf::int64 CMEMarketDataEntry::mdentrypxmantissa() const {
  return mdentrypxmantissa_;
}
inline void CMEMarketDataEntry::set_mdentrypxmantissa(::google::protobuf::int64 value) {
  set_has_mdentrypxmantissa();
  mdentrypxmantissa_ = value;
}

// optional uint32 NumberOfOrders = 10;
inline bool CMEMarketDataEntry::has_numberoforders() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMEMarketDataEntry::set_has_numberoforders() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMEMarketDataEntry::clear_has_numberoforders() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMEMarketDataEntry::clear_numberoforders() {
  numberoforders_ = 0u;
  clear_has_numberoforders();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::numberoforders() const {
  return numberoforders_;
}
inline void CMEMarketDataEntry::set_numberoforders(::google::protobuf::uint32 value) {
  set_has_numberoforders();
  numberoforders_ = value;
}

// required uint32 MDEntryTime = 11;
inline bool CMEMarketDataEntry::has_mdentrytime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdentrytime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMEMarketDataEntry::clear_has_mdentrytime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMEMarketDataEntry::clear_mdentrytime() {
  mdentrytime_ = 0u;
  clear_has_mdentrytime();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::mdentrytime() const {
  return mdentrytime_;
}
inline void CMEMarketDataEntry::set_mdentrytime(::google::protobuf::uint32 value) {
  set_has_mdentrytime();
  mdentrytime_ = value;
}

// optional int32 MDEntrySize = 12;
inline bool CMEMarketDataEntry::has_mdentrysize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdentrysize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMEMarketDataEntry::clear_has_mdentrysize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMEMarketDataEntry::clear_mdentrysize() {
  mdentrysize_ = 0;
  clear_has_mdentrysize();
}
inline ::google::protobuf::int32 CMEMarketDataEntry::mdentrysize() const {
  return mdentrysize_;
}
inline void CMEMarketDataEntry::set_mdentrysize(::google::protobuf::int32 value) {
  set_has_mdentrysize();
  mdentrysize_ = value;
}

// optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
inline bool CMEMarketDataEntry::has_tradingsessionid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMEMarketDataEntry::set_has_tradingsessionid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMEMarketDataEntry::clear_has_tradingsessionid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMEMarketDataEntry::clear_tradingsessionid() {
  tradingsessionid_ = 48;
  clear_has_tradingsessionid();
}
inline ::fast_engine::CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::tradingsessionid() const {
  return static_cast< ::fast_engine::CMEMarketDataEntry_CMETradingSessionID >(tradingsessionid_);
}
inline void CMEMarketDataEntry::set_tradingsessionid(::fast_engine::CMEMarketDataEntry_CMETradingSessionID value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataEntry_CMETradingSessionID_IsValid(value));
  set_has_tradingsessionid();
  tradingsessionid_ = value;
}

// optional int32 NetChgPrevDayExponent = 14;
inline bool CMEMarketDataEntry::has_netchgprevdayexponent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMEMarketDataEntry::set_has_netchgprevdayexponent() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMEMarketDataEntry::clear_has_netchgprevdayexponent() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMEMarketDataEntry::clear_netchgprevdayexponent() {
  netchgprevdayexponent_ = 0;
  clear_has_netchgprevdayexponent();
}
inline ::google::protobuf::int32 CMEMarketDataEntry::netchgprevdayexponent() const {
  return netchgprevdayexponent_;
}
inline void CMEMarketDataEntry::set_netchgprevdayexponent(::google::protobuf::int32 value) {
  set_has_netchgprevdayexponent();
  netchgprevdayexponent_ = value;
}

// optional int64 NetChgPrevDayMantissa = 15;
inline bool CMEMarketDataEntry::has_netchgprevdaymantissa() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMEMarketDataEntry::set_has_netchgprevdaymantissa() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMEMarketDataEntry::clear_has_netchgprevdaymantissa() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMEMarketDataEntry::clear_netchgprevdaymantissa() {
  netchgprevdaymantissa_ = GOOGLE_LONGLONG(0);
  clear_has_netchgprevdaymantissa();
}
inline ::google::protobuf::int64 CMEMarketDataEntry::netchgprevdaymantissa() const {
  return netchgprevdaymantissa_;
}
inline void CMEMarketDataEntry::set_netchgprevdaymantissa(::google::protobuf::int64 value) {
  set_has_netchgprevdaymantissa();
  netchgprevdaymantissa_ = value;
}

// optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
inline bool CMEMarketDataEntry::has_tickdirection() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMEMarketDataEntry::set_has_tickdirection() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMEMarketDataEntry::clear_has_tickdirection() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMEMarketDataEntry::clear_tickdirection() {
  tickdirection_ = 48;
  clear_has_tickdirection();
}
inline ::fast_engine::CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry::tickdirection() const {
  return static_cast< ::fast_engine::CMEMarketDataEntry_CMETickDirection >(tickdirection_);
}
inline void CMEMarketDataEntry::set_tickdirection(::fast_engine::CMEMarketDataEntry_CMETickDirection value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataEntry_CMETickDirection_IsValid(value));
  set_has_tickdirection();
  tickdirection_ = value;
}

// optional uint32 OpenCloseSettleFlag = 17;
inline bool CMEMarketDataEntry::has_openclosesettleflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMEMarketDataEntry::set_has_openclosesettleflag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMEMarketDataEntry::clear_has_openclosesettleflag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMEMarketDataEntry::clear_openclosesettleflag() {
  openclosesettleflag_ = 0u;
  clear_has_openclosesettleflag();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::openclosesettleflag() const {
  return openclosesettleflag_;
}
inline void CMEMarketDataEntry::set_openclosesettleflag(::google::protobuf::uint32 value) {
  set_has_openclosesettleflag();
  openclosesettleflag_ = value;
}

// optional uint32 SettlDate = 18;
inline bool CMEMarketDataEntry::has_settldate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMEMarketDataEntry::set_has_settldate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMEMarketDataEntry::clear_has_settldate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMEMarketDataEntry::clear_settldate() {
  settldate_ = 0u;
  clear_has_settldate();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::settldate() const {
  return settldate_;
}
inline void CMEMarketDataEntry::set_settldate(::google::protobuf::uint32 value) {
  set_has_settldate();
  settldate_ = value;
}

// optional uint32 TradeVolume = 19;
inline bool CMEMarketDataEntry::has_tradevolume() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMEMarketDataEntry::set_has_tradevolume() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMEMarketDataEntry::clear_has_tradevolume() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMEMarketDataEntry::clear_tradevolume() {
  tradevolume_ = 0u;
  clear_has_tradevolume();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::tradevolume() const {
  return tradevolume_;
}
inline void CMEMarketDataEntry::set_tradevolume(::google::protobuf::uint32 value) {
  set_has_tradevolume();
  tradevolume_ = value;
}

// optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
inline bool CMEMarketDataEntry::has_tradecondition() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMEMarketDataEntry::set_has_tradecondition() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMEMarketDataEntry::clear_has_tradecondition() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMEMarketDataEntry::clear_tradecondition() {
  tradecondition_ = 69;
  clear_has_tradecondition();
}
inline ::fast_engine::CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry::tradecondition() const {
  return static_cast< ::fast_engine::CMEMarketDataEntry_CMETradeCondition >(tradecondition_);
}
inline void CMEMarketDataEntry::set_tradecondition(::fast_engine::CMEMarketDataEntry_CMETradeCondition value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataEntry_CMETradeCondition_IsValid(value));
  set_has_tradecondition();
  tradecondition_ = value;
}

// optional uint32 AggressorSide = 21;
inline bool CMEMarketDataEntry::has_aggressorside() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMEMarketDataEntry::set_has_aggressorside() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMEMarketDataEntry::clear_has_aggressorside() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMEMarketDataEntry::clear_aggressorside() {
  aggressorside_ = 0u;
  clear_has_aggressorside();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::aggressorside() const {
  return aggressorside_;
}
inline void CMEMarketDataEntry::set_aggressorside(::google::protobuf::uint32 value) {
  set_has_aggressorside();
  aggressorside_ = value;
}

// optional uint32 MDQuoteType = 22;
inline bool CMEMarketDataEntry::has_mdquotetype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMEMarketDataEntry::set_has_mdquotetype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMEMarketDataEntry::clear_has_mdquotetype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMEMarketDataEntry::clear_mdquotetype() {
  mdquotetype_ = 0u;
  clear_has_mdquotetype();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::mdquotetype() const {
  return mdquotetype_;
}
inline void CMEMarketDataEntry::set_mdquotetype(::google::protobuf::uint32 value) {
  set_has_mdquotetype();
  mdquotetype_ = value;
}

// optional uint32 TradeID = 23;
inline bool CMEMarketDataEntry::has_tradeid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMEMarketDataEntry::set_has_tradeid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMEMarketDataEntry::clear_has_tradeid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMEMarketDataEntry::clear_tradeid() {
  tradeid_ = 0u;
  clear_has_tradeid();
}
inline ::google::protobuf::uint32 CMEMarketDataEntry::tradeid() const {
  return tradeid_;
}
inline void CMEMarketDataEntry::set_tradeid(::google::protobuf::uint32 value) {
  set_has_tradeid();
  tradeid_ = value;
}

// -------------------------------------------------------------------

// CMEMarketDataProtobuf

// required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
inline bool CMEMarketDataProtobuf::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMEMarketDataProtobuf::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMEMarketDataProtobuf::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMEMarketDataProtobuf::clear_messagetype() {
  messagetype_ = 48;
  clear_has_messagetype();
}
inline ::fast_engine::CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::messagetype() const {
  return static_cast< ::fast_engine::CMEMarketDataProtobuf_CMEMessageType >(messagetype_);
}
inline void CMEMarketDataProtobuf::set_messagetype(::fast_engine::CMEMarketDataProtobuf_CMEMessageType value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataProtobuf_CMEMessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
}

// required uint32 MsgSeqNum = 2;
inline bool CMEMarketDataProtobuf::has_msgseqnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMEMarketDataProtobuf::set_has_msgseqnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMEMarketDataProtobuf::clear_has_msgseqnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMEMarketDataProtobuf::clear_msgseqnum() {
  msgseqnum_ = 0u;
  clear_has_msgseqnum();
}
inline ::google::protobuf::uint32 CMEMarketDataProtobuf::msgseqnum() const {
  return msgseqnum_;
}
inline void CMEMarketDataProtobuf::set_msgseqnum(::google::protobuf::uint32 value) {
  set_has_msgseqnum();
  msgseqnum_ = value;
}

// required uint64 SendingTime = 3;
inline bool CMEMarketDataProtobuf::has_sendingtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMEMarketDataProtobuf::set_has_sendingtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMEMarketDataProtobuf::clear_has_sendingtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMEMarketDataProtobuf::clear_sendingtime() {
  sendingtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendingtime();
}
inline ::google::protobuf::uint64 CMEMarketDataProtobuf::sendingtime() const {
  return sendingtime_;
}
inline void CMEMarketDataProtobuf::set_sendingtime(::google::protobuf::uint64 value) {
  set_has_sendingtime();
  sendingtime_ = value;
}

// optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
inline bool CMEMarketDataProtobuf::has_posdupflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMEMarketDataProtobuf::set_has_posdupflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMEMarketDataProtobuf::clear_has_posdupflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMEMarketDataProtobuf::clear_posdupflag() {
  posdupflag_ = 89;
  clear_has_posdupflag();
}
inline ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf::posdupflag() const {
  return static_cast< ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag >(posdupflag_);
}
inline void CMEMarketDataProtobuf::set_posdupflag(::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag value) {
  GOOGLE_DCHECK(::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag_IsValid(value));
  set_has_posdupflag();
  posdupflag_ = value;
}

// required uint32 TradeDate = 5;
inline bool CMEMarketDataProtobuf::has_tradedate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMEMarketDataProtobuf::set_has_tradedate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMEMarketDataProtobuf::clear_has_tradedate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMEMarketDataProtobuf::clear_tradedate() {
  tradedate_ = 0u;
  clear_has_tradedate();
}
inline ::google::protobuf::uint32 CMEMarketDataProtobuf::tradedate() const {
  return tradedate_;
}
inline void CMEMarketDataProtobuf::set_tradedate(::google::protobuf::uint32 value) {
  set_has_tradedate();
  tradedate_ = value;
}

// repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
inline int CMEMarketDataProtobuf::mdentries_size() const {
  return mdentries_.size();
}
inline void CMEMarketDataProtobuf::clear_mdentries() {
  mdentries_.Clear();
}
inline const ::fast_engine::CMEMarketDataEntry& CMEMarketDataProtobuf::mdentries(int index) const {
  return mdentries_.Get(index);
}
inline ::fast_engine::CMEMarketDataEntry* CMEMarketDataProtobuf::mutable_mdentries(int index) {
  return mdentries_.Mutable(index);
}
inline ::fast_engine::CMEMarketDataEntry* CMEMarketDataProtobuf::add_mdentries() {
  return mdentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fast_engine::CMEMarketDataEntry >&
CMEMarketDataProtobuf::mdentries() const {
  return mdentries_;
}
inline ::google::protobuf::RepeatedPtrField< ::fast_engine::CMEMarketDataEntry >*
CMEMarketDataProtobuf::mutable_mdentries() {
  return &mdentries_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fast_engine

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataEntry_CMEEntryType>() {
  return ::fast_engine::CMEMarketDataEntry_CMEEntryType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition>() {
  return ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataEntry_CMETradingSessionID>() {
  return ::fast_engine::CMEMarketDataEntry_CMETradingSessionID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataEntry_CMETickDirection>() {
  return ::fast_engine::CMEMarketDataEntry_CMETickDirection_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataEntry_CMETradeCondition>() {
  return ::fast_engine::CMEMarketDataEntry_CMETradeCondition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataProtobuf_CMEStaticField>() {
  return ::fast_engine::CMEMarketDataProtobuf_CMEStaticField_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataProtobuf_CMEMessageType>() {
  return ::fast_engine::CMEMarketDataProtobuf_CMEMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag>() {
  return ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CMEMarketDataProtobuf_2eproto__INCLUDED
