// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "invsys_one.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace investment_system {
namespace invsys_one {

namespace {

const ::google::protobuf::Descriptor* Timebar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timebar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Trend_TrendType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Pivot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pivot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Pivot_PivotType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OrderExecution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderExecution_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderExecution_ExecutionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemOneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemOneRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemOneRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemOneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemOneResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemOneResponse_ResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemOneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemOneData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemOneData_DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_invsys_5fone_2eproto() {
  protobuf_AddDesc_invsys_5fone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "invsys_one.proto");
  GOOGLE_CHECK(file != NULL);
  Timebar_descriptor_ = file->message_type(0);
  static const int Timebar_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, buy_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, sell_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, unkn_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, buy_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, sell_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, unkn_val_),
  };
  Timebar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timebar_descriptor_,
      Timebar::default_instance_,
      Timebar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timebar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timebar));
  Trend_descriptor_ = file->message_type(1);
  static const int Trend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, low_),
  };
  Trend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trend_descriptor_,
      Trend::default_instance_,
      Trend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trend));
  Trend_TrendType_descriptor_ = Trend_descriptor_->enum_type(0);
  Pivot_descriptor_ = file->message_type(2);
  static const int Pivot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pivot, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pivot, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pivot, price_),
  };
  Pivot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pivot_descriptor_,
      Pivot::default_instance_,
      Pivot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pivot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pivot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pivot));
  Pivot_PivotType_descriptor_ = Pivot_descriptor_->enum_type(0);
  OrderExecution_descriptor_ = file->message_type(3);
  static const int OrderExecution_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, timebar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, quantity_),
  };
  OrderExecution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderExecution_descriptor_,
      OrderExecution::default_instance_,
      OrderExecution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderExecution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderExecution));
  OrderExecution_ExecutionType_descriptor_ = OrderExecution_descriptor_->enum_type(0);
  InvestmentSystemOneRequest_descriptor_ = file->message_type(4);
  static const int InvestmentSystemOneRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneRequest, type_),
  };
  InvestmentSystemOneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemOneRequest_descriptor_,
      InvestmentSystemOneRequest::default_instance_,
      InvestmentSystemOneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemOneRequest));
  InvestmentSystemOneRequest_RequestType_descriptor_ = InvestmentSystemOneRequest_descriptor_->enum_type(0);
  InvestmentSystemOneResponse_descriptor_ = file->message_type(5);
  static const int InvestmentSystemOneResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, error_msg_),
  };
  InvestmentSystemOneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemOneResponse_descriptor_,
      InvestmentSystemOneResponse::default_instance_,
      InvestmentSystemOneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemOneResponse));
  InvestmentSystemOneResponse_ResponseType_descriptor_ = InvestmentSystemOneResponse_descriptor_->enum_type(0);
  InvestmentSystemOneData_descriptor_ = file->message_type(6);
  static const int InvestmentSystemOneData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, opening_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, closing_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, update_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, best_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, best_ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, open_pl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, closed_pl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, order_execution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, timebar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, pivot_),
  };
  InvestmentSystemOneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemOneData_descriptor_,
      InvestmentSystemOneData::default_instance_,
      InvestmentSystemOneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemOneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemOneData));
  InvestmentSystemOneData_DataType_descriptor_ = InvestmentSystemOneData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_invsys_5fone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timebar_descriptor_, &Timebar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trend_descriptor_, &Trend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pivot_descriptor_, &Pivot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderExecution_descriptor_, &OrderExecution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemOneRequest_descriptor_, &InvestmentSystemOneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemOneResponse_descriptor_, &InvestmentSystemOneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemOneData_descriptor_, &InvestmentSystemOneData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_invsys_5fone_2eproto() {
  delete Timebar::default_instance_;
  delete Timebar_reflection_;
  delete Trend::default_instance_;
  delete Trend_reflection_;
  delete Pivot::default_instance_;
  delete Pivot_reflection_;
  delete OrderExecution::default_instance_;
  delete OrderExecution_reflection_;
  delete InvestmentSystemOneRequest::default_instance_;
  delete InvestmentSystemOneRequest_reflection_;
  delete InvestmentSystemOneResponse::default_instance_;
  delete InvestmentSystemOneResponse_reflection_;
  delete InvestmentSystemOneData::default_instance_;
  delete InvestmentSystemOneData_reflection_;
}

void protobuf_AddDesc_invsys_5fone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020invsys_one.proto\022\034investment_system.in"
    "vsys_one\"\334\001\n\007Timebar\022\021\n\ttimestamp\030\001 \001(\r\022"
    "\017\n\004open\030\002 \001(\001:\0010\022\017\n\004high\030\003 \001(\001:\0010\022\016\n\003low"
    "\030\004 \001(\001:\0010\022\020\n\005close\030\005 \001(\001:\0010\022\022\n\007buy_qty\030\006"
    " \001(\r:\0010\022\023\n\010sell_qty\030\007 \001(\r:\0010\022\023\n\010unkn_qty"
    "\030\010 \001(\r:\0010\022\022\n\007buy_val\030\t \001(\001:\0010\022\023\n\010sell_va"
    "l\030\n \001(\001:\0010\022\023\n\010unkn_val\030\013 \001(\001:\0010\"\243\001\n\005Tren"
    "d\022\021\n\ttimestamp\030\001 \001(\r\022;\n\004type\030\002 \001(\0162-.inv"
    "estment_system.invsys_one.Trend.TrendTyp"
    "e\022\017\n\004high\030\003 \001(\001:\0010\022\016\n\003low\030\004 \001(\001:\0010\")\n\tTr"
    "endType\022\014\n\010UP_TREND\020\001\022\016\n\nDOWN_TREND\020\002\"\224\001"
    "\n\005Pivot\022\021\n\ttimestamp\030\001 \001(\r\022;\n\004type\030\002 \001(\016"
    "2-.investment_system.invsys_one.Pivot.Pi"
    "votType\022\020\n\005price\030\003 \001(\001:\0010\")\n\tPivotType\022\014"
    "\n\010UP_PIVOT\020\001\022\016\n\nDOWN_PIVOT\020\002\"\311\001\n\016OrderEx"
    "ecution\022\021\n\ttimestamp\030\001 \001(\r\022\017\n\007timebar\030\002 "
    "\001(\r\022H\n\004type\030\003 \001(\0162:.investment_system.in"
    "vsys_one.OrderExecution.ExecutionType\022\020\n"
    "\005price\030\004 \001(\001:\0010\022\023\n\010quantity\030\005 \001(\r:\0010\"\"\n\r"
    "ExecutionType\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\"\343\001\n\032Inv"
    "estmentSystemOneRequest\022\022\n\nrequest_id\030\001 "
    "\001(\t\022\021\n\ttimestamp\030\002 \001(\t\022R\n\004type\030\003 \001(\0162D.i"
    "nvestment_system.invsys_one.InvestmentSy"
    "stemOneRequest.RequestType\"J\n\013RequestTyp"
    "e\022\t\n\005LOGIN\020\001\022\t\n\005PAUSE\020\002\022\n\n\006RESUME\020\003\022\013\n\007F"
    "LATTEN\020\004\022\014\n\010SHUTDOWN\020\005\"\376\001\n\033InvestmentSys"
    "temOneResponse\022\023\n\013response_id\030\001 \001(\t\022\022\n\nr"
    "equest_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022T\n\004ty"
    "pe\030\004 \001(\0162F.investment_system.invsys_one."
    "InvestmentSystemOneResponse.ResponseType"
    "\022\021\n\terror_msg\030\005 \001(\t\":\n\014ResponseType\022\023\n\017A"
    "CKNOWLEDGEMENT\020\001\022\n\n\006REJECT\020\002\022\t\n\005ERROR\020\003\""
    "\266\004\n\027InvestmentSystemOneData\022L\n\004type\030\001 \001("
    "\0162>.investment_system.invsys_one.Investm"
    "entSystemOneData.DataType\022\022\n\nopening_tm\030"
    "\002 \001(\t\022\022\n\nclosing_tm\030\003 \001(\t\022\021\n\tupdate_tm\030\004"
    " \001(\t\022\016\n\006status\030\005 \001(\t\022\020\n\010best_bid\030\006 \001(\001\022\020"
    "\n\010best_ask\030\007 \001(\001\022\017\n\007open_pl\030\010 \001(\001\022\021\n\tclo"
    "sed_pl\030\t \001(\001\022E\n\017order_execution\030\n \003(\0132,."
    "investment_system.invsys_one.OrderExecut"
    "ion\0226\n\007timebar\030\013 \003(\0132%.investment_system"
    ".invsys_one.Timebar\0222\n\005trend\030\014 \003(\0132#.inv"
    "estment_system.invsys_one.Trend\0222\n\005pivot"
    "\030\r \003(\0132#.investment_system.invsys_one.Pi"
    "vot\"S\n\010DataType\022\n\n\006SYSTEM\020\001\022\013\n\007TIMEBAR\020\002"
    "\022\t\n\005TREND\020\003\022\t\n\005PIVOT\020\004\022\r\n\tEXECUTION\020\005\022\t\n"
    "\005LOGIN\020\006B\005H\001\200\001\000", 1855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "invsys_one.proto", &protobuf_RegisterTypes);
  Timebar::default_instance_ = new Timebar();
  Trend::default_instance_ = new Trend();
  Pivot::default_instance_ = new Pivot();
  OrderExecution::default_instance_ = new OrderExecution();
  InvestmentSystemOneRequest::default_instance_ = new InvestmentSystemOneRequest();
  InvestmentSystemOneResponse::default_instance_ = new InvestmentSystemOneResponse();
  InvestmentSystemOneData::default_instance_ = new InvestmentSystemOneData();
  Timebar::default_instance_->InitAsDefaultInstance();
  Trend::default_instance_->InitAsDefaultInstance();
  Pivot::default_instance_->InitAsDefaultInstance();
  OrderExecution::default_instance_->InitAsDefaultInstance();
  InvestmentSystemOneRequest::default_instance_->InitAsDefaultInstance();
  InvestmentSystemOneResponse::default_instance_->InitAsDefaultInstance();
  InvestmentSystemOneData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_invsys_5fone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_invsys_5fone_2eproto {
  StaticDescriptorInitializer_invsys_5fone_2eproto() {
    protobuf_AddDesc_invsys_5fone_2eproto();
  }
} static_descriptor_initializer_invsys_5fone_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Timebar::kTimestampFieldNumber;
const int Timebar::kOpenFieldNumber;
const int Timebar::kHighFieldNumber;
const int Timebar::kLowFieldNumber;
const int Timebar::kCloseFieldNumber;
const int Timebar::kBuyQtyFieldNumber;
const int Timebar::kSellQtyFieldNumber;
const int Timebar::kUnknQtyFieldNumber;
const int Timebar::kBuyValFieldNumber;
const int Timebar::kSellValFieldNumber;
const int Timebar::kUnknValFieldNumber;
#endif  // !_MSC_VER

Timebar::Timebar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timebar::InitAsDefaultInstance() {
}

Timebar::Timebar(const Timebar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timebar::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  buy_qty_ = 0u;
  sell_qty_ = 0u;
  unkn_qty_ = 0u;
  buy_val_ = 0;
  sell_val_ = 0;
  unkn_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timebar::~Timebar() {
  SharedDtor();
}

void Timebar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timebar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timebar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timebar_descriptor_;
}

const Timebar& Timebar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

Timebar* Timebar::default_instance_ = NULL;

Timebar* Timebar::New() const {
  return new Timebar;
}

void Timebar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    buy_qty_ = 0u;
    sell_qty_ = 0u;
    unkn_qty_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_val_ = 0;
    sell_val_ = 0;
    unkn_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timebar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_open;
        break;
      }
      
      // optional double open = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_high;
        break;
      }
      
      // optional double high = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_low;
        break;
      }
      
      // optional double low = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_close;
        break;
      }
      
      // optional double close = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_qty;
        break;
      }
      
      // optional uint32 buy_qty = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_qty_)));
          set_has_buy_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sell_qty;
        break;
      }
      
      // optional uint32 sell_qty = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_qty_)));
          set_has_sell_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unkn_qty;
        break;
      }
      
      // optional uint32 unkn_qty = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unkn_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unkn_qty_)));
          set_has_unkn_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_buy_val;
        break;
      }
      
      // optional double buy_val = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_buy_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buy_val_)));
          set_has_buy_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_sell_val;
        break;
      }
      
      // optional double sell_val = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sell_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sell_val_)));
          set_has_sell_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_unkn_val;
        break;
      }
      
      // optional double unkn_val = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unkn_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unkn_val_)));
          set_has_unkn_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timebar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }
  
  // optional double open = 2 [default = 0];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open(), output);
  }
  
  // optional double high = 3 [default = 0];
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->high(), output);
  }
  
  // optional double low = 4 [default = 0];
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->low(), output);
  }
  
  // optional double close = 5 [default = 0];
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->close(), output);
  }
  
  // optional uint32 buy_qty = 6 [default = 0];
  if (has_buy_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buy_qty(), output);
  }
  
  // optional uint32 sell_qty = 7 [default = 0];
  if (has_sell_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sell_qty(), output);
  }
  
  // optional uint32 unkn_qty = 8 [default = 0];
  if (has_unkn_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->unkn_qty(), output);
  }
  
  // optional double buy_val = 9 [default = 0];
  if (has_buy_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->buy_val(), output);
  }
  
  // optional double sell_val = 10 [default = 0];
  if (has_sell_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sell_val(), output);
  }
  
  // optional double unkn_val = 11 [default = 0];
  if (has_unkn_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unkn_val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timebar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }
  
  // optional double open = 2 [default = 0];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open(), target);
  }
  
  // optional double high = 3 [default = 0];
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->high(), target);
  }
  
  // optional double low = 4 [default = 0];
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->low(), target);
  }
  
  // optional double close = 5 [default = 0];
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->close(), target);
  }
  
  // optional uint32 buy_qty = 6 [default = 0];
  if (has_buy_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buy_qty(), target);
  }
  
  // optional uint32 sell_qty = 7 [default = 0];
  if (has_sell_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sell_qty(), target);
  }
  
  // optional uint32 unkn_qty = 8 [default = 0];
  if (has_unkn_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->unkn_qty(), target);
  }
  
  // optional double buy_val = 9 [default = 0];
  if (has_buy_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->buy_val(), target);
  }
  
  // optional double sell_val = 10 [default = 0];
  if (has_sell_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sell_val(), target);
  }
  
  // optional double unkn_val = 11 [default = 0];
  if (has_unkn_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unkn_val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timebar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional double open = 2 [default = 0];
    if (has_open()) {
      total_size += 1 + 8;
    }
    
    // optional double high = 3 [default = 0];
    if (has_high()) {
      total_size += 1 + 8;
    }
    
    // optional double low = 4 [default = 0];
    if (has_low()) {
      total_size += 1 + 8;
    }
    
    // optional double close = 5 [default = 0];
    if (has_close()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 buy_qty = 6 [default = 0];
    if (has_buy_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_qty());
    }
    
    // optional uint32 sell_qty = 7 [default = 0];
    if (has_sell_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_qty());
    }
    
    // optional uint32 unkn_qty = 8 [default = 0];
    if (has_unkn_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unkn_qty());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double buy_val = 9 [default = 0];
    if (has_buy_val()) {
      total_size += 1 + 8;
    }
    
    // optional double sell_val = 10 [default = 0];
    if (has_sell_val()) {
      total_size += 1 + 8;
    }
    
    // optional double unkn_val = 11 [default = 0];
    if (has_unkn_val()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timebar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timebar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timebar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timebar::MergeFrom(const Timebar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_buy_qty()) {
      set_buy_qty(from.buy_qty());
    }
    if (from.has_sell_qty()) {
      set_sell_qty(from.sell_qty());
    }
    if (from.has_unkn_qty()) {
      set_unkn_qty(from.unkn_qty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_val()) {
      set_buy_val(from.buy_val());
    }
    if (from.has_sell_val()) {
      set_sell_val(from.sell_val());
    }
    if (from.has_unkn_val()) {
      set_unkn_val(from.unkn_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timebar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timebar::CopyFrom(const Timebar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timebar::IsInitialized() const {
  
  return true;
}

void Timebar::Swap(Timebar* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(buy_qty_, other->buy_qty_);
    std::swap(sell_qty_, other->sell_qty_);
    std::swap(unkn_qty_, other->unkn_qty_);
    std::swap(buy_val_, other->buy_val_);
    std::swap(sell_val_, other->sell_val_);
    std::swap(unkn_val_, other->unkn_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timebar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timebar_descriptor_;
  metadata.reflection = Timebar_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Trend_TrendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trend_TrendType_descriptor_;
}
bool Trend_TrendType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Trend_TrendType Trend::UP_TREND;
const Trend_TrendType Trend::DOWN_TREND;
const Trend_TrendType Trend::TrendType_MIN;
const Trend_TrendType Trend::TrendType_MAX;
const int Trend::TrendType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Trend::kTimestampFieldNumber;
const int Trend::kTypeFieldNumber;
const int Trend::kHighFieldNumber;
const int Trend::kLowFieldNumber;
#endif  // !_MSC_VER

Trend::Trend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trend::InitAsDefaultInstance() {
}

Trend::Trend(const Trend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trend::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  type_ = 1;
  high_ = 0;
  low_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trend::~Trend() {
  SharedDtor();
}

void Trend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trend_descriptor_;
}

const Trend& Trend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

Trend* Trend::default_instance_ = NULL;

Trend* Trend::New() const {
  return new Trend;
}

void Trend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    type_ = 1;
    high_ = 0;
    low_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .investment_system.invsys_one.Trend.TrendType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::Trend_TrendType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::Trend_TrendType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_high;
        break;
      }
      
      // optional double high = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_low;
        break;
      }
      
      // optional double low = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }
  
  // optional .investment_system.invsys_one.Trend.TrendType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional double high = 3 [default = 0];
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->high(), output);
  }
  
  // optional double low = 4 [default = 0];
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }
  
  // optional .investment_system.invsys_one.Trend.TrendType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional double high = 3 [default = 0];
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->high(), target);
  }
  
  // optional double low = 4 [default = 0];
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional .investment_system.invsys_one.Trend.TrendType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double high = 3 [default = 0];
    if (has_high()) {
      total_size += 1 + 8;
    }
    
    // optional double low = 4 [default = 0];
    if (has_low()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trend::MergeFrom(const Trend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trend::CopyFrom(const Trend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trend::IsInitialized() const {
  
  return true;
}

void Trend::Swap(Trend* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trend_descriptor_;
  metadata.reflection = Trend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Pivot_PivotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pivot_PivotType_descriptor_;
}
bool Pivot_PivotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Pivot_PivotType Pivot::UP_PIVOT;
const Pivot_PivotType Pivot::DOWN_PIVOT;
const Pivot_PivotType Pivot::PivotType_MIN;
const Pivot_PivotType Pivot::PivotType_MAX;
const int Pivot::PivotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Pivot::kTimestampFieldNumber;
const int Pivot::kTypeFieldNumber;
const int Pivot::kPriceFieldNumber;
#endif  // !_MSC_VER

Pivot::Pivot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pivot::InitAsDefaultInstance() {
}

Pivot::Pivot(const Pivot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pivot::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  type_ = 1;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pivot::~Pivot() {
  SharedDtor();
}

void Pivot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pivot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pivot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pivot_descriptor_;
}

const Pivot& Pivot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

Pivot* Pivot::default_instance_ = NULL;

Pivot* Pivot::New() const {
  return new Pivot;
}

void Pivot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    type_ = 1;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pivot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .investment_system.invsys_one.Pivot.PivotType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::Pivot_PivotType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::Pivot_PivotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }
      
      // optional double price = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pivot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }
  
  // optional .investment_system.invsys_one.Pivot.PivotType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional double price = 3 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pivot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }
  
  // optional .investment_system.invsys_one.Pivot.PivotType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional double price = 3 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pivot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional .investment_system.invsys_one.Pivot.PivotType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double price = 3 [default = 0];
    if (has_price()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pivot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pivot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pivot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pivot::MergeFrom(const Pivot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pivot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pivot::CopyFrom(const Pivot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pivot::IsInitialized() const {
  
  return true;
}

void Pivot::Swap(Pivot* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pivot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pivot_descriptor_;
  metadata.reflection = Pivot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OrderExecution_ExecutionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderExecution_ExecutionType_descriptor_;
}
bool OrderExecution_ExecutionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderExecution_ExecutionType OrderExecution::BUY;
const OrderExecution_ExecutionType OrderExecution::SELL;
const OrderExecution_ExecutionType OrderExecution::ExecutionType_MIN;
const OrderExecution_ExecutionType OrderExecution::ExecutionType_MAX;
const int OrderExecution::ExecutionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OrderExecution::kTimestampFieldNumber;
const int OrderExecution::kTimebarFieldNumber;
const int OrderExecution::kTypeFieldNumber;
const int OrderExecution::kPriceFieldNumber;
const int OrderExecution::kQuantityFieldNumber;
#endif  // !_MSC_VER

OrderExecution::OrderExecution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderExecution::InitAsDefaultInstance() {
}

OrderExecution::OrderExecution(const OrderExecution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderExecution::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  timebar_ = 0u;
  type_ = 1;
  price_ = 0;
  quantity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderExecution::~OrderExecution() {
  SharedDtor();
}

void OrderExecution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderExecution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderExecution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderExecution_descriptor_;
}

const OrderExecution& OrderExecution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

OrderExecution* OrderExecution::default_instance_ = NULL;

OrderExecution* OrderExecution::New() const {
  return new OrderExecution;
}

void OrderExecution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    timebar_ = 0u;
    type_ = 1;
    price_ = 0;
    quantity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timebar;
        break;
      }
      
      // optional uint32 timebar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timebar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timebar_)));
          set_has_timebar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .investment_system.invsys_one.OrderExecution.ExecutionType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::OrderExecution_ExecutionType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::OrderExecution_ExecutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_price;
        break;
      }
      
      // optional double price = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }
      
      // optional uint32 quantity = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }
  
  // optional uint32 timebar = 2;
  if (has_timebar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timebar(), output);
  }
  
  // optional .investment_system.invsys_one.OrderExecution.ExecutionType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional double price = 4 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }
  
  // optional uint32 quantity = 5 [default = 0];
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderExecution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }
  
  // optional uint32 timebar = 2;
  if (has_timebar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timebar(), target);
  }
  
  // optional .investment_system.invsys_one.OrderExecution.ExecutionType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional double price = 4 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }
  
  // optional uint32 quantity = 5 [default = 0];
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderExecution::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional uint32 timebar = 2;
    if (has_timebar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timebar());
    }
    
    // optional .investment_system.invsys_one.OrderExecution.ExecutionType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double price = 4 [default = 0];
    if (has_price()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 quantity = 5 [default = 0];
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderExecution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderExecution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderExecution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderExecution::MergeFrom(const OrderExecution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_timebar()) {
      set_timebar(from.timebar());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderExecution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderExecution::CopyFrom(const OrderExecution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderExecution::IsInitialized() const {
  
  return true;
}

void OrderExecution::Swap(OrderExecution* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(timebar_, other->timebar_);
    std::swap(type_, other->type_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderExecution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderExecution_descriptor_;
  metadata.reflection = OrderExecution_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemOneRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneRequest_RequestType_descriptor_;
}
bool InvestmentSystemOneRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::LOGIN;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::PAUSE;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::RESUME;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::FLATTEN;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::SHUTDOWN;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::RequestType_MIN;
const InvestmentSystemOneRequest_RequestType InvestmentSystemOneRequest::RequestType_MAX;
const int InvestmentSystemOneRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemOneRequest::kRequestIdFieldNumber;
const int InvestmentSystemOneRequest::kTimestampFieldNumber;
const int InvestmentSystemOneRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemOneRequest::InvestmentSystemOneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemOneRequest::InitAsDefaultInstance() {
}

InvestmentSystemOneRequest::InvestmentSystemOneRequest(const InvestmentSystemOneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemOneRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemOneRequest::~InvestmentSystemOneRequest() {
  SharedDtor();
}

void InvestmentSystemOneRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemOneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemOneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneRequest_descriptor_;
}

const InvestmentSystemOneRequest& InvestmentSystemOneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

InvestmentSystemOneRequest* InvestmentSystemOneRequest::default_instance_ = NULL;

InvestmentSystemOneRequest* InvestmentSystemOneRequest::New() const {
  return new InvestmentSystemOneRequest;
}

void InvestmentSystemOneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemOneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .investment_system.invsys_one.InvestmentSystemOneRequest.RequestType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::InvestmentSystemOneRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::InvestmentSystemOneRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemOneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .investment_system.invsys_one.InvestmentSystemOneRequest.RequestType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemOneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .investment_system.invsys_one.InvestmentSystemOneRequest.RequestType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemOneRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .investment_system.invsys_one.InvestmentSystemOneRequest.RequestType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemOneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemOneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemOneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemOneRequest::MergeFrom(const InvestmentSystemOneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemOneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemOneRequest::CopyFrom(const InvestmentSystemOneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemOneRequest::IsInitialized() const {
  
  return true;
}

void InvestmentSystemOneRequest::Swap(InvestmentSystemOneRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemOneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemOneRequest_descriptor_;
  metadata.reflection = InvestmentSystemOneRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemOneResponse_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneResponse_ResponseType_descriptor_;
}
bool InvestmentSystemOneResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemOneResponse_ResponseType InvestmentSystemOneResponse::ACKNOWLEDGEMENT;
const InvestmentSystemOneResponse_ResponseType InvestmentSystemOneResponse::REJECT;
const InvestmentSystemOneResponse_ResponseType InvestmentSystemOneResponse::ERROR;
const InvestmentSystemOneResponse_ResponseType InvestmentSystemOneResponse::ResponseType_MIN;
const InvestmentSystemOneResponse_ResponseType InvestmentSystemOneResponse::ResponseType_MAX;
const int InvestmentSystemOneResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemOneResponse::kResponseIdFieldNumber;
const int InvestmentSystemOneResponse::kRequestIdFieldNumber;
const int InvestmentSystemOneResponse::kTimestampFieldNumber;
const int InvestmentSystemOneResponse::kTypeFieldNumber;
const int InvestmentSystemOneResponse::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemOneResponse::InvestmentSystemOneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemOneResponse::InitAsDefaultInstance() {
}

InvestmentSystemOneResponse::InvestmentSystemOneResponse(const InvestmentSystemOneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemOneResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemOneResponse::~InvestmentSystemOneResponse() {
  SharedDtor();
}

void InvestmentSystemOneResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemOneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemOneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneResponse_descriptor_;
}

const InvestmentSystemOneResponse& InvestmentSystemOneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

InvestmentSystemOneResponse* InvestmentSystemOneResponse::default_instance_ = NULL;

InvestmentSystemOneResponse* InvestmentSystemOneResponse::New() const {
  return new InvestmentSystemOneResponse;
}

void InvestmentSystemOneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemOneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .investment_system.invsys_one.InvestmentSystemOneResponse.ResponseType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::InvestmentSystemOneResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::InvestmentSystemOneResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemOneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .investment_system.invsys_one.InvestmentSystemOneResponse.ResponseType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemOneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .investment_system.invsys_one.InvestmentSystemOneResponse.ResponseType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemOneResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .investment_system.invsys_one.InvestmentSystemOneResponse.ResponseType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string error_msg = 5;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemOneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemOneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemOneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemOneResponse::MergeFrom(const InvestmentSystemOneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemOneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemOneResponse::CopyFrom(const InvestmentSystemOneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemOneResponse::IsInitialized() const {
  
  return true;
}

void InvestmentSystemOneResponse::Swap(InvestmentSystemOneResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemOneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemOneResponse_descriptor_;
  metadata.reflection = InvestmentSystemOneResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemOneData_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneData_DataType_descriptor_;
}
bool InvestmentSystemOneData_DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemOneData_DataType InvestmentSystemOneData::SYSTEM;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::TIMEBAR;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::TREND;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::PIVOT;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::EXECUTION;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::LOGIN;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::DataType_MIN;
const InvestmentSystemOneData_DataType InvestmentSystemOneData::DataType_MAX;
const int InvestmentSystemOneData::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemOneData::kTypeFieldNumber;
const int InvestmentSystemOneData::kOpeningTmFieldNumber;
const int InvestmentSystemOneData::kClosingTmFieldNumber;
const int InvestmentSystemOneData::kUpdateTmFieldNumber;
const int InvestmentSystemOneData::kStatusFieldNumber;
const int InvestmentSystemOneData::kBestBidFieldNumber;
const int InvestmentSystemOneData::kBestAskFieldNumber;
const int InvestmentSystemOneData::kOpenPlFieldNumber;
const int InvestmentSystemOneData::kClosedPlFieldNumber;
const int InvestmentSystemOneData::kOrderExecutionFieldNumber;
const int InvestmentSystemOneData::kTimebarFieldNumber;
const int InvestmentSystemOneData::kTrendFieldNumber;
const int InvestmentSystemOneData::kPivotFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemOneData::InvestmentSystemOneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemOneData::InitAsDefaultInstance() {
}

InvestmentSystemOneData::InvestmentSystemOneData(const InvestmentSystemOneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemOneData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  opening_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closing_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  best_bid_ = 0;
  best_ask_ = 0;
  open_pl_ = 0;
  closed_pl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemOneData::~InvestmentSystemOneData() {
  SharedDtor();
}

void InvestmentSystemOneData::SharedDtor() {
  if (opening_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete opening_tm_;
  }
  if (closing_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete closing_tm_;
  }
  if (update_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete update_tm_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemOneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemOneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemOneData_descriptor_;
}

const InvestmentSystemOneData& InvestmentSystemOneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invsys_5fone_2eproto();  return *default_instance_;
}

InvestmentSystemOneData* InvestmentSystemOneData::default_instance_ = NULL;

InvestmentSystemOneData* InvestmentSystemOneData::New() const {
  return new InvestmentSystemOneData;
}

void InvestmentSystemOneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_opening_tm()) {
      if (opening_tm_ != &::google::protobuf::internal::kEmptyString) {
        opening_tm_->clear();
      }
    }
    if (has_closing_tm()) {
      if (closing_tm_ != &::google::protobuf::internal::kEmptyString) {
        closing_tm_->clear();
      }
    }
    if (has_update_tm()) {
      if (update_tm_ != &::google::protobuf::internal::kEmptyString) {
        update_tm_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    best_bid_ = 0;
    best_ask_ = 0;
    open_pl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    closed_pl_ = 0;
  }
  order_execution_.Clear();
  timebar_.Clear();
  trend_.Clear();
  pivot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemOneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .investment_system.invsys_one.InvestmentSystemOneData.DataType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::investment_system::invsys_one::InvestmentSystemOneData_DataType_IsValid(value)) {
            set_type(static_cast< ::investment_system::invsys_one::InvestmentSystemOneData_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opening_tm;
        break;
      }
      
      // optional string opening_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opening_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opening_tm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opening_tm().data(), this->opening_tm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_closing_tm;
        break;
      }
      
      // optional string closing_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closing_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closing_tm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closing_tm().data(), this->closing_tm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_update_tm;
        break;
      }
      
      // optional string update_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_tm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_tm().data(), this->update_tm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_status;
        break;
      }
      
      // optional string status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_best_bid;
        break;
      }
      
      // optional double best_bid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_best_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &best_bid_)));
          set_has_best_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_best_ask;
        break;
      }
      
      // optional double best_ask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_best_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &best_ask_)));
          set_has_best_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_open_pl;
        break;
      }
      
      // optional double open_pl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open_pl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_pl_)));
          set_has_open_pl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_closed_pl;
        break;
      }
      
      // optional double closed_pl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closed_pl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closed_pl_)));
          set_has_closed_pl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_order_execution;
        break;
      }
      
      // repeated .investment_system.invsys_one.OrderExecution order_execution = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_execution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order_execution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_order_execution;
        if (input->ExpectTag(90)) goto parse_timebar;
        break;
      }
      
      // repeated .investment_system.invsys_one.Timebar timebar = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timebar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timebar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timebar;
        if (input->ExpectTag(98)) goto parse_trend;
        break;
      }
      
      // repeated .investment_system.invsys_one.Trend trend = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trend;
        if (input->ExpectTag(106)) goto parse_pivot;
        break;
      }
      
      // repeated .investment_system.invsys_one.Pivot pivot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pivot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pivot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pivot;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemOneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .investment_system.invsys_one.InvestmentSystemOneData.DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string opening_tm = 2;
  if (has_opening_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opening_tm().data(), this->opening_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opening_tm(), output);
  }
  
  // optional string closing_tm = 3;
  if (has_closing_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closing_tm().data(), this->closing_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->closing_tm(), output);
  }
  
  // optional string update_tm = 4;
  if (has_update_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_tm().data(), this->update_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->update_tm(), output);
  }
  
  // optional string status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->status(), output);
  }
  
  // optional double best_bid = 6;
  if (has_best_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->best_bid(), output);
  }
  
  // optional double best_ask = 7;
  if (has_best_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->best_ask(), output);
  }
  
  // optional double open_pl = 8;
  if (has_open_pl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->open_pl(), output);
  }
  
  // optional double closed_pl = 9;
  if (has_closed_pl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->closed_pl(), output);
  }
  
  // repeated .investment_system.invsys_one.OrderExecution order_execution = 10;
  for (int i = 0; i < this->order_execution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->order_execution(i), output);
  }
  
  // repeated .investment_system.invsys_one.Timebar timebar = 11;
  for (int i = 0; i < this->timebar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->timebar(i), output);
  }
  
  // repeated .investment_system.invsys_one.Trend trend = 12;
  for (int i = 0; i < this->trend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trend(i), output);
  }
  
  // repeated .investment_system.invsys_one.Pivot pivot = 13;
  for (int i = 0; i < this->pivot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->pivot(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemOneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .investment_system.invsys_one.InvestmentSystemOneData.DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string opening_tm = 2;
  if (has_opening_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opening_tm().data(), this->opening_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opening_tm(), target);
  }
  
  // optional string closing_tm = 3;
  if (has_closing_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closing_tm().data(), this->closing_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->closing_tm(), target);
  }
  
  // optional string update_tm = 4;
  if (has_update_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_tm().data(), this->update_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->update_tm(), target);
  }
  
  // optional string status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->status(), target);
  }
  
  // optional double best_bid = 6;
  if (has_best_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->best_bid(), target);
  }
  
  // optional double best_ask = 7;
  if (has_best_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->best_ask(), target);
  }
  
  // optional double open_pl = 8;
  if (has_open_pl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->open_pl(), target);
  }
  
  // optional double closed_pl = 9;
  if (has_closed_pl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->closed_pl(), target);
  }
  
  // repeated .investment_system.invsys_one.OrderExecution order_execution = 10;
  for (int i = 0; i < this->order_execution_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->order_execution(i), target);
  }
  
  // repeated .investment_system.invsys_one.Timebar timebar = 11;
  for (int i = 0; i < this->timebar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->timebar(i), target);
  }
  
  // repeated .investment_system.invsys_one.Trend trend = 12;
  for (int i = 0; i < this->trend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->trend(i), target);
  }
  
  // repeated .investment_system.invsys_one.Pivot pivot = 13;
  for (int i = 0; i < this->pivot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pivot(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemOneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .investment_system.invsys_one.InvestmentSystemOneData.DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string opening_tm = 2;
    if (has_opening_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opening_tm());
    }
    
    // optional string closing_tm = 3;
    if (has_closing_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closing_tm());
    }
    
    // optional string update_tm = 4;
    if (has_update_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_tm());
    }
    
    // optional string status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // optional double best_bid = 6;
    if (has_best_bid()) {
      total_size += 1 + 8;
    }
    
    // optional double best_ask = 7;
    if (has_best_ask()) {
      total_size += 1 + 8;
    }
    
    // optional double open_pl = 8;
    if (has_open_pl()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double closed_pl = 9;
    if (has_closed_pl()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .investment_system.invsys_one.OrderExecution order_execution = 10;
  total_size += 1 * this->order_execution_size();
  for (int i = 0; i < this->order_execution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order_execution(i));
  }
  
  // repeated .investment_system.invsys_one.Timebar timebar = 11;
  total_size += 1 * this->timebar_size();
  for (int i = 0; i < this->timebar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timebar(i));
  }
  
  // repeated .investment_system.invsys_one.Trend trend = 12;
  total_size += 1 * this->trend_size();
  for (int i = 0; i < this->trend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trend(i));
  }
  
  // repeated .investment_system.invsys_one.Pivot pivot = 13;
  total_size += 1 * this->pivot_size();
  for (int i = 0; i < this->pivot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pivot(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemOneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemOneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemOneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemOneData::MergeFrom(const InvestmentSystemOneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_execution_.MergeFrom(from.order_execution_);
  timebar_.MergeFrom(from.timebar_);
  trend_.MergeFrom(from.trend_);
  pivot_.MergeFrom(from.pivot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opening_tm()) {
      set_opening_tm(from.opening_tm());
    }
    if (from.has_closing_tm()) {
      set_closing_tm(from.closing_tm());
    }
    if (from.has_update_tm()) {
      set_update_tm(from.update_tm());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_best_bid()) {
      set_best_bid(from.best_bid());
    }
    if (from.has_best_ask()) {
      set_best_ask(from.best_ask());
    }
    if (from.has_open_pl()) {
      set_open_pl(from.open_pl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_closed_pl()) {
      set_closed_pl(from.closed_pl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemOneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemOneData::CopyFrom(const InvestmentSystemOneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemOneData::IsInitialized() const {
  
  return true;
}

void InvestmentSystemOneData::Swap(InvestmentSystemOneData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(opening_tm_, other->opening_tm_);
    std::swap(closing_tm_, other->closing_tm_);
    std::swap(update_tm_, other->update_tm_);
    std::swap(status_, other->status_);
    std::swap(best_bid_, other->best_bid_);
    std::swap(best_ask_, other->best_ask_);
    std::swap(open_pl_, other->open_pl_);
    std::swap(closed_pl_, other->closed_pl_);
    order_execution_.Swap(&other->order_execution_);
    timebar_.Swap(&other->timebar_);
    trend_.Swap(&other->trend_);
    pivot_.Swap(&other->pivot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemOneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemOneData_descriptor_;
  metadata.reflection = InvestmentSystemOneData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace invsys_one
}  // namespace investment_system

// @@protoc_insertion_point(global_scope)
