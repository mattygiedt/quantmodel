// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CMEMarketDataProtobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fast_engine {

namespace {

const ::google::protobuf::Descriptor* CMEMarketDataEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMEMarketDataEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEEntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEQuoteCondition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradingSessionID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETickDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradeCondition_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMEMarketDataProtobuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMEMarketDataProtobuf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEStaticField_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEPosDupFlag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CMEMarketDataProtobuf_2eproto() {
  protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CMEMarketDataProtobuf.proto");
  GOOGLE_CHECK(file != NULL);
  CMEMarketDataEntry_descriptor_ = file->message_type(0);
  static const int CMEMarketDataEntry_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdupdateaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdpricelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdentrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, securityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, rptseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, quotecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdentrypxexponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdentrypxmantissa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, numberoforders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdentrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdentrysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, tradingsessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, netchgprevdayexponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, netchgprevdaymantissa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, tickdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, openclosesettleflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, settldate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, tradevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, tradecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, aggressorside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, mdquotetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, tradeid_),
  };
  CMEMarketDataEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMEMarketDataEntry_descriptor_,
      CMEMarketDataEntry::default_instance_,
      CMEMarketDataEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMEMarketDataEntry));
  CMEMarketDataEntry_CMEEntryType_descriptor_ = CMEMarketDataEntry_descriptor_->enum_type(0);
  CMEMarketDataEntry_CMEQuoteCondition_descriptor_ = CMEMarketDataEntry_descriptor_->enum_type(1);
  CMEMarketDataEntry_CMETradingSessionID_descriptor_ = CMEMarketDataEntry_descriptor_->enum_type(2);
  CMEMarketDataEntry_CMETickDirection_descriptor_ = CMEMarketDataEntry_descriptor_->enum_type(3);
  CMEMarketDataEntry_CMETradeCondition_descriptor_ = CMEMarketDataEntry_descriptor_->enum_type(4);
  CMEMarketDataProtobuf_descriptor_ = file->message_type(1);
  static const int CMEMarketDataProtobuf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, msgseqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, sendingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, posdupflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, tradedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, mdentries_),
  };
  CMEMarketDataProtobuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMEMarketDataProtobuf_descriptor_,
      CMEMarketDataProtobuf::default_instance_,
      CMEMarketDataProtobuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketDataProtobuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMEMarketDataProtobuf));
  CMEMarketDataProtobuf_CMEStaticField_descriptor_ = CMEMarketDataProtobuf_descriptor_->enum_type(0);
  CMEMarketDataProtobuf_CMEMessageType_descriptor_ = CMEMarketDataProtobuf_descriptor_->enum_type(1);
  CMEMarketDataProtobuf_CMEPosDupFlag_descriptor_ = CMEMarketDataProtobuf_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CMEMarketDataProtobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMEMarketDataEntry_descriptor_, &CMEMarketDataEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMEMarketDataProtobuf_descriptor_, &CMEMarketDataProtobuf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CMEMarketDataProtobuf_2eproto() {
  delete CMEMarketDataEntry::default_instance_;
  delete CMEMarketDataEntry_reflection_;
  delete CMEMarketDataProtobuf::default_instance_;
  delete CMEMarketDataProtobuf_reflection_;
}

void protobuf_AddDesc_CMEMarketDataProtobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033CMEMarketDataProtobuf.proto\022\013fast_engi"
    "ne\"\234\r\n\022CMEMarketDataEntry\022\026\n\016MDUpdateAct"
    "ion\030\001 \002(\r\022\024\n\014MDPriceLevel\030\002 \001(\r\022A\n\013MDEnt"
    "ryType\030\003 \002(\0162,.fast_engine.CMEMarketData"
    "Entry.CMEEntryType\022\030\n\020SecurityIDSource\030\004"
    " \002(\r\022\022\n\nSecurityID\030\005 \002(\r\022\016\n\006RptSeq\030\006 \002(\r"
    "\022I\n\016QuoteCondition\030\007 \001(\01621.fast_engine.C"
    "MEMarketDataEntry.CMEQuoteCondition\022\031\n\021M"
    "DEntryPxExponent\030\010 \002(\005\022\031\n\021MDEntryPxManti"
    "ssa\030\t \002(\003\022\026\n\016NumberOfOrders\030\n \001(\r\022\023\n\013MDE"
    "ntryTime\030\013 \002(\r\022\023\n\013MDEntrySize\030\014 \001(\005\022M\n\020T"
    "radingSessionID\030\r \001(\01623.fast_engine.CMEM"
    "arketDataEntry.CMETradingSessionID\022\035\n\025Ne"
    "tChgPrevDayExponent\030\016 \001(\005\022\035\n\025NetChgPrevD"
    "ayMantissa\030\017 \001(\003\022G\n\rTickDirection\030\020 \001(\0162"
    "0.fast_engine.CMEMarketDataEntry.CMETick"
    "Direction\022\033\n\023OpenCloseSettleFlag\030\021 \001(\r\022\021"
    "\n\tSettlDate\030\022 \001(\r\022\023\n\013TradeVolume\030\023 \001(\r\022I"
    "\n\016TradeCondition\030\024 \001(\01621.fast_engine.CME"
    "MarketDataEntry.CMETradeCondition\022\025\n\rAgg"
    "ressorSide\030\025 \001(\r\022\023\n\013MDQuoteType\030\026 \001(\r\022\017\n"
    "\007TradeID\030\027 \001(\r\"\203\004\n\014CMEEntryType\022\022\n\016ENTRY"
    "_TYPE_BID\0200\022\022\n\016ENTRY_TYPE_ASK\0201\022\024\n\020ENTRY"
    "_TYPE_TRADE\0202\022\034\n\030ENTRY_TYPE_OPENING_PRIC"
    "E\0204\022\037\n\033ENTRY_TYPE_SETTLEMENT_PRICE\0206\022)\n%"
    "ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE\0207\022"
    "(\n$ENTRY_TYPE_TRADING_SESSION_LOW_PRICE\020"
    "8\022\033\n\027ENTRY_TYPE_TRADE_VOLUME\020B\022\034\n\030ENTRY_"
    "TYPE_OPEN_INTEREST\020C\022\035\n\031ENTRY_TYPE_SIMUL"
    "ATED_SELL\020E\022\034\n\030ENTRY_TYPE_SIMULATED_BUY\020"
    "F\022\031\n\025ENTRY_TYPE_EMPTY_BOOK\020J\022\024\n\020ENTRY_TY"
    "PE_PRIOR\020M\022\037\n\033ENTRY_TYPE_SESSION_HIGH_BI"
    "D\020N\022 \n\034ENTRY_TYPE_SESSION_LOW_OFFER\020O\022\033\n"
    "\027ENTRY_TYPE_FIXING_PRICE\020W\022\030\n\024ENTRY_TYPE"
    "_CASH_NOTE\020X\"U\n\021CMEQuoteCondition\022\033\n\027QUO"
    "TE_CONDITION_IMPLIED\020K\022#\n\037QUOTE_CONDITIO"
    "N_LAST_BEST_PRICE\020C\"s\n\023CMETradingSession"
    "ID\022\037\n\033TRADING_SESSION_PRE_OPENING\0200\022\033\n\027T"
    "RADING_SESSION_OPENING\0201\022\036\n\032TRADING_SESS"
    "ION_CONTINUOUS\0202\"E\n\020CMETickDirection\022\027\n\023"
    "TICK_DIRECTION_PLUS\0200\022\030\n\024TICK_DIRECTION_"
    "MINUS\0202\"X\n\021CMETradeCondition\022!\n\035TRADE_CO"
    "NDITION_OPENING_TRADE\020E\022 \n\034TRADE_CONDITI"
    "ON_GLOBEX_PRICE\0201\"\270\006\n\025CMEMarketDataProto"
    "buf\022F\n\013MessageType\030\001 \002(\01621.fast_engine.C"
    "MEMarketDataProtobuf.CMEMessageType\022\021\n\tM"
    "sgSeqNum\030\002 \002(\r\022\023\n\013SendingTime\030\003 \002(\004\022D\n\nP"
    "osDupFlag\030\004 \001(\01620.fast_engine.CMEMarketD"
    "ataProtobuf.CMEPosDupFlag\022\021\n\tTradeDate\030\005"
    " \002(\r\0222\n\tMDEntries\030\006 \003(\0132\037.fast_engine.CM"
    "EMarketDataEntry\"O\n\016CMEStaticField\022\034\n\030ST"
    "ATIC_FIELD_APPL_VER_ID\020\001\022\037\n\033STATIC_FIELD"
    "_SENDER_COMP_ID\020\002\"\214\003\n\016CMEMessageType\022\032\n\026"
    "MESSAGE_TYPE_HEARTBEAT\0200\022\027\n\023MESSAGE_TYPE"
    "_LOGOUT\0205\022\026\n\022MESSAGE_TYPE_LOGON\020A\022\025\n\021MES"
    "SAGE_TYPE_NEWS\020B\022$\n MESSAGE_TYPE_SECURIT"
    "Y_DEFINITION\020d\022 \n\034MESSAGE_TYPE_SECURITY_"
    "STATUS\020f\022\036\n\032MESSAGE_TYPE_QUOTE_REQUEST\020R"
    "\022$\n MESSAGE_TYPE_MARKET_DATA_REQUEST\020V\022)"
    "\n%MESSAGE_TYPE_MARKET_DATA_FULL_REFRESH\020"
    "W\0220\n,MESSAGE_TYPE_MARKET_DATA_INCREMENTA"
    "L_REFRESH\020X\022+\n\'MESSAGE_TYPE_MARKET_DATA_"
    "REQUEST_REJECT\020Y\"B\n\rCMEPosDupFlag\022\026\n\022POS"
    "SIBLE_DUPLICATE\020Y\022\031\n\025ORIGINAL_TRANSMISSI"
    "ON\020NB\005H\001\200\001\000", 2571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CMEMarketDataProtobuf.proto", &protobuf_RegisterTypes);
  CMEMarketDataEntry::default_instance_ = new CMEMarketDataEntry();
  CMEMarketDataProtobuf::default_instance_ = new CMEMarketDataProtobuf();
  CMEMarketDataEntry::default_instance_->InitAsDefaultInstance();
  CMEMarketDataProtobuf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CMEMarketDataProtobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CMEMarketDataProtobuf_2eproto {
  StaticDescriptorInitializer_CMEMarketDataProtobuf_2eproto() {
    protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();
  }
} static_descriptor_initializer_CMEMarketDataProtobuf_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEEntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_CMEEntryType_descriptor_;
}
bool CMEMarketDataEntry_CMEEntryType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 52:
    case 54:
    case 55:
    case 56:
    case 66:
    case 67:
    case 69:
    case 70:
    case 74:
    case 77:
    case 78:
    case 79:
    case 87:
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_BID;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_ASK;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_TRADE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_OPENING_PRICE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_SETTLEMENT_PRICE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_TRADING_SESSION_LOW_PRICE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_TRADE_VOLUME;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_OPEN_INTEREST;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_SIMULATED_SELL;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_SIMULATED_BUY;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_EMPTY_BOOK;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_PRIOR;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_SESSION_HIGH_BID;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_SESSION_LOW_OFFER;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_FIXING_PRICE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::ENTRY_TYPE_CASH_NOTE;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::CMEEntryType_MIN;
const CMEMarketDataEntry_CMEEntryType CMEMarketDataEntry::CMEEntryType_MAX;
const int CMEMarketDataEntry::CMEEntryType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMEQuoteCondition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_CMEQuoteCondition_descriptor_;
}
bool CMEMarketDataEntry_CMEQuoteCondition_IsValid(int value) {
  switch(value) {
    case 67:
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry::QUOTE_CONDITION_IMPLIED;
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry::QUOTE_CONDITION_LAST_BEST_PRICE;
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry::CMEQuoteCondition_MIN;
const CMEMarketDataEntry_CMEQuoteCondition CMEMarketDataEntry::CMEQuoteCondition_MAX;
const int CMEMarketDataEntry::CMEQuoteCondition_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradingSessionID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_CMETradingSessionID_descriptor_;
}
bool CMEMarketDataEntry_CMETradingSessionID_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::TRADING_SESSION_PRE_OPENING;
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::TRADING_SESSION_OPENING;
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::TRADING_SESSION_CONTINUOUS;
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::CMETradingSessionID_MIN;
const CMEMarketDataEntry_CMETradingSessionID CMEMarketDataEntry::CMETradingSessionID_MAX;
const int CMEMarketDataEntry::CMETradingSessionID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETickDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_CMETickDirection_descriptor_;
}
bool CMEMarketDataEntry_CMETickDirection_IsValid(int value) {
  switch(value) {
    case 48:
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry::TICK_DIRECTION_PLUS;
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry::TICK_DIRECTION_MINUS;
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry::CMETickDirection_MIN;
const CMEMarketDataEntry_CMETickDirection CMEMarketDataEntry::CMETickDirection_MAX;
const int CMEMarketDataEntry::CMETickDirection_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataEntry_CMETradeCondition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_CMETradeCondition_descriptor_;
}
bool CMEMarketDataEntry_CMETradeCondition_IsValid(int value) {
  switch(value) {
    case 49:
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry::TRADE_CONDITION_OPENING_TRADE;
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry::TRADE_CONDITION_GLOBEX_PRICE;
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry::CMETradeCondition_MIN;
const CMEMarketDataEntry_CMETradeCondition CMEMarketDataEntry::CMETradeCondition_MAX;
const int CMEMarketDataEntry::CMETradeCondition_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMEMarketDataEntry::kMDUpdateActionFieldNumber;
const int CMEMarketDataEntry::kMDPriceLevelFieldNumber;
const int CMEMarketDataEntry::kMDEntryTypeFieldNumber;
const int CMEMarketDataEntry::kSecurityIDSourceFieldNumber;
const int CMEMarketDataEntry::kSecurityIDFieldNumber;
const int CMEMarketDataEntry::kRptSeqFieldNumber;
const int CMEMarketDataEntry::kQuoteConditionFieldNumber;
const int CMEMarketDataEntry::kMDEntryPxExponentFieldNumber;
const int CMEMarketDataEntry::kMDEntryPxMantissaFieldNumber;
const int CMEMarketDataEntry::kNumberOfOrdersFieldNumber;
const int CMEMarketDataEntry::kMDEntryTimeFieldNumber;
const int CMEMarketDataEntry::kMDEntrySizeFieldNumber;
const int CMEMarketDataEntry::kTradingSessionIDFieldNumber;
const int CMEMarketDataEntry::kNetChgPrevDayExponentFieldNumber;
const int CMEMarketDataEntry::kNetChgPrevDayMantissaFieldNumber;
const int CMEMarketDataEntry::kTickDirectionFieldNumber;
const int CMEMarketDataEntry::kOpenCloseSettleFlagFieldNumber;
const int CMEMarketDataEntry::kSettlDateFieldNumber;
const int CMEMarketDataEntry::kTradeVolumeFieldNumber;
const int CMEMarketDataEntry::kTradeConditionFieldNumber;
const int CMEMarketDataEntry::kAggressorSideFieldNumber;
const int CMEMarketDataEntry::kMDQuoteTypeFieldNumber;
const int CMEMarketDataEntry::kTradeIDFieldNumber;
#endif  // !_MSC_VER

CMEMarketDataEntry::CMEMarketDataEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMEMarketDataEntry::InitAsDefaultInstance() {
}

CMEMarketDataEntry::CMEMarketDataEntry(const CMEMarketDataEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMEMarketDataEntry::SharedCtor() {
  _cached_size_ = 0;
  mdupdateaction_ = 0u;
  mdpricelevel_ = 0u;
  mdentrytype_ = 48;
  securityidsource_ = 0u;
  securityid_ = 0u;
  rptseq_ = 0u;
  quotecondition_ = 75;
  mdentrypxexponent_ = 0;
  mdentrypxmantissa_ = GOOGLE_LONGLONG(0);
  numberoforders_ = 0u;
  mdentrytime_ = 0u;
  mdentrysize_ = 0;
  tradingsessionid_ = 48;
  netchgprevdayexponent_ = 0;
  netchgprevdaymantissa_ = GOOGLE_LONGLONG(0);
  tickdirection_ = 48;
  openclosesettleflag_ = 0u;
  settldate_ = 0u;
  tradevolume_ = 0u;
  tradecondition_ = 69;
  aggressorside_ = 0u;
  mdquotetype_ = 0u;
  tradeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMEMarketDataEntry::~CMEMarketDataEntry() {
  SharedDtor();
}

void CMEMarketDataEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMEMarketDataEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMEMarketDataEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataEntry_descriptor_;
}

const CMEMarketDataEntry& CMEMarketDataEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();  return *default_instance_;
}

CMEMarketDataEntry* CMEMarketDataEntry::default_instance_ = NULL;

CMEMarketDataEntry* CMEMarketDataEntry::New() const {
  return new CMEMarketDataEntry;
}

void CMEMarketDataEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mdupdateaction_ = 0u;
    mdpricelevel_ = 0u;
    mdentrytype_ = 48;
    securityidsource_ = 0u;
    securityid_ = 0u;
    rptseq_ = 0u;
    quotecondition_ = 75;
    mdentrypxexponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mdentrypxmantissa_ = GOOGLE_LONGLONG(0);
    numberoforders_ = 0u;
    mdentrytime_ = 0u;
    mdentrysize_ = 0;
    tradingsessionid_ = 48;
    netchgprevdayexponent_ = 0;
    netchgprevdaymantissa_ = GOOGLE_LONGLONG(0);
    tickdirection_ = 48;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    openclosesettleflag_ = 0u;
    settldate_ = 0u;
    tradevolume_ = 0u;
    tradecondition_ = 69;
    aggressorside_ = 0u;
    mdquotetype_ = 0u;
    tradeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMEMarketDataEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MDUpdateAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdupdateaction_)));
          set_has_mdupdateaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MDPriceLevel;
        break;
      }
      
      // optional uint32 MDPriceLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDPriceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdpricelevel_)));
          set_has_mdpricelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MDEntryType;
        break;
      }
      
      // required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDEntryType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataEntry_CMEEntryType_IsValid(value)) {
            set_mdentrytype(static_cast< ::fast_engine::CMEMarketDataEntry_CMEEntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SecurityIDSource;
        break;
      }
      
      // required uint32 SecurityIDSource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecurityIDSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securityidsource_)));
          set_has_securityidsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SecurityID;
        break;
      }
      
      // required uint32 SecurityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecurityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securityid_)));
          set_has_securityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RptSeq;
        break;
      }
      
      // required uint32 RptSeq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RptSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rptseq_)));
          set_has_rptseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_QuoteCondition;
        break;
      }
      
      // optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuoteCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataEntry_CMEQuoteCondition_IsValid(value)) {
            set_quotecondition(static_cast< ::fast_engine::CMEMarketDataEntry_CMEQuoteCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MDEntryPxExponent;
        break;
      }
      
      // required int32 MDEntryPxExponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDEntryPxExponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdentrypxexponent_)));
          set_has_mdentrypxexponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MDEntryPxMantissa;
        break;
      }
      
      // required int64 MDEntryPxMantissa = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDEntryPxMantissa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mdentrypxmantissa_)));
          set_has_mdentrypxmantissa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NumberOfOrders;
        break;
      }
      
      // optional uint32 NumberOfOrders = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NumberOfOrders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberoforders_)));
          set_has_numberoforders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MDEntryTime;
        break;
      }
      
      // required uint32 MDEntryTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDEntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdentrytime_)));
          set_has_mdentrytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MDEntrySize;
        break;
      }
      
      // optional int32 MDEntrySize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDEntrySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdentrysize_)));
          set_has_mdentrysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TradingSessionID;
        break;
      }
      
      // optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradingSessionID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataEntry_CMETradingSessionID_IsValid(value)) {
            set_tradingsessionid(static_cast< ::fast_engine::CMEMarketDataEntry_CMETradingSessionID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_NetChgPrevDayExponent;
        break;
      }
      
      // optional int32 NetChgPrevDayExponent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NetChgPrevDayExponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netchgprevdayexponent_)));
          set_has_netchgprevdayexponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_NetChgPrevDayMantissa;
        break;
      }
      
      // optional int64 NetChgPrevDayMantissa = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NetChgPrevDayMantissa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &netchgprevdaymantissa_)));
          set_has_netchgprevdaymantissa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_TickDirection;
        break;
      }
      
      // optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TickDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataEntry_CMETickDirection_IsValid(value)) {
            set_tickdirection(static_cast< ::fast_engine::CMEMarketDataEntry_CMETickDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_OpenCloseSettleFlag;
        break;
      }
      
      // optional uint32 OpenCloseSettleFlag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenCloseSettleFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openclosesettleflag_)));
          set_has_openclosesettleflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SettlDate;
        break;
      }
      
      // optional uint32 SettlDate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settldate_)));
          set_has_settldate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_TradeVolume;
        break;
      }
      
      // optional uint32 TradeVolume = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradevolume_)));
          set_has_tradevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_TradeCondition;
        break;
      }
      
      // optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataEntry_CMETradeCondition_IsValid(value)) {
            set_tradecondition(static_cast< ::fast_engine::CMEMarketDataEntry_CMETradeCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_AggressorSide;
        break;
      }
      
      // optional uint32 AggressorSide = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AggressorSide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aggressorside_)));
          set_has_aggressorside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_MDQuoteType;
        break;
      }
      
      // optional uint32 MDQuoteType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDQuoteType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdquotetype_)));
          set_has_mdquotetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_TradeID;
        break;
      }
      
      // optional uint32 TradeID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradeid_)));
          set_has_tradeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMEMarketDataEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MDUpdateAction = 1;
  if (has_mdupdateaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mdupdateaction(), output);
  }
  
  // optional uint32 MDPriceLevel = 2;
  if (has_mdpricelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mdpricelevel(), output);
  }
  
  // required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
  if (has_mdentrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mdentrytype(), output);
  }
  
  // required uint32 SecurityIDSource = 4;
  if (has_securityidsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->securityidsource(), output);
  }
  
  // required uint32 SecurityID = 5;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->securityid(), output);
  }
  
  // required uint32 RptSeq = 6;
  if (has_rptseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rptseq(), output);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
  if (has_quotecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->quotecondition(), output);
  }
  
  // required int32 MDEntryPxExponent = 8;
  if (has_mdentrypxexponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mdentrypxexponent(), output);
  }
  
  // required int64 MDEntryPxMantissa = 9;
  if (has_mdentrypxmantissa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mdentrypxmantissa(), output);
  }
  
  // optional uint32 NumberOfOrders = 10;
  if (has_numberoforders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->numberoforders(), output);
  }
  
  // required uint32 MDEntryTime = 11;
  if (has_mdentrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mdentrytime(), output);
  }
  
  // optional int32 MDEntrySize = 12;
  if (has_mdentrysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mdentrysize(), output);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
  if (has_tradingsessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->tradingsessionid(), output);
  }
  
  // optional int32 NetChgPrevDayExponent = 14;
  if (has_netchgprevdayexponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->netchgprevdayexponent(), output);
  }
  
  // optional int64 NetChgPrevDayMantissa = 15;
  if (has_netchgprevdaymantissa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->netchgprevdaymantissa(), output);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
  if (has_tickdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->tickdirection(), output);
  }
  
  // optional uint32 OpenCloseSettleFlag = 17;
  if (has_openclosesettleflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->openclosesettleflag(), output);
  }
  
  // optional uint32 SettlDate = 18;
  if (has_settldate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->settldate(), output);
  }
  
  // optional uint32 TradeVolume = 19;
  if (has_tradevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tradevolume(), output);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
  if (has_tradecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->tradecondition(), output);
  }
  
  // optional uint32 AggressorSide = 21;
  if (has_aggressorside()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->aggressorside(), output);
  }
  
  // optional uint32 MDQuoteType = 22;
  if (has_mdquotetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->mdquotetype(), output);
  }
  
  // optional uint32 TradeID = 23;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tradeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMEMarketDataEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MDUpdateAction = 1;
  if (has_mdupdateaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mdupdateaction(), target);
  }
  
  // optional uint32 MDPriceLevel = 2;
  if (has_mdpricelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mdpricelevel(), target);
  }
  
  // required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
  if (has_mdentrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mdentrytype(), target);
  }
  
  // required uint32 SecurityIDSource = 4;
  if (has_securityidsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->securityidsource(), target);
  }
  
  // required uint32 SecurityID = 5;
  if (has_securityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->securityid(), target);
  }
  
  // required uint32 RptSeq = 6;
  if (has_rptseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rptseq(), target);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
  if (has_quotecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->quotecondition(), target);
  }
  
  // required int32 MDEntryPxExponent = 8;
  if (has_mdentrypxexponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mdentrypxexponent(), target);
  }
  
  // required int64 MDEntryPxMantissa = 9;
  if (has_mdentrypxmantissa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mdentrypxmantissa(), target);
  }
  
  // optional uint32 NumberOfOrders = 10;
  if (has_numberoforders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->numberoforders(), target);
  }
  
  // required uint32 MDEntryTime = 11;
  if (has_mdentrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mdentrytime(), target);
  }
  
  // optional int32 MDEntrySize = 12;
  if (has_mdentrysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mdentrysize(), target);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
  if (has_tradingsessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->tradingsessionid(), target);
  }
  
  // optional int32 NetChgPrevDayExponent = 14;
  if (has_netchgprevdayexponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->netchgprevdayexponent(), target);
  }
  
  // optional int64 NetChgPrevDayMantissa = 15;
  if (has_netchgprevdaymantissa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->netchgprevdaymantissa(), target);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
  if (has_tickdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->tickdirection(), target);
  }
  
  // optional uint32 OpenCloseSettleFlag = 17;
  if (has_openclosesettleflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->openclosesettleflag(), target);
  }
  
  // optional uint32 SettlDate = 18;
  if (has_settldate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->settldate(), target);
  }
  
  // optional uint32 TradeVolume = 19;
  if (has_tradevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tradevolume(), target);
  }
  
  // optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
  if (has_tradecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->tradecondition(), target);
  }
  
  // optional uint32 AggressorSide = 21;
  if (has_aggressorside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->aggressorside(), target);
  }
  
  // optional uint32 MDQuoteType = 22;
  if (has_mdquotetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->mdquotetype(), target);
  }
  
  // optional uint32 TradeID = 23;
  if (has_tradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tradeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMEMarketDataEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MDUpdateAction = 1;
    if (has_mdupdateaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdupdateaction());
    }
    
    // optional uint32 MDPriceLevel = 2;
    if (has_mdpricelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdpricelevel());
    }
    
    // required .fast_engine.CMEMarketDataEntry.CMEEntryType MDEntryType = 3;
    if (has_mdentrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mdentrytype());
    }
    
    // required uint32 SecurityIDSource = 4;
    if (has_securityidsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->securityidsource());
    }
    
    // required uint32 SecurityID = 5;
    if (has_securityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->securityid());
    }
    
    // required uint32 RptSeq = 6;
    if (has_rptseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rptseq());
    }
    
    // optional .fast_engine.CMEMarketDataEntry.CMEQuoteCondition QuoteCondition = 7;
    if (has_quotecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quotecondition());
    }
    
    // required int32 MDEntryPxExponent = 8;
    if (has_mdentrypxexponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdentrypxexponent());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 MDEntryPxMantissa = 9;
    if (has_mdentrypxmantissa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mdentrypxmantissa());
    }
    
    // optional uint32 NumberOfOrders = 10;
    if (has_numberoforders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberoforders());
    }
    
    // required uint32 MDEntryTime = 11;
    if (has_mdentrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdentrytime());
    }
    
    // optional int32 MDEntrySize = 12;
    if (has_mdentrysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdentrysize());
    }
    
    // optional .fast_engine.CMEMarketDataEntry.CMETradingSessionID TradingSessionID = 13;
    if (has_tradingsessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradingsessionid());
    }
    
    // optional int32 NetChgPrevDayExponent = 14;
    if (has_netchgprevdayexponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netchgprevdayexponent());
    }
    
    // optional int64 NetChgPrevDayMantissa = 15;
    if (has_netchgprevdaymantissa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->netchgprevdaymantissa());
    }
    
    // optional .fast_engine.CMEMarketDataEntry.CMETickDirection TickDirection = 16;
    if (has_tickdirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tickdirection());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 OpenCloseSettleFlag = 17;
    if (has_openclosesettleflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openclosesettleflag());
    }
    
    // optional uint32 SettlDate = 18;
    if (has_settldate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settldate());
    }
    
    // optional uint32 TradeVolume = 19;
    if (has_tradevolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradevolume());
    }
    
    // optional .fast_engine.CMEMarketDataEntry.CMETradeCondition TradeCondition = 20;
    if (has_tradecondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradecondition());
    }
    
    // optional uint32 AggressorSide = 21;
    if (has_aggressorside()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aggressorside());
    }
    
    // optional uint32 MDQuoteType = 22;
    if (has_mdquotetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdquotetype());
    }
    
    // optional uint32 TradeID = 23;
    if (has_tradeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMEMarketDataEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMEMarketDataEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMEMarketDataEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMEMarketDataEntry::MergeFrom(const CMEMarketDataEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mdupdateaction()) {
      set_mdupdateaction(from.mdupdateaction());
    }
    if (from.has_mdpricelevel()) {
      set_mdpricelevel(from.mdpricelevel());
    }
    if (from.has_mdentrytype()) {
      set_mdentrytype(from.mdentrytype());
    }
    if (from.has_securityidsource()) {
      set_securityidsource(from.securityidsource());
    }
    if (from.has_securityid()) {
      set_securityid(from.securityid());
    }
    if (from.has_rptseq()) {
      set_rptseq(from.rptseq());
    }
    if (from.has_quotecondition()) {
      set_quotecondition(from.quotecondition());
    }
    if (from.has_mdentrypxexponent()) {
      set_mdentrypxexponent(from.mdentrypxexponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mdentrypxmantissa()) {
      set_mdentrypxmantissa(from.mdentrypxmantissa());
    }
    if (from.has_numberoforders()) {
      set_numberoforders(from.numberoforders());
    }
    if (from.has_mdentrytime()) {
      set_mdentrytime(from.mdentrytime());
    }
    if (from.has_mdentrysize()) {
      set_mdentrysize(from.mdentrysize());
    }
    if (from.has_tradingsessionid()) {
      set_tradingsessionid(from.tradingsessionid());
    }
    if (from.has_netchgprevdayexponent()) {
      set_netchgprevdayexponent(from.netchgprevdayexponent());
    }
    if (from.has_netchgprevdaymantissa()) {
      set_netchgprevdaymantissa(from.netchgprevdaymantissa());
    }
    if (from.has_tickdirection()) {
      set_tickdirection(from.tickdirection());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_openclosesettleflag()) {
      set_openclosesettleflag(from.openclosesettleflag());
    }
    if (from.has_settldate()) {
      set_settldate(from.settldate());
    }
    if (from.has_tradevolume()) {
      set_tradevolume(from.tradevolume());
    }
    if (from.has_tradecondition()) {
      set_tradecondition(from.tradecondition());
    }
    if (from.has_aggressorside()) {
      set_aggressorside(from.aggressorside());
    }
    if (from.has_mdquotetype()) {
      set_mdquotetype(from.mdquotetype());
    }
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMEMarketDataEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMEMarketDataEntry::CopyFrom(const CMEMarketDataEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMEMarketDataEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005bd) != 0x000005bd) return false;
  
  return true;
}

void CMEMarketDataEntry::Swap(CMEMarketDataEntry* other) {
  if (other != this) {
    std::swap(mdupdateaction_, other->mdupdateaction_);
    std::swap(mdpricelevel_, other->mdpricelevel_);
    std::swap(mdentrytype_, other->mdentrytype_);
    std::swap(securityidsource_, other->securityidsource_);
    std::swap(securityid_, other->securityid_);
    std::swap(rptseq_, other->rptseq_);
    std::swap(quotecondition_, other->quotecondition_);
    std::swap(mdentrypxexponent_, other->mdentrypxexponent_);
    std::swap(mdentrypxmantissa_, other->mdentrypxmantissa_);
    std::swap(numberoforders_, other->numberoforders_);
    std::swap(mdentrytime_, other->mdentrytime_);
    std::swap(mdentrysize_, other->mdentrysize_);
    std::swap(tradingsessionid_, other->tradingsessionid_);
    std::swap(netchgprevdayexponent_, other->netchgprevdayexponent_);
    std::swap(netchgprevdaymantissa_, other->netchgprevdaymantissa_);
    std::swap(tickdirection_, other->tickdirection_);
    std::swap(openclosesettleflag_, other->openclosesettleflag_);
    std::swap(settldate_, other->settldate_);
    std::swap(tradevolume_, other->tradevolume_);
    std::swap(tradecondition_, other->tradecondition_);
    std::swap(aggressorside_, other->aggressorside_);
    std::swap(mdquotetype_, other->mdquotetype_);
    std::swap(tradeid_, other->tradeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMEMarketDataEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMEMarketDataEntry_descriptor_;
  metadata.reflection = CMEMarketDataEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEStaticField_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataProtobuf_CMEStaticField_descriptor_;
}
bool CMEMarketDataProtobuf_CMEStaticField_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf::STATIC_FIELD_APPL_VER_ID;
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf::STATIC_FIELD_SENDER_COMP_ID;
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf::CMEStaticField_MIN;
const CMEMarketDataProtobuf_CMEStaticField CMEMarketDataProtobuf::CMEStaticField_MAX;
const int CMEMarketDataProtobuf::CMEStaticField_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataProtobuf_CMEMessageType_descriptor_;
}
bool CMEMarketDataProtobuf_CMEMessageType_IsValid(int value) {
  switch(value) {
    case 48:
    case 53:
    case 65:
    case 66:
    case 82:
    case 86:
    case 87:
    case 88:
    case 89:
    case 100:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_HEARTBEAT;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_LOGOUT;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_LOGON;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_NEWS;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_SECURITY_DEFINITION;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_SECURITY_STATUS;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_QUOTE_REQUEST;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_MARKET_DATA_REQUEST;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_MARKET_DATA_FULL_REFRESH;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_MARKET_DATA_INCREMENTAL_REFRESH;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::MESSAGE_TYPE_MARKET_DATA_REQUEST_REJECT;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::CMEMessageType_MIN;
const CMEMarketDataProtobuf_CMEMessageType CMEMarketDataProtobuf::CMEMessageType_MAX;
const int CMEMarketDataProtobuf::CMEMessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketDataProtobuf_CMEPosDupFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataProtobuf_CMEPosDupFlag_descriptor_;
}
bool CMEMarketDataProtobuf_CMEPosDupFlag_IsValid(int value) {
  switch(value) {
    case 78:
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf::POSSIBLE_DUPLICATE;
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf::ORIGINAL_TRANSMISSION;
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf::CMEPosDupFlag_MIN;
const CMEMarketDataProtobuf_CMEPosDupFlag CMEMarketDataProtobuf::CMEPosDupFlag_MAX;
const int CMEMarketDataProtobuf::CMEPosDupFlag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMEMarketDataProtobuf::kMessageTypeFieldNumber;
const int CMEMarketDataProtobuf::kMsgSeqNumFieldNumber;
const int CMEMarketDataProtobuf::kSendingTimeFieldNumber;
const int CMEMarketDataProtobuf::kPosDupFlagFieldNumber;
const int CMEMarketDataProtobuf::kTradeDateFieldNumber;
const int CMEMarketDataProtobuf::kMDEntriesFieldNumber;
#endif  // !_MSC_VER

CMEMarketDataProtobuf::CMEMarketDataProtobuf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMEMarketDataProtobuf::InitAsDefaultInstance() {
}

CMEMarketDataProtobuf::CMEMarketDataProtobuf(const CMEMarketDataProtobuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMEMarketDataProtobuf::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 48;
  msgseqnum_ = 0u;
  sendingtime_ = GOOGLE_ULONGLONG(0);
  posdupflag_ = 89;
  tradedate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMEMarketDataProtobuf::~CMEMarketDataProtobuf() {
  SharedDtor();
}

void CMEMarketDataProtobuf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMEMarketDataProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMEMarketDataProtobuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketDataProtobuf_descriptor_;
}

const CMEMarketDataProtobuf& CMEMarketDataProtobuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CMEMarketDataProtobuf_2eproto();  return *default_instance_;
}

CMEMarketDataProtobuf* CMEMarketDataProtobuf::default_instance_ = NULL;

CMEMarketDataProtobuf* CMEMarketDataProtobuf::New() const {
  return new CMEMarketDataProtobuf;
}

void CMEMarketDataProtobuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 48;
    msgseqnum_ = 0u;
    sendingtime_ = GOOGLE_ULONGLONG(0);
    posdupflag_ = 89;
    tradedate_ = 0u;
  }
  mdentries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMEMarketDataProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataProtobuf_CMEMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::fast_engine::CMEMarketDataProtobuf_CMEMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MsgSeqNum;
        break;
      }
      
      // required uint32 MsgSeqNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgSeqNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgseqnum_)));
          set_has_msgseqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SendingTime;
        break;
      }
      
      // required uint64 SendingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendingtime_)));
          set_has_sendingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PosDupFlag;
        break;
      }
      
      // optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosDupFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag_IsValid(value)) {
            set_posdupflag(static_cast< ::fast_engine::CMEMarketDataProtobuf_CMEPosDupFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TradeDate;
        break;
      }
      
      // required uint32 TradeDate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradedate_)));
          set_has_tradedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MDEntries;
        break;
      }
      
      // repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MDEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mdentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MDEntries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMEMarketDataProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }
  
  // required uint32 MsgSeqNum = 2;
  if (has_msgseqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgseqnum(), output);
  }
  
  // required uint64 SendingTime = 3;
  if (has_sendingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendingtime(), output);
  }
  
  // optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
  if (has_posdupflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->posdupflag(), output);
  }
  
  // required uint32 TradeDate = 5;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tradedate(), output);
  }
  
  // repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
  for (int i = 0; i < this->mdentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mdentries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMEMarketDataProtobuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }
  
  // required uint32 MsgSeqNum = 2;
  if (has_msgseqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgseqnum(), target);
  }
  
  // required uint64 SendingTime = 3;
  if (has_sendingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendingtime(), target);
  }
  
  // optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
  if (has_posdupflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->posdupflag(), target);
  }
  
  // required uint32 TradeDate = 5;
  if (has_tradedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tradedate(), target);
  }
  
  // repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
  for (int i = 0; i < this->mdentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mdentries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMEMarketDataProtobuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fast_engine.CMEMarketDataProtobuf.CMEMessageType MessageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }
    
    // required uint32 MsgSeqNum = 2;
    if (has_msgseqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgseqnum());
    }
    
    // required uint64 SendingTime = 3;
    if (has_sendingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendingtime());
    }
    
    // optional .fast_engine.CMEMarketDataProtobuf.CMEPosDupFlag PosDupFlag = 4;
    if (has_posdupflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->posdupflag());
    }
    
    // required uint32 TradeDate = 5;
    if (has_tradedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradedate());
    }
    
  }
  // repeated .fast_engine.CMEMarketDataEntry MDEntries = 6;
  total_size += 1 * this->mdentries_size();
  for (int i = 0; i < this->mdentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mdentries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMEMarketDataProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMEMarketDataProtobuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMEMarketDataProtobuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMEMarketDataProtobuf::MergeFrom(const CMEMarketDataProtobuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mdentries_.MergeFrom(from.mdentries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_msgseqnum()) {
      set_msgseqnum(from.msgseqnum());
    }
    if (from.has_sendingtime()) {
      set_sendingtime(from.sendingtime());
    }
    if (from.has_posdupflag()) {
      set_posdupflag(from.posdupflag());
    }
    if (from.has_tradedate()) {
      set_tradedate(from.tradedate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMEMarketDataProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMEMarketDataProtobuf::CopyFrom(const CMEMarketDataProtobuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMEMarketDataProtobuf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  for (int i = 0; i < mdentries_size(); i++) {
    if (!this->mdentries(i).IsInitialized()) return false;
  }
  return true;
}

void CMEMarketDataProtobuf::Swap(CMEMarketDataProtobuf* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(msgseqnum_, other->msgseqnum_);
    std::swap(sendingtime_, other->sendingtime_);
    std::swap(posdupflag_, other->posdupflag_);
    std::swap(tradedate_, other->tradedate_);
    mdentries_.Swap(&other->mdentries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMEMarketDataProtobuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMEMarketDataProtobuf_descriptor_;
  metadata.reflection = CMEMarketDataProtobuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fast_engine

// @@protoc_insertion_point(global_scope)
