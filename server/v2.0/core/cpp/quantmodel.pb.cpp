// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quantmodel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace quantmodel {

namespace {

const ::google::protobuf::Descriptor* FixMarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixMarketData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FixMarketData_EntryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMEMarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMEMarketData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketData_EntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketData_UpdateAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMEMarketData_AggressorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FastEngineBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastEngineBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FastEngineBroadcast_BroadcastType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FixEngineBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixEngineBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataPriceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataPriceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataTradeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataTradeData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDataTradeData_AggressorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarketDataQuoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataQuoteData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDataQuoteData_QuoteType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarketDataBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDataBroadcast_BroadcastType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixEngineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixEngineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemParameterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemParameterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionOvernightData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionOvernightData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionOvernightData_PositionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountLimitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLimitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DraftOrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftOrderData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DraftOrderData_SideCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DraftOrderData_OrderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DraftOrderData_TimeInForce_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DraftAllocationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftAllocationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderData_SideCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderData_OrderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderData_OrderStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderData_TimeInForce_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllocationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountStrategyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountStrategyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionReportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionReportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DraftOrderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftOrderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineRequest_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineRequest_Query_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DatabaseEngineRequest_QueryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineResponse_ResultSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet_Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineResponse_ResultSet_Row_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet_Row_Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseEngineResponse_ResultSet_Row_Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealingEngineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealingEngineRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DealingEngineRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DealingEngineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealingEngineResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DealingEngineResponse_ResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DealingEngineBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealingEngineBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DealingEngineBroadcast_BroadcastType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FixEngineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixEngineRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FixEngineRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FixEngineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixEngineResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FixEngineResponse_ResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientAdapterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAdapterRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientAdapterRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientAdapterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAdapterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientAdapterResponse_ResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientAdapterBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAdapterBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientAdapterBroadcast_BroadcastType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemResponse_ResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestmentSystemBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestmentSystemBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvestmentSystemBroadcast_BroadcastType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_quantmodel_2eproto() {
  protobuf_AddDesc_quantmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quantmodel.proto");
  GOOGLE_CHECK(file != NULL);
  FixMarketData_descriptor_ = file->message_type(0);
  static const int FixMarketData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, sending_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, entry_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, entry_size_),
  };
  FixMarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixMarketData_descriptor_,
      FixMarketData::default_instance_,
      FixMarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixMarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixMarketData));
  FixMarketData_EntryType_descriptor_ = FixMarketData_descriptor_->enum_type(0);
  CMEMarketData_descriptor_ = file->message_type(1);
  static const int CMEMarketData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, sending_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, is_implied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, entry_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, entry_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, price_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, entry_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, aggressor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, mantissa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, exponent_),
  };
  CMEMarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMEMarketData_descriptor_,
      CMEMarketData::default_instance_,
      CMEMarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMEMarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMEMarketData));
  CMEMarketData_EntryType_descriptor_ = CMEMarketData_descriptor_->enum_type(0);
  CMEMarketData_UpdateAction_descriptor_ = CMEMarketData_descriptor_->enum_type(1);
  CMEMarketData_AggressorType_descriptor_ = CMEMarketData_descriptor_->enum_type(2);
  FastEngineBroadcast_descriptor_ = file->message_type(2);
  static const int FastEngineBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEngineBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEngineBroadcast, broadcast_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEngineBroadcast, cme_market_data_),
  };
  FastEngineBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastEngineBroadcast_descriptor_,
      FastEngineBroadcast::default_instance_,
      FastEngineBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEngineBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEngineBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastEngineBroadcast));
  FastEngineBroadcast_BroadcastType_descriptor_ = FastEngineBroadcast_descriptor_->enum_type(0);
  FixEngineBroadcast_descriptor_ = file->message_type(3);
  static const int FixEngineBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineBroadcast, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineBroadcast, fix_market_data_),
  };
  FixEngineBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixEngineBroadcast_descriptor_,
      FixEngineBroadcast::default_instance_,
      FixEngineBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixEngineBroadcast));
  MarketDataPriceData_descriptor_ = file->message_type(4);
  static const int MarketDataPriceData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataPriceData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataPriceData, last_prc_),
  };
  MarketDataPriceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataPriceData_descriptor_,
      MarketDataPriceData::default_instance_,
      MarketDataPriceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataPriceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataPriceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataPriceData));
  MarketDataTradeData_descriptor_ = file->message_type(5);
  static const int MarketDataTradeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, aggressor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, trade_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, trade_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, entry_tm_),
  };
  MarketDataTradeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataTradeData_descriptor_,
      MarketDataTradeData::default_instance_,
      MarketDataTradeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataTradeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataTradeData));
  MarketDataTradeData_AggressorType_descriptor_ = MarketDataTradeData_descriptor_->enum_type(0);
  MarketDataQuoteData_descriptor_ = file->message_type(6);
  static const int MarketDataQuoteData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, quote_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, quote_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, orders_),
  };
  MarketDataQuoteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataQuoteData_descriptor_,
      MarketDataQuoteData::default_instance_,
      MarketDataQuoteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataQuoteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataQuoteData));
  MarketDataQuoteData_QuoteType_descriptor_ = MarketDataQuoteData_descriptor_->enum_type(0);
  MarketDataBroadcast_descriptor_ = file->message_type(7);
  static const int MarketDataBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, price_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, trade_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, quote_data_),
  };
  MarketDataBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataBroadcast_descriptor_,
      MarketDataBroadcast::default_instance_,
      MarketDataBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataBroadcast));
  MarketDataBroadcast_BroadcastType_descriptor_ = MarketDataBroadcast_descriptor_->enum_type(0);
  HeartbeatData_descriptor_ = file->message_type(8);
  static const int HeartbeatData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatData, heartbeat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatData, timestamp_),
  };
  HeartbeatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatData_descriptor_,
      HeartbeatData::default_instance_,
      HeartbeatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatData));
  FixEngineData_descriptor_ = file->message_type(9);
  static const int FixEngineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineData, fix_engine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineData, session_id_),
  };
  FixEngineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixEngineData_descriptor_,
      FixEngineData::default_instance_,
      FixEngineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixEngineData));
  SystemParameterData_descriptor_ = file->message_type(10);
  static const int SystemParameterData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, parameter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, value_),
  };
  SystemParameterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemParameterData_descriptor_,
      SystemParameterData::default_instance_,
      SystemParameterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemParameterData));
  PositionOvernightData_descriptor_ = file->message_type(11);
  static const int PositionOvernightData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, position_overnight_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, position_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, open_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, open_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, updated_by_),
  };
  PositionOvernightData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionOvernightData_descriptor_,
      PositionOvernightData::default_instance_,
      PositionOvernightData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOvernightData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionOvernightData));
  PositionOvernightData_PositionType_descriptor_ = PositionOvernightData_descriptor_->enum_type(0);
  AccountLimitData_descriptor_ = file->message_type(12);
  static const int AccountLimitData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, security_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, max_open_long_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, max_open_short_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, max_release_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, updated_by_),
  };
  AccountLimitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLimitData_descriptor_,
      AccountLimitData::default_instance_,
      AccountLimitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLimitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLimitData));
  DraftOrderData_descriptor_ = file->message_type(13);
  static const int DraftOrderData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, external_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, tif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, limit_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, stop_prc_),
  };
  DraftOrderData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftOrderData_descriptor_,
      DraftOrderData::default_instance_,
      DraftOrderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftOrderData));
  DraftOrderData_SideCode_descriptor_ = DraftOrderData_descriptor_->enum_type(0);
  DraftOrderData_OrderType_descriptor_ = DraftOrderData_descriptor_->enum_type(1);
  DraftOrderData_TimeInForce_descriptor_ = DraftOrderData_descriptor_->enum_type(2);
  DraftAllocationData_descriptor_ = file->message_type(14);
  static const int DraftAllocationData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftAllocationData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftAllocationData, allocation_qty_),
  };
  DraftAllocationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftAllocationData_descriptor_,
      DraftAllocationData::default_instance_,
      DraftAllocationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftAllocationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftAllocationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftAllocationData));
  AccountData_descriptor_ = file->message_type(15);
  static const int AccountData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, parent_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, market_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, custody_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, giveup_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, giveup_firm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, notional_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, profit_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, stop_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, signal_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, is_suppressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, contact_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, contact_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, contact_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, trading_firm_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, trading_firm_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, trading_firm_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, updated_by_),
  };
  AccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountData_descriptor_,
      AccountData::default_instance_,
      AccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountData));
  OrderData_descriptor_ = file->message_type(16);
  static const int OrderData_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, external_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, tif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, base_ccy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, open_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, released_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, executed_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, limit_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, stop_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, mark_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, average_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, entry_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, released_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, executed_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, updated_by_),
  };
  OrderData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderData_descriptor_,
      OrderData::default_instance_,
      OrderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderData));
  OrderData_SideCode_descriptor_ = OrderData_descriptor_->enum_type(0);
  OrderData_OrderType_descriptor_ = OrderData_descriptor_->enum_type(1);
  OrderData_OrderStatus_descriptor_ = OrderData_descriptor_->enum_type(2);
  OrderData_TimeInForce_descriptor_ = OrderData_descriptor_->enum_type(3);
  AllocationData_descriptor_ = file->message_type(17);
  static const int AllocationData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, allocation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, allocation_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, released_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, executed_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, executed_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, average_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, updated_by_),
  };
  AllocationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocationData_descriptor_,
      AllocationData::default_instance_,
      AllocationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocationData));
  ReleaseData_descriptor_ = file->message_type(18);
  static const int ReleaseData_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, release_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, allocation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, compliance_audit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, client_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, counterparty_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, release_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, release_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, tif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, release_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, limit_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, stop_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, average_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, executed_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, executed_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, updated_by_),
  };
  ReleaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseData_descriptor_,
      ReleaseData::default_instance_,
      ReleaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseData));
  ExecutionData_descriptor_ = file->message_type(19);
  static const int ExecutionData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, release_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, client_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, counterparty_execution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_ccy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, execution_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, leaves_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, average_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, leg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, updated_by_),
  };
  ExecutionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionData_descriptor_,
      ExecutionData::default_instance_,
      ExecutionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionData));
  InstrumentData_descriptor_ = file->message_type(20);
  static const int InstrumentData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, instrument_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, cusip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, sedol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, isin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, ric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, cfi_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, security_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, maturity_month_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, base_ccy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, last_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, mark_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, mark_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, exchange_price_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, rollover_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, added_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, added_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, updated_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, updated_by_),
  };
  InstrumentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentData_descriptor_,
      InstrumentData::default_instance_,
      InstrumentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentData));
  SignalData_descriptor_ = file->message_type(21);
  static const int SignalData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, external_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, instrument_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, side_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, signal_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, limit_prc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, stop_prc_),
  };
  SignalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalData_descriptor_,
      SignalData::default_instance_,
      SignalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalData));
  InvestmentSystemData_descriptor_ = file->message_type(22);
  static const int InvestmentSystemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemData, is_active_),
  };
  InvestmentSystemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemData_descriptor_,
      InvestmentSystemData::default_instance_,
      InvestmentSystemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemData));
  StrategyData_descriptor_ = file->message_type(23);
  static const int StrategyData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, investment_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, default_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, is_active_),
  };
  StrategyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategyData_descriptor_,
      StrategyData::default_instance_,
      StrategyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategyData));
  AccountStrategyData_descriptor_ = file->message_type(24);
  static const int AccountStrategyData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, is_enabled_),
  };
  AccountStrategyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountStrategyData_descriptor_,
      AccountStrategyData::default_instance_,
      AccountStrategyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStrategyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountStrategyData));
  ExecutionReportData_descriptor_ = file->message_type(25);
  static const int ExecutionReportData_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, release_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, sending_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, execid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, clordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, origclordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, execrefid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, ordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, exectype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, exectranstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, multilegreportingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, securityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, idsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, ordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, maturitymonthyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, transacttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, cumqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, orderqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, leavesqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, lastshares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, avgpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, lastpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, stoppx_),
  };
  ExecutionReportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionReportData_descriptor_,
      ExecutionReportData::default_instance_,
      ExecutionReportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionReportData));
  DraftOrderMessage_descriptor_ = file->message_type(26);
  static const int DraftOrderMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderMessage, draft_order_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderMessage, draft_allocation_data_),
  };
  DraftOrderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftOrderMessage_descriptor_,
      DraftOrderMessage::default_instance_,
      DraftOrderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftOrderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftOrderMessage));
  OrderMessage_descriptor_ = file->message_type(27);
  static const int OrderMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, order_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, allocation_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, release_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, execution_data_),
  };
  OrderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderMessage_descriptor_,
      OrderMessage::default_instance_,
      OrderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderMessage));
  DatabaseEngineRequest_descriptor_ = file->message_type(28);
  static const int DatabaseEngineRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest, query_),
  };
  DatabaseEngineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineRequest_descriptor_,
      DatabaseEngineRequest::default_instance_,
      DatabaseEngineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineRequest));
  DatabaseEngineRequest_Query_descriptor_ = DatabaseEngineRequest_descriptor_->nested_type(0);
  static const int DatabaseEngineRequest_Query_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest_Query, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest_Query, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest_Query, query_str_),
  };
  DatabaseEngineRequest_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineRequest_Query_descriptor_,
      DatabaseEngineRequest_Query::default_instance_,
      DatabaseEngineRequest_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineRequest_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineRequest_Query));
  DatabaseEngineRequest_QueryType_descriptor_ = DatabaseEngineRequest_descriptor_->enum_type(0);
  DatabaseEngineResponse_descriptor_ = file->message_type(29);
  static const int DatabaseEngineResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, result_set_),
  };
  DatabaseEngineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineResponse_descriptor_,
      DatabaseEngineResponse::default_instance_,
      DatabaseEngineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineResponse));
  DatabaseEngineResponse_ResultSet_descriptor_ = DatabaseEngineResponse_descriptor_->nested_type(0);
  static const int DatabaseEngineResponse_ResultSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet, row_),
  };
  DatabaseEngineResponse_ResultSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineResponse_ResultSet_descriptor_,
      DatabaseEngineResponse_ResultSet::default_instance_,
      DatabaseEngineResponse_ResultSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineResponse_ResultSet));
  DatabaseEngineResponse_ResultSet_Row_descriptor_ = DatabaseEngineResponse_ResultSet_descriptor_->nested_type(0);
  static const int DatabaseEngineResponse_ResultSet_Row_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row, row_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row, column_),
  };
  DatabaseEngineResponse_ResultSet_Row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineResponse_ResultSet_Row_descriptor_,
      DatabaseEngineResponse_ResultSet_Row::default_instance_,
      DatabaseEngineResponse_ResultSet_Row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineResponse_ResultSet_Row));
  DatabaseEngineResponse_ResultSet_Row_Column_descriptor_ = DatabaseEngineResponse_ResultSet_Row_descriptor_->nested_type(0);
  static const int DatabaseEngineResponse_ResultSet_Row_Column_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row_Column, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row_Column, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row_Column, value_),
  };
  DatabaseEngineResponse_ResultSet_Row_Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseEngineResponse_ResultSet_Row_Column_descriptor_,
      DatabaseEngineResponse_ResultSet_Row_Column::default_instance_,
      DatabaseEngineResponse_ResultSet_Row_Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row_Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseEngineResponse_ResultSet_Row_Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseEngineResponse_ResultSet_Row_Column));
  DealingEngineRequest_descriptor_ = file->message_type(30);
  static const int DealingEngineRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, draft_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, execution_report_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, fix_engine_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, instrument_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, account_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, investment_system_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, signal_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, system_parameter_data_),
  };
  DealingEngineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealingEngineRequest_descriptor_,
      DealingEngineRequest::default_instance_,
      DealingEngineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealingEngineRequest));
  DealingEngineRequest_RequestType_descriptor_ = DealingEngineRequest_descriptor_->enum_type(0);
  DealingEngineResponse_descriptor_ = file->message_type(31);
  static const int DealingEngineResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, draft_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, system_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, account_limit_),
  };
  DealingEngineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealingEngineResponse_descriptor_,
      DealingEngineResponse::default_instance_,
      DealingEngineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealingEngineResponse));
  DealingEngineResponse_ResponseType_descriptor_ = DealingEngineResponse_descriptor_->enum_type(0);
  DealingEngineBroadcast_descriptor_ = file->message_type(32);
  static const int DealingEngineBroadcast_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, fix_engine_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, system_parameter_),
  };
  DealingEngineBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealingEngineBroadcast_descriptor_,
      DealingEngineBroadcast::default_instance_,
      DealingEngineBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealingEngineBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealingEngineBroadcast));
  DealingEngineBroadcast_BroadcastType_descriptor_ = DealingEngineBroadcast_descriptor_->enum_type(0);
  FixEngineRequest_descriptor_ = file->message_type(33);
  static const int FixEngineRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, release_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, instrument_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, account_data_),
  };
  FixEngineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixEngineRequest_descriptor_,
      FixEngineRequest::default_instance_,
      FixEngineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixEngineRequest));
  FixEngineRequest_RequestType_descriptor_ = FixEngineRequest_descriptor_->enum_type(0);
  FixEngineResponse_descriptor_ = file->message_type(34);
  static const int FixEngineResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, error_msg_),
  };
  FixEngineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixEngineResponse_descriptor_,
      FixEngineResponse::default_instance_,
      FixEngineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEngineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixEngineResponse));
  FixEngineResponse_ResponseType_descriptor_ = FixEngineResponse_descriptor_->enum_type(0);
  ClientAdapterRequest_descriptor_ = file->message_type(35);
  static const int ClientAdapterRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, dealing_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, database_request_),
  };
  ClientAdapterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAdapterRequest_descriptor_,
      ClientAdapterRequest::default_instance_,
      ClientAdapterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAdapterRequest));
  ClientAdapterRequest_RequestType_descriptor_ = ClientAdapterRequest_descriptor_->enum_type(0);
  ClientAdapterResponse_descriptor_ = file->message_type(36);
  static const int ClientAdapterResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, dealing_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, database_response_),
  };
  ClientAdapterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAdapterResponse_descriptor_,
      ClientAdapterResponse::default_instance_,
      ClientAdapterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAdapterResponse));
  ClientAdapterResponse_ResponseType_descriptor_ = ClientAdapterResponse_descriptor_->enum_type(0);
  ClientAdapterBroadcast_descriptor_ = file->message_type(37);
  static const int ClientAdapterBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, dealing_broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, marketdata_broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, heartbeat_data_),
  };
  ClientAdapterBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAdapterBroadcast_descriptor_,
      ClientAdapterBroadcast::default_instance_,
      ClientAdapterBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAdapterBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAdapterBroadcast));
  ClientAdapterBroadcast_BroadcastType_descriptor_ = ClientAdapterBroadcast_descriptor_->enum_type(0);
  InvestmentSystemRequest_descriptor_ = file->message_type(38);
  static const int InvestmentSystemRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, delegate_),
  };
  InvestmentSystemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemRequest_descriptor_,
      InvestmentSystemRequest::default_instance_,
      InvestmentSystemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemRequest));
  InvestmentSystemRequest_RequestType_descriptor_ = InvestmentSystemRequest_descriptor_->enum_type(0);
  InvestmentSystemResponse_descriptor_ = file->message_type(39);
  static const int InvestmentSystemResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, delegate_),
  };
  InvestmentSystemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemResponse_descriptor_,
      InvestmentSystemResponse::default_instance_,
      InvestmentSystemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemResponse));
  InvestmentSystemResponse_ResponseType_descriptor_ = InvestmentSystemResponse_descriptor_->enum_type(0);
  InvestmentSystemBroadcast_descriptor_ = file->message_type(40);
  static const int InvestmentSystemBroadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, delegate_),
  };
  InvestmentSystemBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestmentSystemBroadcast_descriptor_,
      InvestmentSystemBroadcast::default_instance_,
      InvestmentSystemBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestmentSystemBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestmentSystemBroadcast));
  InvestmentSystemBroadcast_BroadcastType_descriptor_ = InvestmentSystemBroadcast_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quantmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixMarketData_descriptor_, &FixMarketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMEMarketData_descriptor_, &CMEMarketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastEngineBroadcast_descriptor_, &FastEngineBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixEngineBroadcast_descriptor_, &FixEngineBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataPriceData_descriptor_, &MarketDataPriceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataTradeData_descriptor_, &MarketDataTradeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataQuoteData_descriptor_, &MarketDataQuoteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataBroadcast_descriptor_, &MarketDataBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatData_descriptor_, &HeartbeatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixEngineData_descriptor_, &FixEngineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemParameterData_descriptor_, &SystemParameterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionOvernightData_descriptor_, &PositionOvernightData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLimitData_descriptor_, &AccountLimitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftOrderData_descriptor_, &DraftOrderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftAllocationData_descriptor_, &DraftAllocationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountData_descriptor_, &AccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderData_descriptor_, &OrderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocationData_descriptor_, &AllocationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseData_descriptor_, &ReleaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionData_descriptor_, &ExecutionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentData_descriptor_, &InstrumentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalData_descriptor_, &SignalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemData_descriptor_, &InvestmentSystemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategyData_descriptor_, &StrategyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountStrategyData_descriptor_, &AccountStrategyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionReportData_descriptor_, &ExecutionReportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftOrderMessage_descriptor_, &DraftOrderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderMessage_descriptor_, &OrderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineRequest_descriptor_, &DatabaseEngineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineRequest_Query_descriptor_, &DatabaseEngineRequest_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineResponse_descriptor_, &DatabaseEngineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineResponse_ResultSet_descriptor_, &DatabaseEngineResponse_ResultSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineResponse_ResultSet_Row_descriptor_, &DatabaseEngineResponse_ResultSet_Row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseEngineResponse_ResultSet_Row_Column_descriptor_, &DatabaseEngineResponse_ResultSet_Row_Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealingEngineRequest_descriptor_, &DealingEngineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealingEngineResponse_descriptor_, &DealingEngineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealingEngineBroadcast_descriptor_, &DealingEngineBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixEngineRequest_descriptor_, &FixEngineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixEngineResponse_descriptor_, &FixEngineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAdapterRequest_descriptor_, &ClientAdapterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAdapterResponse_descriptor_, &ClientAdapterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAdapterBroadcast_descriptor_, &ClientAdapterBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemRequest_descriptor_, &InvestmentSystemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemResponse_descriptor_, &InvestmentSystemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestmentSystemBroadcast_descriptor_, &InvestmentSystemBroadcast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quantmodel_2eproto() {
  delete FixMarketData::default_instance_;
  delete FixMarketData_reflection_;
  delete CMEMarketData::default_instance_;
  delete CMEMarketData_reflection_;
  delete FastEngineBroadcast::default_instance_;
  delete FastEngineBroadcast_reflection_;
  delete FixEngineBroadcast::default_instance_;
  delete FixEngineBroadcast_reflection_;
  delete MarketDataPriceData::default_instance_;
  delete MarketDataPriceData_reflection_;
  delete MarketDataTradeData::default_instance_;
  delete MarketDataTradeData_reflection_;
  delete MarketDataQuoteData::default_instance_;
  delete MarketDataQuoteData_reflection_;
  delete MarketDataBroadcast::default_instance_;
  delete MarketDataBroadcast_reflection_;
  delete HeartbeatData::default_instance_;
  delete HeartbeatData_reflection_;
  delete FixEngineData::default_instance_;
  delete FixEngineData_reflection_;
  delete SystemParameterData::default_instance_;
  delete SystemParameterData_reflection_;
  delete PositionOvernightData::default_instance_;
  delete PositionOvernightData_reflection_;
  delete AccountLimitData::default_instance_;
  delete AccountLimitData_reflection_;
  delete DraftOrderData::default_instance_;
  delete DraftOrderData_reflection_;
  delete DraftAllocationData::default_instance_;
  delete DraftAllocationData_reflection_;
  delete AccountData::default_instance_;
  delete AccountData_reflection_;
  delete OrderData::default_instance_;
  delete OrderData_reflection_;
  delete AllocationData::default_instance_;
  delete AllocationData_reflection_;
  delete ReleaseData::default_instance_;
  delete ReleaseData_reflection_;
  delete ExecutionData::default_instance_;
  delete ExecutionData_reflection_;
  delete InstrumentData::default_instance_;
  delete InstrumentData_reflection_;
  delete SignalData::default_instance_;
  delete SignalData_reflection_;
  delete InvestmentSystemData::default_instance_;
  delete InvestmentSystemData_reflection_;
  delete StrategyData::default_instance_;
  delete StrategyData_reflection_;
  delete AccountStrategyData::default_instance_;
  delete AccountStrategyData_reflection_;
  delete ExecutionReportData::default_instance_;
  delete ExecutionReportData_reflection_;
  delete DraftOrderMessage::default_instance_;
  delete DraftOrderMessage_reflection_;
  delete OrderMessage::default_instance_;
  delete OrderMessage_reflection_;
  delete DatabaseEngineRequest::default_instance_;
  delete DatabaseEngineRequest_reflection_;
  delete DatabaseEngineRequest_Query::default_instance_;
  delete DatabaseEngineRequest_Query_reflection_;
  delete DatabaseEngineResponse::default_instance_;
  delete DatabaseEngineResponse_reflection_;
  delete DatabaseEngineResponse_ResultSet::default_instance_;
  delete DatabaseEngineResponse_ResultSet_reflection_;
  delete DatabaseEngineResponse_ResultSet_Row::default_instance_;
  delete DatabaseEngineResponse_ResultSet_Row_reflection_;
  delete DatabaseEngineResponse_ResultSet_Row_Column::default_instance_;
  delete DatabaseEngineResponse_ResultSet_Row_Column_reflection_;
  delete DealingEngineRequest::default_instance_;
  delete DealingEngineRequest_reflection_;
  delete DealingEngineResponse::default_instance_;
  delete DealingEngineResponse_reflection_;
  delete DealingEngineBroadcast::default_instance_;
  delete DealingEngineBroadcast_reflection_;
  delete FixEngineRequest::default_instance_;
  delete FixEngineRequest_reflection_;
  delete FixEngineResponse::default_instance_;
  delete FixEngineResponse_reflection_;
  delete ClientAdapterRequest::default_instance_;
  delete ClientAdapterRequest_reflection_;
  delete ClientAdapterResponse::default_instance_;
  delete ClientAdapterResponse_reflection_;
  delete ClientAdapterBroadcast::default_instance_;
  delete ClientAdapterBroadcast_reflection_;
  delete InvestmentSystemRequest::default_instance_;
  delete InvestmentSystemRequest_reflection_;
  delete InvestmentSystemResponse::default_instance_;
  delete InvestmentSystemResponse_reflection_;
  delete InvestmentSystemBroadcast::default_instance_;
  delete InvestmentSystemBroadcast_reflection_;
}

void protobuf_AddDesc_quantmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020quantmodel.proto\022\nquantmodel\"\355\001\n\rFixMa"
    "rketData\022\025\n\rinstrument_id\030\001 \001(\t\022\022\n\nsendi"
    "ng_tm\030\002 \001(\t\0227\n\nentry_type\030\003 \001(\0162#.quantm"
    "odel.FixMarketData.EntryType\022\025\n\rupdate_a"
    "ction\030\004 \001(\t\022\023\n\010entry_px\030\005 \001(\t:\0010\022\025\n\nentr"
    "y_size\030\006 \001(\t:\0010\"5\n\tEntryType\022\007\n\003BID\020\001\022\007\n"
    "\003ASK\020\002\022\t\n\005TRADE\020\003\022\013\n\007UNKNOWN\020\004\"\332\006\n\rCMEMa"
    "rketData\022\022\n\nsending_tm\030\001 \002(\004\022\023\n\013security"
    "_id\030\002 \002(\r\022=\n\rupdate_action\030\003 \002(\0162&.quant"
    "model.CMEMarketData.UpdateAction\0227\n\nentr"
    "y_type\030\004 \002(\0162#.quantmodel.CMEMarketData."
    "EntryType\022\022\n\nis_implied\030\005 \002(\010\022\025\n\nentry_s"
    "ize\030\006 \001(\005:\0010\022\027\n\010entry_px\030\007 \001(\t:\0010B\002\030\001\022\021\n"
    "\006orders\030\010 \001(\r:\0010\022\026\n\013price_level\030\t \001(\r:\0010"
    "\022\023\n\010entry_tm\030\n \001(\r:\0010\022C\n\taggressor\030\013 \001(\016"
    "2\'.quantmodel.CMEMarketData.AggressorTyp"
    "e:\007UNKNOWN\022\023\n\010mantissa\030\014 \001(\003:\0010\022\023\n\010expon"
    "ent\030\r \001(\005:\0010\"\305\002\n\tEntryType\022\007\n\003BID\020\000\022\007\n\003A"
    "SK\020\001\022\t\n\005TRADE\020\002\022\021\n\rOPENING_PRICE\020\004\022\024\n\020SE"
    "TTLEMENT_PRICE\020\006\022\036\n\032TRADING_SESSION_HIGH"
    "_PRICE\020\007\022\035\n\031TRADING_SESSION_LOW_PRICE\020\010\022"
    "\020\n\014TRADE_VOLUME\020\t\022\021\n\rOPEN_INTEREST\020\n\022\022\n\016"
    "SIMULATED_SELL\020\013\022\021\n\rSIMULATED_BUY\020\014\022\016\n\nE"
    "MPTY_BOOK\020\r\022\t\n\005PRIOR\020\016\022\024\n\020SESSION_HIGH_B"
    "ID\020\017\022\025\n\021SESSION_LOW_OFFER\020\020\022\020\n\014FIXING_PR"
    "ICE\020\021\022\r\n\tCASH_NOTE\020\022\"<\n\014UpdateAction\022\007\n\003"
    "ADD\020\000\022\n\n\006CHANGE\020\001\022\n\n\006DELETE\020\002\022\013\n\007OVERLAY"
    "\020\005\"/\n\rAggressorType\022\013\n\007UNKNOWN\020\000\022\007\n\003BUY\020"
    "\001\022\010\n\004SELL\020\002\"\320\001\n\023FastEngineBroadcast\022\021\n\tt"
    "imestamp\030\001 \002(\t\022E\n\016broadcast_type\030\002 \002(\0162-"
    ".quantmodel.FastEngineBroadcast.Broadcas"
    "tType\0222\n\017cme_market_data\030\003 \003(\0132\031.quantmo"
    "del.CMEMarketData\"+\n\rBroadcastType\022\007\n\003CM"
    "E\020\001\022\007\n\003ICE\020\002\022\010\n\004CBOE\020\003\"r\n\022FixEngineBroad"
    "cast\022\021\n\ttimestamp\030\001 \001(\t\022\025\n\rinstrument_id"
    "\030\002 \001(\t\0222\n\017fix_market_data\030\003 \003(\0132\031.quantm"
    "odel.FixMarketData\"C\n\023MarketDataPriceDat"
    "a\022\025\n\rinstrument_id\030\001 \001(\t\022\025\n\010last_prc\030\002 \001"
    "(\t:\0030.0\"\350\001\n\023MarketDataTradeData\022\025\n\rinstr"
    "ument_id\030\001 \001(\t\022I\n\taggressor\030\002 \001(\0162-.quan"
    "tmodel.MarketDataTradeData.AggressorType"
    ":\007UNKNOWN\022\026\n\ttrade_prc\030\003 \001(\t:\0030.0\022\024\n\ttra"
    "de_qty\030\004 \001(\005:\0010\022\020\n\010entry_tm\030\005 \001(\r\"/\n\rAgg"
    "ressorType\022\013\n\007UNKNOWN\020\000\022\007\n\003BUY\020\001\022\010\n\004SELL"
    "\020\002\"\327\001\n\023MarketDataQuoteData\022\025\n\rinstrument"
    "_id\030\001 \001(\t\0227\n\004type\030\002 \001(\0162).quantmodel.Mar"
    "ketDataQuoteData.QuoteType\022\026\n\tquote_prc\030"
    "\003 \001(\t:\0030.0\022\024\n\tquote_qty\030\004 \001(\005:\0010\022\020\n\005leve"
    "l\030\005 \001(\005:\0010\022\021\n\006orders\030\006 \001(\005:\0010\"\035\n\tQuoteTy"
    "pe\022\007\n\003BID\020\001\022\007\n\003ASK\020\002\"\314\002\n\023MarketDataBroad"
    "cast\022\024\n\014broadcast_id\030\001 \001(\t\022\021\n\ttimestamp\030"
    "\002 \001(\t\022;\n\004type\030\003 \001(\0162-.quantmodel.MarketD"
    "ataBroadcast.BroadcastType\0223\n\nprice_data"
    "\030\005 \003(\0132\037.quantmodel.MarketDataPriceData\022"
    "3\n\ntrade_data\030\006 \003(\0132\037.quantmodel.MarketD"
    "ataTradeData\0223\n\nquote_data\030\007 \003(\0132\037.quant"
    "model.MarketDataQuoteData\"0\n\rBroadcastTy"
    "pe\022\t\n\005PRICE\020\001\022\t\n\005TRADE\020\002\022\t\n\005QUOTE\020\003\"8\n\rH"
    "eartbeatData\022\024\n\014heartbeat_id\030\001 \001(\t\022\021\n\tti"
    "mestamp\030\002 \001(\t\":\n\rFixEngineData\022\025\n\rfix_en"
    "gine_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\"Z\n\023Sys"
    "temParameterData\022\024\n\014parameter_id\030\001 \001(\t\022\020"
    "\n\010category\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\r\n\005value\030"
    "\004 \001(\t\"\214\003\n\025PositionOvernightData\022\035\n\025posit"
    "ion_overnight_id\030\001 \001(\t\022\022\n\naccount_id\030\002 \001"
    "(\t\022\025\n\rinstrument_id\030\003 \001(\t\022\034\n\024investment_"
    "system_id\030\004 \001(\t\022E\n\rposition_type\030\005 \001(\0162."
    ".quantmodel.PositionOvernightData.Positi"
    "onType\022\023\n\010open_pos\030\006 \001(\t:\0010\022\023\n\010open_prc\030"
    "\007 \001(\t:\0010\022\021\n\tis_active\030\010 \001(\t\022\026\n\016added_dat"
    "etime\030\t \001(\t\022\020\n\010added_by\030\n \001(\t\022\030\n\020updated"
    "_datetime\030\013 \001(\t\022\022\n\nupdated_by\030\014 \001(\t\"/\n\014P"
    "ositionType\022\n\n\006CLOSED\020\000\022\010\n\004LONG\020\001\022\t\n\005SHO"
    "RT\020\002\"\254\002\n\020AccountLimitData\022\022\n\naccount_id\030"
    "\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\031\n\021security_exchan"
    "ge\030\003 \001(\t\022\022\n\nsession_id\030\004 \001(\t\022\034\n\021max_open"
    "_long_qty\030\005 \001(\t:\0010\022\035\n\022max_open_short_qty"
    "\030\006 \001(\t:\0010\022\032\n\017max_release_qty\030\007 \001(\t:\0010\022\024\n"
    "\tis_active\030\010 \001(\t:\0010\022\026\n\016added_datetime\030\t "
    "\001(\t\022\020\n\010added_by\030\n \001(\t\022\030\n\020updated_datetim"
    "e\030\013 \001(\t\022\022\n\nupdated_by\030\014 \001(\t\"\232\004\n\016DraftOrd"
    "erData\022\031\n\021external_order_id\030\001 \001(\t\022\034\n\024inv"
    "estment_system_id\030\002 \001(\t\022\025\n\rinstrument_id"
    "\030\003 \001(\t\0226\n\tside_code\030\004 \001(\0162#.quantmodel.D"
    "raftOrderData.SideCode\0223\n\003tif\030\005 \001(\0162&.qu"
    "antmodel.DraftOrderData.TimeInForce\0228\n\no"
    "rder_type\030\006 \001(\0162$.quantmodel.DraftOrderD"
    "ata.OrderType\022\024\n\torder_qty\030\007 \001(\t:\0010\022\024\n\tl"
    "imit_prc\030\010 \001(\t:\0010\022\023\n\010stop_prc\030\t \001(\t:\0010\"\035"
    "\n\010SideCode\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\"c\n\tOrderTy"
    "pe\022\n\n\006MARKET\020\001\022\t\n\005LIMIT\020\002\022\010\n\004STOP\020\003\022\016\n\nS"
    "TOP_LIMIT\020\004\022\023\n\017MARKET_ON_CLOSE\020\005\022\020\n\014MARK"
    "ET_LIMIT\020\006\"L\n\013TimeInForce\022\007\n\003DAY\020\000\022\007\n\003GT"
    "C\020\001\022\007\n\003OPG\020\002\022\007\n\003IOC\020\003\022\007\n\003FOK\020\004\022\007\n\003GTD\020\006\022"
    "\007\n\003GIS\020\010\"D\n\023DraftAllocationData\022\022\n\naccou"
    "nt_id\030\001 \001(\t\022\031\n\016allocation_qty\030\002 \001(\t:\0010\"\244"
    "\004\n\013AccountData\022\022\n\naccount_id\030\001 \001(\t\022\031\n\021pa"
    "rent_account_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\031\n\021m"
    "arket_account_id\030\004 \001(\t\022\032\n\022custody_accoun"
    "t_id\030\005 \001(\t\022\031\n\021giveup_account_id\030\006 \001(\t\022\026\n"
    "\016giveup_firm_id\030\007 \001(\t\022\024\n\014notional_val\030\010 "
    "\001(\t\022\025\n\rprofit_target\030\t \001(\t\022\021\n\tstop_loss\030"
    "\n \001(\t\022\025\n\rsignal_weight\030\013 \001(\t\022\025\n\ris_suppr"
    "essed\030\014 \001(\t\022\021\n\tis_active\030\r \001(\t\022\024\n\014contac"
    "t_name\030\016 \001(\t\022\025\n\rcontact_email\030\017 \001(\t\022\025\n\rc"
    "ontact_phone\030\020 \001(\t\022\031\n\021trading_firm_name\030"
    "\021 \001(\t\022\032\n\022trading_firm_email\030\022 \001(\t\022\032\n\022tra"
    "ding_firm_phone\030\023 \001(\t\022\026\n\016added_datetime\030"
    "\024 \001(\t\022\020\n\010added_by\030\025 \001(\t\022\030\n\020updated_datet"
    "ime\030\026 \001(\t\022\022\n\nupdated_by\030\027 \001(\t\"\210\007\n\tOrderD"
    "ata\022\020\n\010order_id\030\001 \001(\t\022\031\n\021external_order_"
    "id\030\002 \001(\t\022\034\n\024investment_system_id\030\003 \001(\t\022\022"
    "\n\norder_type\030\004 \001(\t\022\024\n\014order_status\030\005 \001(\t"
    "\022\025\n\rinstrument_id\030\006 \001(\t\022\016\n\006symbol\030\007 \001(\t\022"
    "\013\n\003tif\030\010 \001(\t\022\021\n\tside_code\030\t \001(\t\022\020\n\010base_"
    "ccy\030\n \001(\t\022\024\n\torder_qty\030\013 \001(\t:\0010\022\023\n\010open_"
    "qty\030\014 \001(\t:\0010\022\027\n\014released_qty\030\r \001(\t:\0010\022\027\n"
    "\014executed_qty\030\016 \001(\t:\0010\022\024\n\tlimit_prc\030\017 \001("
    "\t:\0010\022\023\n\010stop_prc\030\020 \001(\t:\0010\022\023\n\010mark_prc\030\021 "
    "\001(\t:\0010\022\026\n\013average_prc\030\022 \001(\t:\0010\022\024\n\tentry_"
    "prc\030\023 \001(\t:\0010\022\027\n\014released_val\030\024 \001(\t:\0010\022\027\n"
    "\014executed_val\030\025 \001(\t:\0010\022\026\n\016added_datetime"
    "\030\026 \001(\t\022\020\n\010added_by\030\027 \001(\t\022\030\n\020updated_date"
    "time\030\030 \001(\t\022\022\n\nupdated_by\030\031 \001(\t\"\035\n\010SideCo"
    "de\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\"c\n\tOrderType\022\n\n\006MA"
    "RKET\020\001\022\t\n\005LIMIT\020\002\022\010\n\004STOP\020\003\022\016\n\nSTOP_LIMI"
    "T\020\004\022\023\n\017MARKET_ON_CLOSE\020\005\022\020\n\014MARKET_LIMIT"
    "\020\006\"\205\001\n\013OrderStatus\022\016\n\nSUPPRESSED\020\000\022\007\n\003NE"
    "W\020\001\022\023\n\017PENDING_RELEASE\020\002\022\014\n\010RELEASED\020\003\022\024"
    "\n\020PARTIALLY_FILLED\020\004\022\n\n\006FILLED\020\005\022\014\n\010CANC"
    "ELED\020\006\022\n\n\006CLOSED\020\007\"L\n\013TimeInForce\022\007\n\003DAY"
    "\020\000\022\007\n\003GTC\020\001\022\007\n\003OPG\020\002\022\007\n\003IOC\020\003\022\007\n\003FOK\020\004\022\007"
    "\n\003GTD\020\006\022\007\n\003GIS\020\010\"\315\002\n\016AllocationData\022\025\n\ra"
    "llocation_id\030\001 \001(\t\022\020\n\010order_id\030\002 \001(\t\022\022\n\n"
    "account_id\030\003 \001(\t\022\025\n\rinstrument_id\030\004 \001(\t\022"
    "\021\n\tside_code\030\005 \001(\t\022\031\n\016allocation_qty\030\006 \001"
    "(\t:\0010\022\027\n\014released_qty\030\007 \001(\t:\0010\022\027\n\014execut"
    "ed_qty\030\010 \001(\t:\0010\022\027\n\014executed_val\030\t \001(\t:\0010"
    "\022\026\n\013average_prc\030\n \001(\t:\0010\022\026\n\016added_dateti"
    "me\030\013 \001(\t\022\020\n\010added_by\030\014 \001(\t\022\030\n\020updated_da"
    "tetime\030\r \001(\t\022\022\n\nupdated_by\030\016 \001(\t\"\257\004\n\013Rel"
    "easeData\022\022\n\nrelease_id\030\001 \001(\t\022\022\n\nsession_"
    "id\030\002 \001(\t\022\022\n\naccount_id\030\003 \001(\t\022\020\n\010order_id"
    "\030\004 \001(\t\022\025\n\rallocation_id\030\005 \001(\t\022\034\n\024investm"
    "ent_system_id\030\006 \001(\t\022\025\n\rinstrument_id\030\007 \001"
    "(\t\022\033\n\023compliance_audit_id\030\010 \001(\t\022\027\n\017clien"
    "t_order_id\030\t \001(\t\022\035\n\025counterparty_order_i"
    "d\030\n \001(\t\022\026\n\016release_status\030\013 \001(\t\022\024\n\014relea"
    "se_type\030\014 \001(\t\022\013\n\003tif\030\r \001(\t\022\021\n\tside_code\030"
    "\016 \001(\t\022\026\n\013release_qty\030\017 \001(\t:\0010\022\024\n\tlimit_p"
    "rc\030\020 \001(\t:\0010\022\023\n\010stop_prc\030\021 \001(\t:\0010\022\026\n\013aver"
    "age_prc\030\022 \001(\t:\0010\022\027\n\014executed_val\030\023 \001(\t:\001"
    "0\022\027\n\014executed_qty\030\024 \001(\t:\0010\022\026\n\016added_date"
    "time\030\025 \001(\t\022\020\n\010added_by\030\026 \001(\t\022\030\n\020updated_"
    "datetime\030\027 \001(\t\022\022\n\nupdated_by\030\030 \001(\t\"\222\004\n\rE"
    "xecutionData\022\024\n\014execution_id\030\001 \001(\t\022\022\n\nse"
    "ssion_id\030\002 \001(\t\022\022\n\naccount_id\030\003 \001(\t\022\020\n\010or"
    "der_id\030\004 \001(\t\022\022\n\nrelease_id\030\005 \001(\t\022\034\n\024inve"
    "stment_system_id\030\006 \001(\t\022\025\n\rinstrument_id\030"
    "\007 \001(\t\022\027\n\017client_order_id\030\010 \001(\t\022!\n\031counte"
    "rparty_execution_id\030\t \001(\t\022\021\n\tside_code\030\n"
    " \001(\t\022\025\n\rexecution_ccy\030\013 \001(\t\022\030\n\020execution"
    "_status\030\014 \001(\t\022\030\n\rexecution_prc\030\r \001(\t:\0010\022"
    "\030\n\rexecution_qty\030\016 \001(\t:\0010\022\030\n\rexecution_v"
    "al\030\017 \001(\t:\0010\022\025\n\nleaves_qty\030\020 \001(\t:\0010\022\026\n\013av"
    "erage_prc\030\021 \001(\t:\0010\022\023\n\010leg_type\030\022 \001(\t:\0011\022"
    "\026\n\016added_datetime\030\023 \001(\t\022\020\n\010added_by\030\024 \001("
    "\t\022\030\n\020updated_datetime\030\025 \001(\t\022\022\n\nupdated_b"
    "y\030\026 \001(\t\"\260\004\n\016InstrumentData\022\025\n\rinstrument"
    "_id\030\001 \001(\t\022\027\n\017instrument_type\030\002 \001(\t\022\014\n\004na"
    "me\030\003 \001(\t\022\016\n\006symbol\030\004 \001(\t\022\r\n\005cusip\030\005 \001(\t\022"
    "\r\n\005sedol\030\006 \001(\t\022\014\n\004isin\030\007 \001(\t\022\013\n\003ric\030\010 \001("
    "\t\022\020\n\010cfi_code\030\t \001(\t\022\023\n\013security_id\030\n \001(\t"
    "\022\025\n\rsecurity_type\030\013 \001(\t\022\025\n\rsecurity_desc"
    "\030\014 \001(\t\022\031\n\021security_exchange\030\r \001(\t\022\033\n\023mat"
    "urity_month_year\030\016 \001(\t\022\020\n\010base_ccy\030\017 \001(\t"
    "\022\023\n\010last_prc\030\020 \001(\t:\0010\022\023\n\010mark_prc\030\021 \001(\t:"
    "\0010\022\025\n\rmark_datetime\030\022 \001(\t\022\022\n\nmultiplier\030"
    "\023 \001(\t\022\035\n\025exchange_price_factor\030\024 \001(\t\022\031\n\021"
    "rollover_datetime\030\025 \001(\t\022\021\n\tis_active\030\026 \001"
    "(\t\022\026\n\016added_datetime\030\027 \001(\t\022\020\n\010added_by\030\030"
    " \001(\t\022\030\n\020updated_datetime\030\031 \001(\t\022\022\n\nupdate"
    "d_by\030\032 \001(\t\"\325\001\n\nSignalData\022\031\n\021external_or"
    "der_id\030\001 \001(\t\022\034\n\024investment_system_id\030\002 \001"
    "(\t\022\021\n\tsignal_id\030\003 \001(\t\022\025\n\rinstrument_id\030\004"
    " \001(\t\022\021\n\tside_code\030\005 \001(\t\022\022\n\nsignal_qty\030\006 "
    "\001(\t\022\022\n\norder_type\030\007 \001(\t\022\024\n\tlimit_prc\030\010 \001"
    "(\t:\0010\022\023\n\010stop_prc\030\t \001(\t:\0010\"U\n\024Investment"
    "SystemData\022\034\n\024investment_system_id\030\001 \001(\t"
    "\022\014\n\004name\030\002 \001(\t\022\021\n\tis_active\030\003 \001(\t\"\215\001\n\014St"
    "rategyData\022\023\n\013strategy_id\030\001 \001(\t\022\034\n\024inves"
    "tment_system_id\030\002 \001(\t\022\021\n\tsignal_id\030\003 \001(\t"
    "\022\014\n\004name\030\004 \001(\t\022\026\n\016default_weight\030\005 \001(\t\022\021"
    "\n\tis_active\030\006 \001(\t\"b\n\023AccountStrategyData"
    "\022\022\n\naccount_id\030\001 \001(\t\022\023\n\013strategy_id\030\002 \001("
    "\t\022\016\n\006weight\030\003 \001(\t\022\022\n\nis_enabled\030\004 \001(\t\"\370\004"
    "\n\023ExecutionReportData\022\022\n\nrelease_id\030\001 \001("
    "\t\022\022\n\nsession_id\030\002 \001(\t\022\022\n\nsending_tm\030\003 \001("
    "\t\022\016\n\006ExecID\030\004 \001(\t\022\017\n\007OrderID\030\005 \001(\t\022\017\n\007Cl"
    "OrdID\030\006 \001(\t\022\023\n\013OrigClOrdID\030\007 \001(\t\022\021\n\tExec"
    "RefID\030\010 \001(\t\022\017\n\007OrdType\030\t \001(\t\022\020\n\010ExecType"
    "\030\n \001(\t\022\025\n\rExecTransType\030\013 \001(\t\022 \n\025MultiLe"
    "gReportingType\030\014 \001(\t:\0011\022\022\n\nSecurityID\030\r "
    "\001(\t\022\024\n\014SecurityType\030\016 \001(\t\022\020\n\010IDSource\030\017 "
    "\001(\t\022\017\n\007Account\030\020 \001(\t\022\021\n\tOrdStatus\030\021 \001(\t\022"
    "\016\n\006Symbol\030\022 \001(\t\022\014\n\004Side\030\023 \001(\t\022\023\n\013TimeInF"
    "orce\030\024 \001(\t\022\031\n\021MaturityMonthYear\030\025 \001(\t\022\024\n"
    "\014TransactTime\030\026 \001(\t\022\014\n\004Text\030\027 \001(\t\022\021\n\006Cum"
    "Qty\030\030 \001(\t:\0010\022\023\n\010OrderQty\030\031 \001(\t:\0010\022\024\n\tLea"
    "vesQty\030\032 \001(\t:\0010\022\025\n\nLastShares\030\033 \001(\t:\0010\022\020"
    "\n\005Price\030\034 \001(\t:\0010\022\020\n\005AvgPx\030\035 \001(\t:\0010\022\021\n\006La"
    "stPx\030\036 \001(\t:\0010\022\021\n\006StopPx\030\037 \001(\t:\0010\"\211\001\n\021Dra"
    "ftOrderMessage\0224\n\020draft_order_data\030\001 \001(\013"
    "2\032.quantmodel.DraftOrderData\022>\n\025draft_al"
    "location_data\030\002 \003(\0132\037.quantmodel.DraftAl"
    "locationData\"\320\001\n\014OrderMessage\022)\n\norder_d"
    "ata\030\001 \001(\0132\025.quantmodel.OrderData\0223\n\017allo"
    "cation_data\030\002 \003(\0132\032.quantmodel.Allocatio"
    "nData\022-\n\014release_data\030\003 \003(\0132\027.quantmodel"
    ".ReleaseData\0221\n\016execution_data\030\004 \003(\0132\031.q"
    "uantmodel.ExecutionData\"\204\002\n\025DatabaseEngi"
    "neRequest\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\ttimesta"
    "mp\030\002 \001(\t\0226\n\005query\030\003 \003(\0132\'.quantmodel.Dat"
    "abaseEngineRequest.Query\032g\n\005Query\0229\n\004typ"
    "e\030\001 \001(\0162+.quantmodel.DatabaseEngineReque"
    "st.QueryType\022\020\n\010query_id\030\002 \001(\t\022\021\n\tquery_"
    "str\030\003 \001(\t\"#\n\tQueryType\022\n\n\006SELECT\020\001\022\n\n\006UP"
    "DATE\020\002\"\220\003\n\026DatabaseEngineResponse\022\023\n\013res"
    "ponse_id\030\001 \001(\t\022\022\n\nrequest_id\030\002 \001(\t\022\021\n\tti"
    "mestamp\030\003 \001(\t\022@\n\nresult_set\030\004 \003(\0132,.quan"
    "tmodel.DatabaseEngineResponse.ResultSet\032"
    "\367\001\n\tResultSet\022\020\n\010query_id\030\001 \001(\t\022=\n\003row\030\002"
    " \003(\01320.quantmodel.DatabaseEngineResponse"
    ".ResultSet.Row\032\230\001\n\003Row\022\016\n\006row_id\030\001 \001(\005\022G"
    "\n\006column\030\002 \003(\01327.quantmodel.DatabaseEngi"
    "neResponse.ResultSet.Row.Column\0328\n\006Colum"
    "n\022\021\n\tcolumn_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005va"
    "lue\030\003 \001(\t\"\255\n\n\024DealingEngineRequest\022\022\n\nre"
    "quest_id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\t\022:\n\004typ"
    "e\030\003 \001(\0162,.quantmodel.DealingEngineReques"
    "t.RequestType\0222\n\013draft_order\030\004 \001(\0132\035.qua"
    "ntmodel.DraftOrderMessage\022\'\n\005order\030\005 \001(\013"
    "2\030.quantmodel.OrderMessage\022>\n\025execution_"
    "report_data\030\006 \001(\0132\037.quantmodel.Execution"
    "ReportData\0222\n\017fix_engine_data\030\007 \001(\0132\031.qu"
    "antmodel.FixEngineData\0223\n\017instrument_dat"
    "a\030\010 \003(\0132\032.quantmodel.InstrumentData\022-\n\014a"
    "ccount_data\030\t \003(\0132\027.quantmodel.AccountDa"
    "ta\022@\n\026investment_system_data\030\n \003(\0132 .qua"
    "ntmodel.InvestmentSystemData\022+\n\013signal_d"
    "ata\030\013 \003(\0132\026.quantmodel.SignalData\022>\n\025sys"
    "tem_parameter_data\030\014 \001(\0132\037.quantmodel.Sy"
    "stemParameterData\"\315\005\n\013RequestType\022\022\n\016EXE"
    "CUTE_SIGNAL\020\001\022\027\n\023EXECUTE_DRAFT_ORDER\020\002\022\026"
    "\n\022CREATE_DRAFT_ORDER\020\003\022\020\n\014CREATE_ORDER\020\004"
    "\022\020\n\014UPDATE_ORDER\020\005\022\020\n\014CANCEL_ORDER\020\006\022\021\n\r"
    "RELEASE_ORDER\020\007\022\022\n\016CREATE_RELEASE\020\010\022\024\n\020V"
    "ALIDATE_RELEASE\020\t\022\022\n\016CANCEL_RELEASE\020\n\022\023\n"
    "\017REPLACE_RELEASE\020\013\022\024\n\020RELEASE_REJECTED\020\014"
    "\022\023\n\017CANCEL_REJECTED\020\r\022\024\n\020RELEASE_RESTATE"
    "D\020\016\022\024\n\020RELEASE_CANCELED\020\017\022\024\n\020RELEASE_REP"
    "LACED\020\020\022\024\n\020CREATE_EXECUTION\020\021\022\026\n\022EXECUTI"
    "ON_CANCELED\020\022\022\022\n\016BROADCAST_DATA\020\023\022\016\n\nACT"
    "IVE_SET\020\024\022\017\n\013QUERY_ORDER\020\025\022\021\n\rQUERY_RELE"
    "ASE\020\026\022\023\n\017QUERY_EXECUTION\020\027\022\014\n\010ROLLOVER\020\030"
    "\022\022\n\016CURRENT_STATUS\020\031\022\021\n\rUPDATE_STATUS\020\032\022"
    "\030\n\024MARKETDATA_SUBSCRIBE\020\033\022\032\n\026MARKETDATA_"
    "UNSUBSCRIBE\020\034\022\023\n\017FIXENGINE_LOGIN\020\035\022\024\n\020FI"
    "XENGINE_LOGOUT\020\036\022\024\n\020LOGOUT_FIXENGINE\020\037\022\023"
    "\n\017LOGIN_FIXENGINE\020 \022\026\n\022RELOAD_STATIC_DAT"
    "A\020!\022\014\n\010SHUTDOWN\020\"\"\342\003\n\025DealingEngineRespo"
    "nse\022\023\n\013response_id\030\001 \001(\t\022\022\n\nrequest_id\030\002"
    " \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022<\n\004type\030\004 \001(\0162.."
    "quantmodel.DealingEngineResponse.Respons"
    "eType\022\021\n\terror_msg\030\005 \001(\t\0222\n\013draft_order\030"
    "\006 \003(\0132\035.quantmodel.DraftOrderMessage\022\'\n\005"
    "order\030\007 \003(\0132\030.quantmodel.OrderMessage\0223\n"
    "\010position\030\010 \003(\0132!.quantmodel.PositionOve"
    "rnightData\0229\n\020system_parameter\030\t \003(\0132\037.q"
    "uantmodel.SystemParameterData\0223\n\raccount"
    "_limit\030\n \001(\0132\034.quantmodel.AccountLimitDa"
    "ta\":\n\014ResponseType\022\023\n\017ACKNOWLEDGEMENT\020\001\022"
    "\n\n\006REJECT\020\002\022\t\n\005ERROR\020\003\"\240\010\n\026DealingEngine"
    "Broadcast\022\024\n\014broadcast_id\030\001 \001(\t\022>\n\004type\030"
    "\002 \001(\01620.quantmodel.DealingEngineBroadcas"
    "t.BroadcastType\022\021\n\ttimestamp\030\003 \001(\t\022\'\n\005or"
    "der\030\004 \003(\0132\030.quantmodel.OrderMessage\0222\n\017f"
    "ix_engine_data\030\005 \003(\0132\031.quantmodel.FixEng"
    "ineData\0223\n\010position\030\006 \003(\0132!.quantmodel.P"
    "ositionOvernightData\0229\n\020system_parameter"
    "\030\007 \003(\0132\037.quantmodel.SystemParameterData\""
    "\317\005\n\rBroadcastType\022\022\n\016EXECUTE_SIGNAL\020\001\022\027\n"
    "\023EXECUTE_DRAFT_ORDER\020\002\022\026\n\022CREATE_DRAFT_O"
    "RDER\020\003\022\020\n\014CREATE_ORDER\020\004\022\020\n\014UPDATE_ORDER"
    "\020\005\022\020\n\014CANCEL_ORDER\020\006\022\021\n\rRELEASE_ORDER\020\007\022"
    "\022\n\016CREATE_RELEASE\020\010\022\024\n\020VALIDATE_RELEASE\020"
    "\t\022\022\n\016CANCEL_RELEASE\020\n\022\023\n\017REPLACE_RELEASE"
    "\020\013\022\024\n\020RELEASE_REJECTED\020\014\022\023\n\017CANCEL_REJEC"
    "TED\020\r\022\024\n\020RELEASE_RESTATED\020\016\022\024\n\020RELEASE_C"
    "ANCELED\020\017\022\024\n\020RELEASE_REPLACED\020\020\022\024\n\020CREAT"
    "E_EXECUTION\020\021\022\026\n\022EXECUTION_CANCELED\020\022\022\022\n"
    "\016BROADCAST_DATA\020\023\022\016\n\nACTIVE_SET\020\024\022\017\n\013QUE"
    "RY_ORDER\020\025\022\021\n\rQUERY_RELEASE\020\026\022\023\n\017QUERY_E"
    "XECUTION\020\027\022\014\n\010ROLLOVER\020\030\022\022\n\016CURRENT_STAT"
    "US\020\031\022\021\n\rUPDATE_STATUS\020\032\022\030\n\024MARKETDATA_SU"
    "BSCRIBE\020\033\022\032\n\026MARKETDATA_UNSUBSCRIBE\020\034\022\023\n"
    "\017FIXENGINE_LOGIN\020\035\022\024\n\020FIXENGINE_LOGOUT\020\036"
    "\022\024\n\020LOGOUT_FIXENGINE\020\037\022\023\n\017LOGIN_FIXENGIN"
    "E\020 \022\026\n\022RELOAD_STATIC_DATA\020!\022\014\n\010SHUTDOWN\020"
    "\"\"\207\004\n\020FixEngineRequest\022\022\n\nrequest_id\030\001 \001"
    "(\t\022\021\n\ttimestamp\030\002 \001(\t\0226\n\004type\030\003 \001(\0162(.qu"
    "antmodel.FixEngineRequest.RequestType\022\022\n"
    "\nsession_id\030\004 \001(\t\022-\n\014release_data\030\005 \001(\0132"
    "\027.quantmodel.ReleaseData\0223\n\017instrument_d"
    "ata\030\006 \001(\0132\032.quantmodel.InstrumentData\022-\n"
    "\014account_data\030\007 \001(\0132\027.quantmodel.Account"
    "Data\"\354\001\n\013RequestType\022\022\n\016CREATE_RELEASE\020\001"
    "\022\022\n\016CANCEL_RELEASE\020\002\022\023\n\017REPLACE_RELEASE\020"
    "\003\022\023\n\017DEFINE_SECURITY\020\004\022\030\n\024MARKETDATA_SUB"
    "SCRIBE\020\005\022\024\n\020FIXENGINE_LOGOUT\020\006\022\023\n\017FIXENG"
    "INE_LOGIN\020\007\022\022\n\016SEQUENCE_RESET\020\010\022\022\n\016RESEN"
    "D_REQUEST\020\t\022\020\n\014TEST_REQUEST\020\n\022\014\n\010SHUTDOW"
    "N\020\013\"\330\001\n\021FixEngineResponse\022\023\n\013response_id"
    "\030\001 \001(\t\022\022\n\nrequest_id\030\002 \001(\t\022\021\n\ttimestamp\030"
    "\003 \001(\t\0228\n\004type\030\004 \001(\0162*.quantmodel.FixEngi"
    "neResponse.ResponseType\022\021\n\terror_msg\030\005 \001"
    "(\t\":\n\014ResponseType\022\023\n\017ACKNOWLEDGEMENT\020\001\022"
    "\n\n\006REJECT\020\002\022\t\n\005ERROR\020\003\"\314\002\n\024ClientAdapter"
    "Request\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\nsession_i"
    "d\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022:\n\004type\030\004 \001(\016"
    "2,.quantmodel.ClientAdapterRequest.Reque"
    "stType\0229\n\017dealing_request\030\005 \001(\0132 .quantm"
    "odel.DealingEngineRequest\022;\n\020database_re"
    "quest\030\006 \001(\0132!.quantmodel.DatabaseEngineR"
    "equest\"E\n\013RequestType\022\r\n\tHEARTBEAT\020\001\022\014\n\010"
    "DATABASE\020\002\022\013\n\007DEALING\020\003\022\014\n\010SHUTDOWN\020\004\"\360\002"
    "\n\025ClientAdapterResponse\022\023\n\013response_id\030\001"
    " \001(\t\022\022\n\nrequest_id\030\002 \001(\t\022\022\n\nsession_id\030\003"
    " \001(\t\022\021\n\ttimestamp\030\004 \001(\t\022<\n\004type\030\005 \001(\0162.."
    "quantmodel.ClientAdapterResponse.Respons"
    "eType\022\021\n\terror_msg\030\006 \001(\t\022;\n\020dealing_resp"
    "onse\030\007 \001(\0132!.quantmodel.DealingEngineRes"
    "ponse\022=\n\021database_response\030\010 \001(\0132\".quant"
    "model.DatabaseEngineResponse\":\n\014Response"
    "Type\022\023\n\017ACKNOWLEDGEMENT\020\001\022\n\n\006REJECT\020\002\022\t\n"
    "\005ERROR\020\003\"\213\003\n\026ClientAdapterBroadcast\022\024\n\014b"
    "roadcast_id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\t\022>\n\004"
    "type\030\003 \001(\01620.quantmodel.ClientAdapterBro"
    "adcast.BroadcastType\022=\n\021dealing_broadcas"
    "t\030\004 \001(\0132\".quantmodel.DealingEngineBroadc"
    "ast\022=\n\024marketdata_broadcast\030\005 \001(\0132\037.quan"
    "tmodel.MarketDataBroadcast\0221\n\016heartbeat_"
    "data\030\006 \001(\0132\031.quantmodel.HeartbeatData\"W\n"
    "\rBroadcastType\022\r\n\tHEARTBEAT\020\001\022\014\n\010DATABAS"
    "E\020\002\022\013\n\007DEALING\020\003\022\016\n\nMARKETDATA\020\004\022\014\n\010SHUT"
    "DOWN\020\005\"\320\001\n\027InvestmentSystemRequest\022\022\n\nre"
    "quest_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\021\n\tti"
    "mestamp\030\003 \001(\t\022=\n\004type\030\004 \001(\0162/.quantmodel"
    ".InvestmentSystemRequest.RequestType\022\020\n\010"
    "delegate\030\005 \001(\t\")\n\013RequestType\022\r\n\tHEARTBE"
    "AT\020\001\022\013\n\007COMMAND\020\002\"\214\002\n\030InvestmentSystemRe"
    "sponse\022\023\n\013response_id\030\001 \001(\t\022\022\n\nrequest_i"
    "d\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022\?\n\004type\030\004 \001(\016"
    "21.quantmodel.InvestmentSystemResponse.R"
    "esponseType\022\021\n\terror_msg\030\005 \001(\t\022\022\n\nsessio"
    "n_id\030\006 \001(\t\022\020\n\010delegate\030\007 \001(\014\":\n\014Response"
    "Type\022\023\n\017ACKNOWLEDGEMENT\020\001\022\n\n\006REJECT\020\002\022\t\n"
    "\005ERROR\020\003\"\331\001\n\031InvestmentSystemBroadcast\022\024"
    "\n\014broadcast_id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\t\022"
    "A\n\004type\030\003 \001(\01623.quantmodel.InvestmentSys"
    "temBroadcast.BroadcastType\022\020\n\010delegate\030\004"
    " \001(\014\">\n\rBroadcastType\022\t\n\005PRICE\020\001\022\t\n\005TRAD"
    "E\020\002\022\010\n\004DATA\020\003\022\r\n\tHEARTBEAT\020\004B\010H\001\200\001\000\210\001\000", 14918);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quantmodel.proto", &protobuf_RegisterTypes);
  FixMarketData::default_instance_ = new FixMarketData();
  CMEMarketData::default_instance_ = new CMEMarketData();
  FastEngineBroadcast::default_instance_ = new FastEngineBroadcast();
  FixEngineBroadcast::default_instance_ = new FixEngineBroadcast();
  MarketDataPriceData::default_instance_ = new MarketDataPriceData();
  MarketDataTradeData::default_instance_ = new MarketDataTradeData();
  MarketDataQuoteData::default_instance_ = new MarketDataQuoteData();
  MarketDataBroadcast::default_instance_ = new MarketDataBroadcast();
  HeartbeatData::default_instance_ = new HeartbeatData();
  FixEngineData::default_instance_ = new FixEngineData();
  SystemParameterData::default_instance_ = new SystemParameterData();
  PositionOvernightData::default_instance_ = new PositionOvernightData();
  AccountLimitData::default_instance_ = new AccountLimitData();
  DraftOrderData::default_instance_ = new DraftOrderData();
  DraftAllocationData::default_instance_ = new DraftAllocationData();
  AccountData::default_instance_ = new AccountData();
  OrderData::default_instance_ = new OrderData();
  AllocationData::default_instance_ = new AllocationData();
  ReleaseData::default_instance_ = new ReleaseData();
  ExecutionData::default_instance_ = new ExecutionData();
  InstrumentData::default_instance_ = new InstrumentData();
  SignalData::default_instance_ = new SignalData();
  InvestmentSystemData::default_instance_ = new InvestmentSystemData();
  StrategyData::default_instance_ = new StrategyData();
  AccountStrategyData::default_instance_ = new AccountStrategyData();
  ExecutionReportData::default_instance_ = new ExecutionReportData();
  DraftOrderMessage::default_instance_ = new DraftOrderMessage();
  OrderMessage::default_instance_ = new OrderMessage();
  DatabaseEngineRequest::default_instance_ = new DatabaseEngineRequest();
  DatabaseEngineRequest_Query::default_instance_ = new DatabaseEngineRequest_Query();
  DatabaseEngineResponse::default_instance_ = new DatabaseEngineResponse();
  DatabaseEngineResponse_ResultSet::default_instance_ = new DatabaseEngineResponse_ResultSet();
  DatabaseEngineResponse_ResultSet_Row::default_instance_ = new DatabaseEngineResponse_ResultSet_Row();
  DatabaseEngineResponse_ResultSet_Row_Column::default_instance_ = new DatabaseEngineResponse_ResultSet_Row_Column();
  DealingEngineRequest::default_instance_ = new DealingEngineRequest();
  DealingEngineResponse::default_instance_ = new DealingEngineResponse();
  DealingEngineBroadcast::default_instance_ = new DealingEngineBroadcast();
  FixEngineRequest::default_instance_ = new FixEngineRequest();
  FixEngineResponse::default_instance_ = new FixEngineResponse();
  ClientAdapterRequest::default_instance_ = new ClientAdapterRequest();
  ClientAdapterResponse::default_instance_ = new ClientAdapterResponse();
  ClientAdapterBroadcast::default_instance_ = new ClientAdapterBroadcast();
  InvestmentSystemRequest::default_instance_ = new InvestmentSystemRequest();
  InvestmentSystemResponse::default_instance_ = new InvestmentSystemResponse();
  InvestmentSystemBroadcast::default_instance_ = new InvestmentSystemBroadcast();
  FixMarketData::default_instance_->InitAsDefaultInstance();
  CMEMarketData::default_instance_->InitAsDefaultInstance();
  FastEngineBroadcast::default_instance_->InitAsDefaultInstance();
  FixEngineBroadcast::default_instance_->InitAsDefaultInstance();
  MarketDataPriceData::default_instance_->InitAsDefaultInstance();
  MarketDataTradeData::default_instance_->InitAsDefaultInstance();
  MarketDataQuoteData::default_instance_->InitAsDefaultInstance();
  MarketDataBroadcast::default_instance_->InitAsDefaultInstance();
  HeartbeatData::default_instance_->InitAsDefaultInstance();
  FixEngineData::default_instance_->InitAsDefaultInstance();
  SystemParameterData::default_instance_->InitAsDefaultInstance();
  PositionOvernightData::default_instance_->InitAsDefaultInstance();
  AccountLimitData::default_instance_->InitAsDefaultInstance();
  DraftOrderData::default_instance_->InitAsDefaultInstance();
  DraftAllocationData::default_instance_->InitAsDefaultInstance();
  AccountData::default_instance_->InitAsDefaultInstance();
  OrderData::default_instance_->InitAsDefaultInstance();
  AllocationData::default_instance_->InitAsDefaultInstance();
  ReleaseData::default_instance_->InitAsDefaultInstance();
  ExecutionData::default_instance_->InitAsDefaultInstance();
  InstrumentData::default_instance_->InitAsDefaultInstance();
  SignalData::default_instance_->InitAsDefaultInstance();
  InvestmentSystemData::default_instance_->InitAsDefaultInstance();
  StrategyData::default_instance_->InitAsDefaultInstance();
  AccountStrategyData::default_instance_->InitAsDefaultInstance();
  ExecutionReportData::default_instance_->InitAsDefaultInstance();
  DraftOrderMessage::default_instance_->InitAsDefaultInstance();
  OrderMessage::default_instance_->InitAsDefaultInstance();
  DatabaseEngineRequest::default_instance_->InitAsDefaultInstance();
  DatabaseEngineRequest_Query::default_instance_->InitAsDefaultInstance();
  DatabaseEngineResponse::default_instance_->InitAsDefaultInstance();
  DatabaseEngineResponse_ResultSet::default_instance_->InitAsDefaultInstance();
  DatabaseEngineResponse_ResultSet_Row::default_instance_->InitAsDefaultInstance();
  DatabaseEngineResponse_ResultSet_Row_Column::default_instance_->InitAsDefaultInstance();
  DealingEngineRequest::default_instance_->InitAsDefaultInstance();
  DealingEngineResponse::default_instance_->InitAsDefaultInstance();
  DealingEngineBroadcast::default_instance_->InitAsDefaultInstance();
  FixEngineRequest::default_instance_->InitAsDefaultInstance();
  FixEngineResponse::default_instance_->InitAsDefaultInstance();
  ClientAdapterRequest::default_instance_->InitAsDefaultInstance();
  ClientAdapterResponse::default_instance_->InitAsDefaultInstance();
  ClientAdapterBroadcast::default_instance_->InitAsDefaultInstance();
  InvestmentSystemRequest::default_instance_->InitAsDefaultInstance();
  InvestmentSystemResponse::default_instance_->InitAsDefaultInstance();
  InvestmentSystemBroadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quantmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quantmodel_2eproto {
  StaticDescriptorInitializer_quantmodel_2eproto() {
    protobuf_AddDesc_quantmodel_2eproto();
  }
} static_descriptor_initializer_quantmodel_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* FixMarketData_EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixMarketData_EntryType_descriptor_;
}
bool FixMarketData_EntryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FixMarketData_EntryType FixMarketData::BID;
const FixMarketData_EntryType FixMarketData::ASK;
const FixMarketData_EntryType FixMarketData::TRADE;
const FixMarketData_EntryType FixMarketData::UNKNOWN;
const FixMarketData_EntryType FixMarketData::EntryType_MIN;
const FixMarketData_EntryType FixMarketData::EntryType_MAX;
const int FixMarketData::EntryType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string FixMarketData::_default_entry_px_("0");
const ::std::string FixMarketData::_default_entry_size_("0");
#ifndef _MSC_VER
const int FixMarketData::kInstrumentIdFieldNumber;
const int FixMarketData::kSendingTmFieldNumber;
const int FixMarketData::kEntryTypeFieldNumber;
const int FixMarketData::kUpdateActionFieldNumber;
const int FixMarketData::kEntryPxFieldNumber;
const int FixMarketData::kEntrySizeFieldNumber;
#endif  // !_MSC_VER

FixMarketData::FixMarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixMarketData::InitAsDefaultInstance() {
}

FixMarketData::FixMarketData(const FixMarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixMarketData::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sending_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_type_ = 1;
  update_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_px_ = const_cast< ::std::string*>(&_default_entry_px_);
  entry_size_ = const_cast< ::std::string*>(&_default_entry_size_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixMarketData::~FixMarketData() {
  SharedDtor();
}

void FixMarketData::SharedDtor() {
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (sending_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete sending_tm_;
  }
  if (update_action_ != &::google::protobuf::internal::kEmptyString) {
    delete update_action_;
  }
  if (entry_px_ != &_default_entry_px_) {
    delete entry_px_;
  }
  if (entry_size_ != &_default_entry_size_) {
    delete entry_size_;
  }
  if (this != default_instance_) {
  }
}

void FixMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixMarketData_descriptor_;
}

const FixMarketData& FixMarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FixMarketData* FixMarketData::default_instance_ = NULL;

FixMarketData* FixMarketData::New() const {
  return new FixMarketData;
}

void FixMarketData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_sending_tm()) {
      if (sending_tm_ != &::google::protobuf::internal::kEmptyString) {
        sending_tm_->clear();
      }
    }
    entry_type_ = 1;
    if (has_update_action()) {
      if (update_action_ != &::google::protobuf::internal::kEmptyString) {
        update_action_->clear();
      }
    }
    if (has_entry_px()) {
      if (entry_px_ != &_default_entry_px_) {
        entry_px_->assign(_default_entry_px_);
      }
    }
    if (has_entry_size()) {
      if (entry_size_ != &_default_entry_size_) {
        entry_size_->assign(_default_entry_size_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sending_tm;
        break;
      }
      
      // optional string sending_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sending_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sending_tm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sending_tm().data(), this->sending_tm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entry_type;
        break;
      }
      
      // optional .quantmodel.FixMarketData.EntryType entry_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::FixMarketData_EntryType_IsValid(value)) {
            set_entry_type(static_cast< ::quantmodel::FixMarketData_EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_update_action;
        break;
      }
      
      // optional string update_action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_action().data(), this->update_action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entry_px;
        break;
      }
      
      // optional string entry_px = 5 [default = "0"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_px:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_px()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_px().data(), this->entry_px().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_entry_size;
        break;
      }
      
      // optional string entry_size = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_size().data(), this->entry_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_id(), output);
  }
  
  // optional string sending_tm = 2;
  if (has_sending_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sending_tm().data(), this->sending_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sending_tm(), output);
  }
  
  // optional .quantmodel.FixMarketData.EntryType entry_type = 3;
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entry_type(), output);
  }
  
  // optional string update_action = 4;
  if (has_update_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_action().data(), this->update_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->update_action(), output);
  }
  
  // optional string entry_px = 5 [default = "0"];
  if (has_entry_px()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_px().data(), this->entry_px().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->entry_px(), output);
  }
  
  // optional string entry_size = 6 [default = "0"];
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_size().data(), this->entry_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->entry_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixMarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_id(), target);
  }
  
  // optional string sending_tm = 2;
  if (has_sending_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sending_tm().data(), this->sending_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sending_tm(), target);
  }
  
  // optional .quantmodel.FixMarketData.EntryType entry_type = 3;
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entry_type(), target);
  }
  
  // optional string update_action = 4;
  if (has_update_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_action().data(), this->update_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->update_action(), target);
  }
  
  // optional string entry_px = 5 [default = "0"];
  if (has_entry_px()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_px().data(), this->entry_px().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->entry_px(), target);
  }
  
  // optional string entry_size = 6 [default = "0"];
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_size().data(), this->entry_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->entry_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixMarketData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string sending_tm = 2;
    if (has_sending_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sending_tm());
    }
    
    // optional .quantmodel.FixMarketData.EntryType entry_type = 3;
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }
    
    // optional string update_action = 4;
    if (has_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_action());
    }
    
    // optional string entry_px = 5 [default = "0"];
    if (has_entry_px()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_px());
    }
    
    // optional string entry_size = 6 [default = "0"];
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixMarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixMarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixMarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixMarketData::MergeFrom(const FixMarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_sending_tm()) {
      set_sending_tm(from.sending_tm());
    }
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
    if (from.has_update_action()) {
      set_update_action(from.update_action());
    }
    if (from.has_entry_px()) {
      set_entry_px(from.entry_px());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixMarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixMarketData::CopyFrom(const FixMarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixMarketData::IsInitialized() const {
  
  return true;
}

void FixMarketData::Swap(FixMarketData* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(sending_tm_, other->sending_tm_);
    std::swap(entry_type_, other->entry_type_);
    std::swap(update_action_, other->update_action_);
    std::swap(entry_px_, other->entry_px_);
    std::swap(entry_size_, other->entry_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixMarketData_descriptor_;
  metadata.reflection = FixMarketData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMEMarketData_EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketData_EntryType_descriptor_;
}
bool CMEMarketData_EntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketData_EntryType CMEMarketData::BID;
const CMEMarketData_EntryType CMEMarketData::ASK;
const CMEMarketData_EntryType CMEMarketData::TRADE;
const CMEMarketData_EntryType CMEMarketData::OPENING_PRICE;
const CMEMarketData_EntryType CMEMarketData::SETTLEMENT_PRICE;
const CMEMarketData_EntryType CMEMarketData::TRADING_SESSION_HIGH_PRICE;
const CMEMarketData_EntryType CMEMarketData::TRADING_SESSION_LOW_PRICE;
const CMEMarketData_EntryType CMEMarketData::TRADE_VOLUME;
const CMEMarketData_EntryType CMEMarketData::OPEN_INTEREST;
const CMEMarketData_EntryType CMEMarketData::SIMULATED_SELL;
const CMEMarketData_EntryType CMEMarketData::SIMULATED_BUY;
const CMEMarketData_EntryType CMEMarketData::EMPTY_BOOK;
const CMEMarketData_EntryType CMEMarketData::PRIOR;
const CMEMarketData_EntryType CMEMarketData::SESSION_HIGH_BID;
const CMEMarketData_EntryType CMEMarketData::SESSION_LOW_OFFER;
const CMEMarketData_EntryType CMEMarketData::FIXING_PRICE;
const CMEMarketData_EntryType CMEMarketData::CASH_NOTE;
const CMEMarketData_EntryType CMEMarketData::EntryType_MIN;
const CMEMarketData_EntryType CMEMarketData::EntryType_MAX;
const int CMEMarketData::EntryType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketData_UpdateAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketData_UpdateAction_descriptor_;
}
bool CMEMarketData_UpdateAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketData_UpdateAction CMEMarketData::ADD;
const CMEMarketData_UpdateAction CMEMarketData::CHANGE;
const CMEMarketData_UpdateAction CMEMarketData::DELETE;
const CMEMarketData_UpdateAction CMEMarketData::OVERLAY;
const CMEMarketData_UpdateAction CMEMarketData::UpdateAction_MIN;
const CMEMarketData_UpdateAction CMEMarketData::UpdateAction_MAX;
const int CMEMarketData::UpdateAction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMEMarketData_AggressorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketData_AggressorType_descriptor_;
}
bool CMEMarketData_AggressorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMEMarketData_AggressorType CMEMarketData::UNKNOWN;
const CMEMarketData_AggressorType CMEMarketData::BUY;
const CMEMarketData_AggressorType CMEMarketData::SELL;
const CMEMarketData_AggressorType CMEMarketData::AggressorType_MIN;
const CMEMarketData_AggressorType CMEMarketData::AggressorType_MAX;
const int CMEMarketData::AggressorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CMEMarketData::_default_entry_px_("0");
#ifndef _MSC_VER
const int CMEMarketData::kSendingTmFieldNumber;
const int CMEMarketData::kSecurityIdFieldNumber;
const int CMEMarketData::kUpdateActionFieldNumber;
const int CMEMarketData::kEntryTypeFieldNumber;
const int CMEMarketData::kIsImpliedFieldNumber;
const int CMEMarketData::kEntrySizeFieldNumber;
const int CMEMarketData::kEntryPxFieldNumber;
const int CMEMarketData::kOrdersFieldNumber;
const int CMEMarketData::kPriceLevelFieldNumber;
const int CMEMarketData::kEntryTmFieldNumber;
const int CMEMarketData::kAggressorFieldNumber;
const int CMEMarketData::kMantissaFieldNumber;
const int CMEMarketData::kExponentFieldNumber;
#endif  // !_MSC_VER

CMEMarketData::CMEMarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMEMarketData::InitAsDefaultInstance() {
}

CMEMarketData::CMEMarketData(const CMEMarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMEMarketData::SharedCtor() {
  _cached_size_ = 0;
  sending_tm_ = GOOGLE_ULONGLONG(0);
  security_id_ = 0u;
  update_action_ = 0;
  entry_type_ = 0;
  is_implied_ = false;
  entry_size_ = 0;
  entry_px_ = const_cast< ::std::string*>(&_default_entry_px_);
  orders_ = 0u;
  price_level_ = 0u;
  entry_tm_ = 0u;
  aggressor_ = 0;
  mantissa_ = GOOGLE_LONGLONG(0);
  exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMEMarketData::~CMEMarketData() {
  SharedDtor();
}

void CMEMarketData::SharedDtor() {
  if (entry_px_ != &_default_entry_px_) {
    delete entry_px_;
  }
  if (this != default_instance_) {
  }
}

void CMEMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMEMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMEMarketData_descriptor_;
}

const CMEMarketData& CMEMarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

CMEMarketData* CMEMarketData::default_instance_ = NULL;

CMEMarketData* CMEMarketData::New() const {
  return new CMEMarketData;
}

void CMEMarketData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sending_tm_ = GOOGLE_ULONGLONG(0);
    security_id_ = 0u;
    update_action_ = 0;
    entry_type_ = 0;
    is_implied_ = false;
    entry_size_ = 0;
    if (has_entry_px()) {
      if (entry_px_ != &_default_entry_px_) {
        entry_px_->assign(_default_entry_px_);
      }
    }
    orders_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    price_level_ = 0u;
    entry_tm_ = 0u;
    aggressor_ = 0;
    mantissa_ = GOOGLE_LONGLONG(0);
    exponent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMEMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sending_tm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sending_tm_)));
          set_has_sending_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_security_id;
        break;
      }
      
      // required uint32 security_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &security_id_)));
          set_has_security_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update_action;
        break;
      }
      
      // required .quantmodel.CMEMarketData.UpdateAction update_action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::CMEMarketData_UpdateAction_IsValid(value)) {
            set_update_action(static_cast< ::quantmodel::CMEMarketData_UpdateAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entry_type;
        break;
      }
      
      // required .quantmodel.CMEMarketData.EntryType entry_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::CMEMarketData_EntryType_IsValid(value)) {
            set_entry_type(static_cast< ::quantmodel::CMEMarketData_EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_implied;
        break;
      }
      
      // required bool is_implied = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_implied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_implied_)));
          set_has_is_implied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entry_size;
        break;
      }
      
      // optional int32 entry_size = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entry_size_)));
          set_has_entry_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entry_px;
        break;
      }
      
      // optional string entry_px = 7 [default = "0", deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_px:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_px()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_px().data(), this->entry_px().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_orders;
        break;
      }
      
      // optional uint32 orders = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orders_)));
          set_has_orders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_price_level;
        break;
      }
      
      // optional uint32 price_level = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_level_)));
          set_has_price_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_entry_tm;
        break;
      }
      
      // optional uint32 entry_tm = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_tm_)));
          set_has_entry_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aggressor;
        break;
      }
      
      // optional .quantmodel.CMEMarketData.AggressorType aggressor = 11 [default = UNKNOWN];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggressor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::CMEMarketData_AggressorType_IsValid(value)) {
            set_aggressor(static_cast< ::quantmodel::CMEMarketData_AggressorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mantissa;
        break;
      }
      
      // optional int64 mantissa = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mantissa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mantissa_)));
          set_has_mantissa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_exponent;
        break;
      }
      
      // optional int32 exponent = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exponent_)));
          set_has_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMEMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sending_tm = 1;
  if (has_sending_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sending_tm(), output);
  }
  
  // required uint32 security_id = 2;
  if (has_security_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->security_id(), output);
  }
  
  // required .quantmodel.CMEMarketData.UpdateAction update_action = 3;
  if (has_update_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->update_action(), output);
  }
  
  // required .quantmodel.CMEMarketData.EntryType entry_type = 4;
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entry_type(), output);
  }
  
  // required bool is_implied = 5;
  if (has_is_implied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_implied(), output);
  }
  
  // optional int32 entry_size = 6 [default = 0];
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->entry_size(), output);
  }
  
  // optional string entry_px = 7 [default = "0", deprecated = true];
  if (has_entry_px()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_px().data(), this->entry_px().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->entry_px(), output);
  }
  
  // optional uint32 orders = 8 [default = 0];
  if (has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->orders(), output);
  }
  
  // optional uint32 price_level = 9 [default = 0];
  if (has_price_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->price_level(), output);
  }
  
  // optional uint32 entry_tm = 10 [default = 0];
  if (has_entry_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->entry_tm(), output);
  }
  
  // optional .quantmodel.CMEMarketData.AggressorType aggressor = 11 [default = UNKNOWN];
  if (has_aggressor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->aggressor(), output);
  }
  
  // optional int64 mantissa = 12 [default = 0];
  if (has_mantissa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->mantissa(), output);
  }
  
  // optional int32 exponent = 13 [default = 0];
  if (has_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exponent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMEMarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sending_tm = 1;
  if (has_sending_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sending_tm(), target);
  }
  
  // required uint32 security_id = 2;
  if (has_security_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->security_id(), target);
  }
  
  // required .quantmodel.CMEMarketData.UpdateAction update_action = 3;
  if (has_update_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->update_action(), target);
  }
  
  // required .quantmodel.CMEMarketData.EntryType entry_type = 4;
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entry_type(), target);
  }
  
  // required bool is_implied = 5;
  if (has_is_implied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_implied(), target);
  }
  
  // optional int32 entry_size = 6 [default = 0];
  if (has_entry_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->entry_size(), target);
  }
  
  // optional string entry_px = 7 [default = "0", deprecated = true];
  if (has_entry_px()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_px().data(), this->entry_px().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->entry_px(), target);
  }
  
  // optional uint32 orders = 8 [default = 0];
  if (has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->orders(), target);
  }
  
  // optional uint32 price_level = 9 [default = 0];
  if (has_price_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->price_level(), target);
  }
  
  // optional uint32 entry_tm = 10 [default = 0];
  if (has_entry_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->entry_tm(), target);
  }
  
  // optional .quantmodel.CMEMarketData.AggressorType aggressor = 11 [default = UNKNOWN];
  if (has_aggressor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->aggressor(), target);
  }
  
  // optional int64 mantissa = 12 [default = 0];
  if (has_mantissa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->mantissa(), target);
  }
  
  // optional int32 exponent = 13 [default = 0];
  if (has_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->exponent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMEMarketData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sending_tm = 1;
    if (has_sending_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sending_tm());
    }
    
    // required uint32 security_id = 2;
    if (has_security_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->security_id());
    }
    
    // required .quantmodel.CMEMarketData.UpdateAction update_action = 3;
    if (has_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_action());
    }
    
    // required .quantmodel.CMEMarketData.EntryType entry_type = 4;
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }
    
    // required bool is_implied = 5;
    if (has_is_implied()) {
      total_size += 1 + 1;
    }
    
    // optional int32 entry_size = 6 [default = 0];
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entry_size());
    }
    
    // optional string entry_px = 7 [default = "0", deprecated = true];
    if (has_entry_px()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_px());
    }
    
    // optional uint32 orders = 8 [default = 0];
    if (has_orders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orders());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 price_level = 9 [default = 0];
    if (has_price_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_level());
    }
    
    // optional uint32 entry_tm = 10 [default = 0];
    if (has_entry_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_tm());
    }
    
    // optional .quantmodel.CMEMarketData.AggressorType aggressor = 11 [default = UNKNOWN];
    if (has_aggressor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggressor());
    }
    
    // optional int64 mantissa = 12 [default = 0];
    if (has_mantissa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mantissa());
    }
    
    // optional int32 exponent = 13 [default = 0];
    if (has_exponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exponent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMEMarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMEMarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMEMarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMEMarketData::MergeFrom(const CMEMarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sending_tm()) {
      set_sending_tm(from.sending_tm());
    }
    if (from.has_security_id()) {
      set_security_id(from.security_id());
    }
    if (from.has_update_action()) {
      set_update_action(from.update_action());
    }
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
    if (from.has_is_implied()) {
      set_is_implied(from.is_implied());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
    if (from.has_entry_px()) {
      set_entry_px(from.entry_px());
    }
    if (from.has_orders()) {
      set_orders(from.orders());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price_level()) {
      set_price_level(from.price_level());
    }
    if (from.has_entry_tm()) {
      set_entry_tm(from.entry_tm());
    }
    if (from.has_aggressor()) {
      set_aggressor(from.aggressor());
    }
    if (from.has_mantissa()) {
      set_mantissa(from.mantissa());
    }
    if (from.has_exponent()) {
      set_exponent(from.exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMEMarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMEMarketData::CopyFrom(const CMEMarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMEMarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CMEMarketData::Swap(CMEMarketData* other) {
  if (other != this) {
    std::swap(sending_tm_, other->sending_tm_);
    std::swap(security_id_, other->security_id_);
    std::swap(update_action_, other->update_action_);
    std::swap(entry_type_, other->entry_type_);
    std::swap(is_implied_, other->is_implied_);
    std::swap(entry_size_, other->entry_size_);
    std::swap(entry_px_, other->entry_px_);
    std::swap(orders_, other->orders_);
    std::swap(price_level_, other->price_level_);
    std::swap(entry_tm_, other->entry_tm_);
    std::swap(aggressor_, other->aggressor_);
    std::swap(mantissa_, other->mantissa_);
    std::swap(exponent_, other->exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMEMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMEMarketData_descriptor_;
  metadata.reflection = CMEMarketData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FastEngineBroadcast_BroadcastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastEngineBroadcast_BroadcastType_descriptor_;
}
bool FastEngineBroadcast_BroadcastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FastEngineBroadcast_BroadcastType FastEngineBroadcast::CME;
const FastEngineBroadcast_BroadcastType FastEngineBroadcast::ICE;
const FastEngineBroadcast_BroadcastType FastEngineBroadcast::CBOE;
const FastEngineBroadcast_BroadcastType FastEngineBroadcast::BroadcastType_MIN;
const FastEngineBroadcast_BroadcastType FastEngineBroadcast::BroadcastType_MAX;
const int FastEngineBroadcast::BroadcastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FastEngineBroadcast::kTimestampFieldNumber;
const int FastEngineBroadcast::kBroadcastTypeFieldNumber;
const int FastEngineBroadcast::kCmeMarketDataFieldNumber;
#endif  // !_MSC_VER

FastEngineBroadcast::FastEngineBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastEngineBroadcast::InitAsDefaultInstance() {
}

FastEngineBroadcast::FastEngineBroadcast(const FastEngineBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastEngineBroadcast::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  broadcast_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastEngineBroadcast::~FastEngineBroadcast() {
  SharedDtor();
}

void FastEngineBroadcast::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void FastEngineBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastEngineBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastEngineBroadcast_descriptor_;
}

const FastEngineBroadcast& FastEngineBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FastEngineBroadcast* FastEngineBroadcast::default_instance_ = NULL;

FastEngineBroadcast* FastEngineBroadcast::New() const {
  return new FastEngineBroadcast;
}

void FastEngineBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    broadcast_type_ = 1;
  }
  cme_market_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastEngineBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broadcast_type;
        break;
      }
      
      // required .quantmodel.FastEngineBroadcast.BroadcastType broadcast_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::FastEngineBroadcast_BroadcastType_IsValid(value)) {
            set_broadcast_type(static_cast< ::quantmodel::FastEngineBroadcast_BroadcastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cme_market_data;
        break;
      }
      
      // repeated .quantmodel.CMEMarketData cme_market_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cme_market_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cme_market_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cme_market_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastEngineBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  // required .quantmodel.FastEngineBroadcast.BroadcastType broadcast_type = 2;
  if (has_broadcast_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->broadcast_type(), output);
  }
  
  // repeated .quantmodel.CMEMarketData cme_market_data = 3;
  for (int i = 0; i < this->cme_market_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cme_market_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastEngineBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  // required .quantmodel.FastEngineBroadcast.BroadcastType broadcast_type = 2;
  if (has_broadcast_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->broadcast_type(), target);
  }
  
  // repeated .quantmodel.CMEMarketData cme_market_data = 3;
  for (int i = 0; i < this->cme_market_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cme_market_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastEngineBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // required .quantmodel.FastEngineBroadcast.BroadcastType broadcast_type = 2;
    if (has_broadcast_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->broadcast_type());
    }
    
  }
  // repeated .quantmodel.CMEMarketData cme_market_data = 3;
  total_size += 1 * this->cme_market_data_size();
  for (int i = 0; i < this->cme_market_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cme_market_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastEngineBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastEngineBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastEngineBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastEngineBroadcast::MergeFrom(const FastEngineBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  cme_market_data_.MergeFrom(from.cme_market_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_broadcast_type()) {
      set_broadcast_type(from.broadcast_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastEngineBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastEngineBroadcast::CopyFrom(const FastEngineBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastEngineBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < cme_market_data_size(); i++) {
    if (!this->cme_market_data(i).IsInitialized()) return false;
  }
  return true;
}

void FastEngineBroadcast::Swap(FastEngineBroadcast* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(broadcast_type_, other->broadcast_type_);
    cme_market_data_.Swap(&other->cme_market_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastEngineBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastEngineBroadcast_descriptor_;
  metadata.reflection = FastEngineBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixEngineBroadcast::kTimestampFieldNumber;
const int FixEngineBroadcast::kInstrumentIdFieldNumber;
const int FixEngineBroadcast::kFixMarketDataFieldNumber;
#endif  // !_MSC_VER

FixEngineBroadcast::FixEngineBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixEngineBroadcast::InitAsDefaultInstance() {
}

FixEngineBroadcast::FixEngineBroadcast(const FixEngineBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixEngineBroadcast::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixEngineBroadcast::~FixEngineBroadcast() {
  SharedDtor();
}

void FixEngineBroadcast::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (this != default_instance_) {
  }
}

void FixEngineBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixEngineBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineBroadcast_descriptor_;
}

const FixEngineBroadcast& FixEngineBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FixEngineBroadcast* FixEngineBroadcast::default_instance_ = NULL;

FixEngineBroadcast* FixEngineBroadcast::New() const {
  return new FixEngineBroadcast;
}

void FixEngineBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
  }
  fix_market_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixEngineBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fix_market_data;
        break;
      }
      
      // repeated .quantmodel.FixMarketData fix_market_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_market_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_market_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fix_market_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixEngineBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  // optional string instrument_id = 2;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument_id(), output);
  }
  
  // repeated .quantmodel.FixMarketData fix_market_data = 3;
  for (int i = 0; i < this->fix_market_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fix_market_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixEngineBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  // optional string instrument_id = 2;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument_id(), target);
  }
  
  // repeated .quantmodel.FixMarketData fix_market_data = 3;
  for (int i = 0; i < this->fix_market_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fix_market_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixEngineBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional string instrument_id = 2;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
  }
  // repeated .quantmodel.FixMarketData fix_market_data = 3;
  total_size += 1 * this->fix_market_data_size();
  for (int i = 0; i < this->fix_market_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_market_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixEngineBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixEngineBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixEngineBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixEngineBroadcast::MergeFrom(const FixEngineBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  fix_market_data_.MergeFrom(from.fix_market_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixEngineBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixEngineBroadcast::CopyFrom(const FixEngineBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixEngineBroadcast::IsInitialized() const {
  
  return true;
}

void FixEngineBroadcast::Swap(FixEngineBroadcast* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(instrument_id_, other->instrument_id_);
    fix_market_data_.Swap(&other->fix_market_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixEngineBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixEngineBroadcast_descriptor_;
  metadata.reflection = FixEngineBroadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MarketDataPriceData::_default_last_prc_("0.0");
#ifndef _MSC_VER
const int MarketDataPriceData::kInstrumentIdFieldNumber;
const int MarketDataPriceData::kLastPrcFieldNumber;
#endif  // !_MSC_VER

MarketDataPriceData::MarketDataPriceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataPriceData::InitAsDefaultInstance() {
}

MarketDataPriceData::MarketDataPriceData(const MarketDataPriceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataPriceData::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_prc_ = const_cast< ::std::string*>(&_default_last_prc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataPriceData::~MarketDataPriceData() {
  SharedDtor();
}

void MarketDataPriceData::SharedDtor() {
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (last_prc_ != &_default_last_prc_) {
    delete last_prc_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataPriceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataPriceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataPriceData_descriptor_;
}

const MarketDataPriceData& MarketDataPriceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

MarketDataPriceData* MarketDataPriceData::default_instance_ = NULL;

MarketDataPriceData* MarketDataPriceData::New() const {
  return new MarketDataPriceData;
}

void MarketDataPriceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_last_prc()) {
      if (last_prc_ != &_default_last_prc_) {
        last_prc_->assign(_default_last_prc_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataPriceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_prc;
        break;
      }
      
      // optional string last_prc = 2 [default = "0.0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_prc().data(), this->last_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataPriceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_id(), output);
  }
  
  // optional string last_prc = 2 [default = "0.0"];
  if (has_last_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_prc().data(), this->last_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_prc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataPriceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_id(), target);
  }
  
  // optional string last_prc = 2 [default = "0.0"];
  if (has_last_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_prc().data(), this->last_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_prc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataPriceData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string last_prc = 2 [default = "0.0"];
    if (has_last_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_prc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataPriceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataPriceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataPriceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataPriceData::MergeFrom(const MarketDataPriceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_last_prc()) {
      set_last_prc(from.last_prc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataPriceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataPriceData::CopyFrom(const MarketDataPriceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataPriceData::IsInitialized() const {
  
  return true;
}

void MarketDataPriceData::Swap(MarketDataPriceData* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(last_prc_, other->last_prc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataPriceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataPriceData_descriptor_;
  metadata.reflection = MarketDataPriceData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketDataTradeData_AggressorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataTradeData_AggressorType_descriptor_;
}
bool MarketDataTradeData_AggressorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketDataTradeData_AggressorType MarketDataTradeData::UNKNOWN;
const MarketDataTradeData_AggressorType MarketDataTradeData::BUY;
const MarketDataTradeData_AggressorType MarketDataTradeData::SELL;
const MarketDataTradeData_AggressorType MarketDataTradeData::AggressorType_MIN;
const MarketDataTradeData_AggressorType MarketDataTradeData::AggressorType_MAX;
const int MarketDataTradeData::AggressorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string MarketDataTradeData::_default_trade_prc_("0.0");
#ifndef _MSC_VER
const int MarketDataTradeData::kInstrumentIdFieldNumber;
const int MarketDataTradeData::kAggressorFieldNumber;
const int MarketDataTradeData::kTradePrcFieldNumber;
const int MarketDataTradeData::kTradeQtyFieldNumber;
const int MarketDataTradeData::kEntryTmFieldNumber;
#endif  // !_MSC_VER

MarketDataTradeData::MarketDataTradeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataTradeData::InitAsDefaultInstance() {
}

MarketDataTradeData::MarketDataTradeData(const MarketDataTradeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataTradeData::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aggressor_ = 0;
  trade_prc_ = const_cast< ::std::string*>(&_default_trade_prc_);
  trade_qty_ = 0;
  entry_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataTradeData::~MarketDataTradeData() {
  SharedDtor();
}

void MarketDataTradeData::SharedDtor() {
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (trade_prc_ != &_default_trade_prc_) {
    delete trade_prc_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataTradeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataTradeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataTradeData_descriptor_;
}

const MarketDataTradeData& MarketDataTradeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

MarketDataTradeData* MarketDataTradeData::default_instance_ = NULL;

MarketDataTradeData* MarketDataTradeData::New() const {
  return new MarketDataTradeData;
}

void MarketDataTradeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    aggressor_ = 0;
    if (has_trade_prc()) {
      if (trade_prc_ != &_default_trade_prc_) {
        trade_prc_->assign(_default_trade_prc_);
      }
    }
    trade_qty_ = 0;
    entry_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataTradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aggressor;
        break;
      }
      
      // optional .quantmodel.MarketDataTradeData.AggressorType aggressor = 2 [default = UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggressor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::MarketDataTradeData_AggressorType_IsValid(value)) {
            set_aggressor(static_cast< ::quantmodel::MarketDataTradeData_AggressorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trade_prc;
        break;
      }
      
      // optional string trade_prc = 3 [default = "0.0"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trade_prc().data(), this->trade_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trade_qty;
        break;
      }
      
      // optional int32 trade_qty = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trade_qty_)));
          set_has_trade_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entry_tm;
        break;
      }
      
      // optional uint32 entry_tm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_tm_)));
          set_has_entry_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataTradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_id(), output);
  }
  
  // optional .quantmodel.MarketDataTradeData.AggressorType aggressor = 2 [default = UNKNOWN];
  if (has_aggressor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aggressor(), output);
  }
  
  // optional string trade_prc = 3 [default = "0.0"];
  if (has_trade_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_prc().data(), this->trade_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->trade_prc(), output);
  }
  
  // optional int32 trade_qty = 4 [default = 0];
  if (has_trade_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trade_qty(), output);
  }
  
  // optional uint32 entry_tm = 5;
  if (has_entry_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->entry_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataTradeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_id(), target);
  }
  
  // optional .quantmodel.MarketDataTradeData.AggressorType aggressor = 2 [default = UNKNOWN];
  if (has_aggressor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aggressor(), target);
  }
  
  // optional string trade_prc = 3 [default = "0.0"];
  if (has_trade_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_prc().data(), this->trade_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trade_prc(), target);
  }
  
  // optional int32 trade_qty = 4 [default = 0];
  if (has_trade_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trade_qty(), target);
  }
  
  // optional uint32 entry_tm = 5;
  if (has_entry_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->entry_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataTradeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional .quantmodel.MarketDataTradeData.AggressorType aggressor = 2 [default = UNKNOWN];
    if (has_aggressor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggressor());
    }
    
    // optional string trade_prc = 3 [default = "0.0"];
    if (has_trade_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trade_prc());
    }
    
    // optional int32 trade_qty = 4 [default = 0];
    if (has_trade_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trade_qty());
    }
    
    // optional uint32 entry_tm = 5;
    if (has_entry_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataTradeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataTradeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataTradeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataTradeData::MergeFrom(const MarketDataTradeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_aggressor()) {
      set_aggressor(from.aggressor());
    }
    if (from.has_trade_prc()) {
      set_trade_prc(from.trade_prc());
    }
    if (from.has_trade_qty()) {
      set_trade_qty(from.trade_qty());
    }
    if (from.has_entry_tm()) {
      set_entry_tm(from.entry_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataTradeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataTradeData::CopyFrom(const MarketDataTradeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataTradeData::IsInitialized() const {
  
  return true;
}

void MarketDataTradeData::Swap(MarketDataTradeData* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(aggressor_, other->aggressor_);
    std::swap(trade_prc_, other->trade_prc_);
    std::swap(trade_qty_, other->trade_qty_);
    std::swap(entry_tm_, other->entry_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataTradeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataTradeData_descriptor_;
  metadata.reflection = MarketDataTradeData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketDataQuoteData_QuoteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataQuoteData_QuoteType_descriptor_;
}
bool MarketDataQuoteData_QuoteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketDataQuoteData_QuoteType MarketDataQuoteData::BID;
const MarketDataQuoteData_QuoteType MarketDataQuoteData::ASK;
const MarketDataQuoteData_QuoteType MarketDataQuoteData::QuoteType_MIN;
const MarketDataQuoteData_QuoteType MarketDataQuoteData::QuoteType_MAX;
const int MarketDataQuoteData::QuoteType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string MarketDataQuoteData::_default_quote_prc_("0.0");
#ifndef _MSC_VER
const int MarketDataQuoteData::kInstrumentIdFieldNumber;
const int MarketDataQuoteData::kTypeFieldNumber;
const int MarketDataQuoteData::kQuotePrcFieldNumber;
const int MarketDataQuoteData::kQuoteQtyFieldNumber;
const int MarketDataQuoteData::kLevelFieldNumber;
const int MarketDataQuoteData::kOrdersFieldNumber;
#endif  // !_MSC_VER

MarketDataQuoteData::MarketDataQuoteData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataQuoteData::InitAsDefaultInstance() {
}

MarketDataQuoteData::MarketDataQuoteData(const MarketDataQuoteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataQuoteData::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  quote_prc_ = const_cast< ::std::string*>(&_default_quote_prc_);
  quote_qty_ = 0;
  level_ = 0;
  orders_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataQuoteData::~MarketDataQuoteData() {
  SharedDtor();
}

void MarketDataQuoteData::SharedDtor() {
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (quote_prc_ != &_default_quote_prc_) {
    delete quote_prc_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataQuoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataQuoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataQuoteData_descriptor_;
}

const MarketDataQuoteData& MarketDataQuoteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

MarketDataQuoteData* MarketDataQuoteData::default_instance_ = NULL;

MarketDataQuoteData* MarketDataQuoteData::New() const {
  return new MarketDataQuoteData;
}

void MarketDataQuoteData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    type_ = 1;
    if (has_quote_prc()) {
      if (quote_prc_ != &_default_quote_prc_) {
        quote_prc_->assign(_default_quote_prc_);
      }
    }
    quote_qty_ = 0;
    level_ = 0;
    orders_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataQuoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.MarketDataQuoteData.QuoteType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::MarketDataQuoteData_QuoteType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::MarketDataQuoteData_QuoteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quote_prc;
        break;
      }
      
      // optional string quote_prc = 3 [default = "0.0"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quote_prc().data(), this->quote_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quote_qty;
        break;
      }
      
      // optional int32 quote_qty = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quote_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quote_qty_)));
          set_has_quote_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_orders;
        break;
      }
      
      // optional int32 orders = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orders_)));
          set_has_orders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataQuoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_id(), output);
  }
  
  // optional .quantmodel.MarketDataQuoteData.QuoteType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string quote_prc = 3 [default = "0.0"];
  if (has_quote_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quote_prc().data(), this->quote_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->quote_prc(), output);
  }
  
  // optional int32 quote_qty = 4 [default = 0];
  if (has_quote_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quote_qty(), output);
  }
  
  // optional int32 level = 5 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 orders = 6 [default = 0];
  if (has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->orders(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataQuoteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_id(), target);
  }
  
  // optional .quantmodel.MarketDataQuoteData.QuoteType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string quote_prc = 3 [default = "0.0"];
  if (has_quote_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quote_prc().data(), this->quote_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quote_prc(), target);
  }
  
  // optional int32 quote_qty = 4 [default = 0];
  if (has_quote_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quote_qty(), target);
  }
  
  // optional int32 level = 5 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 orders = 6 [default = 0];
  if (has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->orders(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataQuoteData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional .quantmodel.MarketDataQuoteData.QuoteType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string quote_prc = 3 [default = "0.0"];
    if (has_quote_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quote_prc());
    }
    
    // optional int32 quote_qty = 4 [default = 0];
    if (has_quote_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quote_qty());
    }
    
    // optional int32 level = 5 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 orders = 6 [default = 0];
    if (has_orders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orders());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataQuoteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataQuoteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataQuoteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataQuoteData::MergeFrom(const MarketDataQuoteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quote_prc()) {
      set_quote_prc(from.quote_prc());
    }
    if (from.has_quote_qty()) {
      set_quote_qty(from.quote_qty());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_orders()) {
      set_orders(from.orders());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataQuoteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataQuoteData::CopyFrom(const MarketDataQuoteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataQuoteData::IsInitialized() const {
  
  return true;
}

void MarketDataQuoteData::Swap(MarketDataQuoteData* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(type_, other->type_);
    std::swap(quote_prc_, other->quote_prc_);
    std::swap(quote_qty_, other->quote_qty_);
    std::swap(level_, other->level_);
    std::swap(orders_, other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataQuoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataQuoteData_descriptor_;
  metadata.reflection = MarketDataQuoteData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketDataBroadcast_BroadcastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataBroadcast_BroadcastType_descriptor_;
}
bool MarketDataBroadcast_BroadcastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketDataBroadcast_BroadcastType MarketDataBroadcast::PRICE;
const MarketDataBroadcast_BroadcastType MarketDataBroadcast::TRADE;
const MarketDataBroadcast_BroadcastType MarketDataBroadcast::QUOTE;
const MarketDataBroadcast_BroadcastType MarketDataBroadcast::BroadcastType_MIN;
const MarketDataBroadcast_BroadcastType MarketDataBroadcast::BroadcastType_MAX;
const int MarketDataBroadcast::BroadcastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarketDataBroadcast::kBroadcastIdFieldNumber;
const int MarketDataBroadcast::kTimestampFieldNumber;
const int MarketDataBroadcast::kTypeFieldNumber;
const int MarketDataBroadcast::kPriceDataFieldNumber;
const int MarketDataBroadcast::kTradeDataFieldNumber;
const int MarketDataBroadcast::kQuoteDataFieldNumber;
#endif  // !_MSC_VER

MarketDataBroadcast::MarketDataBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataBroadcast::InitAsDefaultInstance() {
}

MarketDataBroadcast::MarketDataBroadcast(const MarketDataBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataBroadcast::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataBroadcast::~MarketDataBroadcast() {
  SharedDtor();
}

void MarketDataBroadcast::SharedDtor() {
  if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataBroadcast_descriptor_;
}

const MarketDataBroadcast& MarketDataBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

MarketDataBroadcast* MarketDataBroadcast::default_instance_ = NULL;

MarketDataBroadcast* MarketDataBroadcast::New() const {
  return new MarketDataBroadcast;
}

void MarketDataBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_broadcast_id()) {
      if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
  }
  price_data_.Clear();
  trade_data_.Clear();
  quote_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string broadcast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broadcast_id().data(), this->broadcast_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.MarketDataBroadcast.BroadcastType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::MarketDataBroadcast_BroadcastType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::MarketDataBroadcast_BroadcastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_price_data;
        break;
      }
      
      // repeated .quantmodel.MarketDataPriceData price_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_price_data;
        if (input->ExpectTag(50)) goto parse_trade_data;
        break;
      }
      
      // repeated .quantmodel.MarketDataTradeData trade_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_trade_data;
        if (input->ExpectTag(58)) goto parse_quote_data;
        break;
      }
      
      // repeated .quantmodel.MarketDataQuoteData quote_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quote_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quote_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->broadcast_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .quantmodel.MarketDataBroadcast.BroadcastType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // repeated .quantmodel.MarketDataPriceData price_data = 5;
  for (int i = 0; i < this->price_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->price_data(i), output);
  }
  
  // repeated .quantmodel.MarketDataTradeData trade_data = 6;
  for (int i = 0; i < this->trade_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trade_data(i), output);
  }
  
  // repeated .quantmodel.MarketDataQuoteData quote_data = 7;
  for (int i = 0; i < this->quote_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quote_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broadcast_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .quantmodel.MarketDataBroadcast.BroadcastType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // repeated .quantmodel.MarketDataPriceData price_data = 5;
  for (int i = 0; i < this->price_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->price_data(i), target);
  }
  
  // repeated .quantmodel.MarketDataTradeData trade_data = 6;
  for (int i = 0; i < this->trade_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trade_data(i), target);
  }
  
  // repeated .quantmodel.MarketDataQuoteData quote_data = 7;
  for (int i = 0; i < this->quote_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quote_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.MarketDataBroadcast.BroadcastType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .quantmodel.MarketDataPriceData price_data = 5;
  total_size += 1 * this->price_data_size();
  for (int i = 0; i < this->price_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->price_data(i));
  }
  
  // repeated .quantmodel.MarketDataTradeData trade_data = 6;
  total_size += 1 * this->trade_data_size();
  for (int i = 0; i < this->trade_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trade_data(i));
  }
  
  // repeated .quantmodel.MarketDataQuoteData quote_data = 7;
  total_size += 1 * this->quote_data_size();
  for (int i = 0; i < this->quote_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quote_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataBroadcast::MergeFrom(const MarketDataBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  price_data_.MergeFrom(from.price_data_);
  trade_data_.MergeFrom(from.trade_data_);
  quote_data_.MergeFrom(from.quote_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataBroadcast::CopyFrom(const MarketDataBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataBroadcast::IsInitialized() const {
  
  return true;
}

void MarketDataBroadcast::Swap(MarketDataBroadcast* other) {
  if (other != this) {
    std::swap(broadcast_id_, other->broadcast_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    price_data_.Swap(&other->price_data_);
    trade_data_.Swap(&other->trade_data_);
    quote_data_.Swap(&other->quote_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataBroadcast_descriptor_;
  metadata.reflection = MarketDataBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatData::kHeartbeatIdFieldNumber;
const int HeartbeatData::kTimestampFieldNumber;
#endif  // !_MSC_VER

HeartbeatData::HeartbeatData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatData::InitAsDefaultInstance() {
}

HeartbeatData::HeartbeatData(const HeartbeatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatData::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatData::~HeartbeatData() {
  SharedDtor();
}

void HeartbeatData::SharedDtor() {
  if (heartbeat_id_ != &::google::protobuf::internal::kEmptyString) {
    delete heartbeat_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void HeartbeatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatData_descriptor_;
}

const HeartbeatData& HeartbeatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

HeartbeatData* HeartbeatData::default_instance_ = NULL;

HeartbeatData* HeartbeatData::New() const {
  return new HeartbeatData;
}

void HeartbeatData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_heartbeat_id()) {
      if (heartbeat_id_ != &::google::protobuf::internal::kEmptyString) {
        heartbeat_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string heartbeat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heartbeat_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->heartbeat_id().data(), this->heartbeat_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string heartbeat_id = 1;
  if (has_heartbeat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heartbeat_id().data(), this->heartbeat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->heartbeat_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string heartbeat_id = 1;
  if (has_heartbeat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heartbeat_id().data(), this->heartbeat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heartbeat_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string heartbeat_id = 1;
    if (has_heartbeat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heartbeat_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatData::MergeFrom(const HeartbeatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_id()) {
      set_heartbeat_id(from.heartbeat_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatData::CopyFrom(const HeartbeatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatData::IsInitialized() const {
  
  return true;
}

void HeartbeatData::Swap(HeartbeatData* other) {
  if (other != this) {
    std::swap(heartbeat_id_, other->heartbeat_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatData_descriptor_;
  metadata.reflection = HeartbeatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixEngineData::kFixEngineIdFieldNumber;
const int FixEngineData::kSessionIdFieldNumber;
#endif  // !_MSC_VER

FixEngineData::FixEngineData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixEngineData::InitAsDefaultInstance() {
}

FixEngineData::FixEngineData(const FixEngineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixEngineData::SharedCtor() {
  _cached_size_ = 0;
  fix_engine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixEngineData::~FixEngineData() {
  SharedDtor();
}

void FixEngineData::SharedDtor() {
  if (fix_engine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fix_engine_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void FixEngineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixEngineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineData_descriptor_;
}

const FixEngineData& FixEngineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FixEngineData* FixEngineData::default_instance_ = NULL;

FixEngineData* FixEngineData::New() const {
  return new FixEngineData;
}

void FixEngineData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fix_engine_id()) {
      if (fix_engine_id_ != &::google::protobuf::internal::kEmptyString) {
        fix_engine_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixEngineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fix_engine_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fix_engine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fix_engine_id().data(), this->fix_engine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixEngineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fix_engine_id = 1;
  if (has_fix_engine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fix_engine_id().data(), this->fix_engine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fix_engine_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixEngineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fix_engine_id = 1;
  if (has_fix_engine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fix_engine_id().data(), this->fix_engine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fix_engine_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixEngineData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fix_engine_id = 1;
    if (has_fix_engine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fix_engine_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixEngineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixEngineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixEngineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixEngineData::MergeFrom(const FixEngineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fix_engine_id()) {
      set_fix_engine_id(from.fix_engine_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixEngineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixEngineData::CopyFrom(const FixEngineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixEngineData::IsInitialized() const {
  
  return true;
}

void FixEngineData::Swap(FixEngineData* other) {
  if (other != this) {
    std::swap(fix_engine_id_, other->fix_engine_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixEngineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixEngineData_descriptor_;
  metadata.reflection = FixEngineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemParameterData::kParameterIdFieldNumber;
const int SystemParameterData::kCategoryFieldNumber;
const int SystemParameterData::kNameFieldNumber;
const int SystemParameterData::kValueFieldNumber;
#endif  // !_MSC_VER

SystemParameterData::SystemParameterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemParameterData::InitAsDefaultInstance() {
}

SystemParameterData::SystemParameterData(const SystemParameterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemParameterData::SharedCtor() {
  _cached_size_ = 0;
  parameter_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemParameterData::~SystemParameterData() {
  SharedDtor();
}

void SystemParameterData::SharedDtor() {
  if (parameter_id_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_id_;
  }
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SystemParameterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemParameterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemParameterData_descriptor_;
}

const SystemParameterData& SystemParameterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

SystemParameterData* SystemParameterData::default_instance_ = NULL;

SystemParameterData* SystemParameterData::New() const {
  return new SystemParameterData;
}

void SystemParameterData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parameter_id()) {
      if (parameter_id_ != &::google::protobuf::internal::kEmptyString) {
        parameter_id_->clear();
      }
    }
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemParameterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parameter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter_id().data(), this->parameter_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_category;
        break;
      }
      
      // optional string category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemParameterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string parameter_id = 1;
  if (has_parameter_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter_id().data(), this->parameter_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parameter_id(), output);
  }
  
  // optional string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->category(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemParameterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string parameter_id = 1;
  if (has_parameter_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter_id().data(), this->parameter_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parameter_id(), target);
  }
  
  // optional string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemParameterData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string parameter_id = 1;
    if (has_parameter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter_id());
    }
    
    // optional string category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemParameterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemParameterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemParameterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemParameterData::MergeFrom(const SystemParameterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameter_id()) {
      set_parameter_id(from.parameter_id());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemParameterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemParameterData::CopyFrom(const SystemParameterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemParameterData::IsInitialized() const {
  
  return true;
}

void SystemParameterData::Swap(SystemParameterData* other) {
  if (other != this) {
    std::swap(parameter_id_, other->parameter_id_);
    std::swap(category_, other->category_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemParameterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemParameterData_descriptor_;
  metadata.reflection = SystemParameterData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PositionOvernightData_PositionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOvernightData_PositionType_descriptor_;
}
bool PositionOvernightData_PositionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PositionOvernightData_PositionType PositionOvernightData::CLOSED;
const PositionOvernightData_PositionType PositionOvernightData::LONG;
const PositionOvernightData_PositionType PositionOvernightData::SHORT;
const PositionOvernightData_PositionType PositionOvernightData::PositionType_MIN;
const PositionOvernightData_PositionType PositionOvernightData::PositionType_MAX;
const int PositionOvernightData::PositionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string PositionOvernightData::_default_open_pos_("0");
const ::std::string PositionOvernightData::_default_open_prc_("0");
#ifndef _MSC_VER
const int PositionOvernightData::kPositionOvernightIdFieldNumber;
const int PositionOvernightData::kAccountIdFieldNumber;
const int PositionOvernightData::kInstrumentIdFieldNumber;
const int PositionOvernightData::kInvestmentSystemIdFieldNumber;
const int PositionOvernightData::kPositionTypeFieldNumber;
const int PositionOvernightData::kOpenPosFieldNumber;
const int PositionOvernightData::kOpenPrcFieldNumber;
const int PositionOvernightData::kIsActiveFieldNumber;
const int PositionOvernightData::kAddedDatetimeFieldNumber;
const int PositionOvernightData::kAddedByFieldNumber;
const int PositionOvernightData::kUpdatedDatetimeFieldNumber;
const int PositionOvernightData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

PositionOvernightData::PositionOvernightData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionOvernightData::InitAsDefaultInstance() {
}

PositionOvernightData::PositionOvernightData(const PositionOvernightData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionOvernightData::SharedCtor() {
  _cached_size_ = 0;
  position_overnight_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_type_ = 0;
  open_pos_ = const_cast< ::std::string*>(&_default_open_pos_);
  open_prc_ = const_cast< ::std::string*>(&_default_open_prc_);
  is_active_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionOvernightData::~PositionOvernightData() {
  SharedDtor();
}

void PositionOvernightData::SharedDtor() {
  if (position_overnight_id_ != &::google::protobuf::internal::kEmptyString) {
    delete position_overnight_id_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (open_pos_ != &_default_open_pos_) {
    delete open_pos_;
  }
  if (open_prc_ != &_default_open_prc_) {
    delete open_prc_;
  }
  if (is_active_ != &::google::protobuf::internal::kEmptyString) {
    delete is_active_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void PositionOvernightData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionOvernightData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOvernightData_descriptor_;
}

const PositionOvernightData& PositionOvernightData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

PositionOvernightData* PositionOvernightData::default_instance_ = NULL;

PositionOvernightData* PositionOvernightData::New() const {
  return new PositionOvernightData;
}

void PositionOvernightData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position_overnight_id()) {
      if (position_overnight_id_ != &::google::protobuf::internal::kEmptyString) {
        position_overnight_id_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    position_type_ = 0;
    if (has_open_pos()) {
      if (open_pos_ != &_default_open_pos_) {
        open_pos_->assign(_default_open_pos_);
      }
    }
    if (has_open_prc()) {
      if (open_prc_ != &_default_open_prc_) {
        open_prc_->assign(_default_open_prc_);
      }
    }
    if (has_is_active()) {
      if (is_active_ != &::google::protobuf::internal::kEmptyString) {
        is_active_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionOvernightData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string position_overnight_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_overnight_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position_overnight_id().data(), this->position_overnight_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_position_type;
        break;
      }
      
      // optional .quantmodel.PositionOvernightData.PositionType position_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::PositionOvernightData_PositionType_IsValid(value)) {
            set_position_type(static_cast< ::quantmodel::PositionOvernightData_PositionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_open_pos;
        break;
      }
      
      // optional string open_pos = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_pos().data(), this->open_pos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_open_prc;
        break;
      }
      
      // optional string open_prc = 7 [default = "0"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_prc().data(), this->open_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionOvernightData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string position_overnight_id = 1;
  if (has_position_overnight_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_overnight_id().data(), this->position_overnight_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->position_overnight_id(), output);
  }
  
  // optional string account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_id(), output);
  }
  
  // optional string instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrument_id(), output);
  }
  
  // optional string investment_system_id = 4;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->investment_system_id(), output);
  }
  
  // optional .quantmodel.PositionOvernightData.PositionType position_type = 5;
  if (has_position_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->position_type(), output);
  }
  
  // optional string open_pos = 6 [default = "0"];
  if (has_open_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_pos().data(), this->open_pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->open_pos(), output);
  }
  
  // optional string open_prc = 7 [default = "0"];
  if (has_open_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_prc().data(), this->open_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->open_prc(), output);
  }
  
  // optional string is_active = 8;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->is_active(), output);
  }
  
  // optional string added_datetime = 9;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->added_datetime(), output);
  }
  
  // optional string added_by = 10;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->added_by(), output);
  }
  
  // optional string updated_datetime = 11;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 12;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionOvernightData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string position_overnight_id = 1;
  if (has_position_overnight_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_overnight_id().data(), this->position_overnight_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->position_overnight_id(), target);
  }
  
  // optional string account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }
  
  // optional string instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrument_id(), target);
  }
  
  // optional string investment_system_id = 4;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investment_system_id(), target);
  }
  
  // optional .quantmodel.PositionOvernightData.PositionType position_type = 5;
  if (has_position_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->position_type(), target);
  }
  
  // optional string open_pos = 6 [default = "0"];
  if (has_open_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_pos().data(), this->open_pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->open_pos(), target);
  }
  
  // optional string open_prc = 7 [default = "0"];
  if (has_open_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_prc().data(), this->open_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->open_prc(), target);
  }
  
  // optional string is_active = 8;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->is_active(), target);
  }
  
  // optional string added_datetime = 9;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->added_datetime(), target);
  }
  
  // optional string added_by = 10;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->added_by(), target);
  }
  
  // optional string updated_datetime = 11;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 12;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionOvernightData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string position_overnight_id = 1;
    if (has_position_overnight_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_overnight_id());
    }
    
    // optional string account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string instrument_id = 3;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string investment_system_id = 4;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional .quantmodel.PositionOvernightData.PositionType position_type = 5;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_type());
    }
    
    // optional string open_pos = 6 [default = "0"];
    if (has_open_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_pos());
    }
    
    // optional string open_prc = 7 [default = "0"];
    if (has_open_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_prc());
    }
    
    // optional string is_active = 8;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string added_datetime = 9;
    if (has_added_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 10;
    if (has_added_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 11;
    if (has_updated_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 12;
    if (has_updated_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionOvernightData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionOvernightData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionOvernightData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionOvernightData::MergeFrom(const PositionOvernightData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_overnight_id()) {
      set_position_overnight_id(from.position_overnight_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_position_type()) {
      set_position_type(from.position_type());
    }
    if (from.has_open_pos()) {
      set_open_pos(from.open_pos());
    }
    if (from.has_open_prc()) {
      set_open_prc(from.open_prc());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionOvernightData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionOvernightData::CopyFrom(const PositionOvernightData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionOvernightData::IsInitialized() const {
  
  return true;
}

void PositionOvernightData::Swap(PositionOvernightData* other) {
  if (other != this) {
    std::swap(position_overnight_id_, other->position_overnight_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(position_type_, other->position_type_);
    std::swap(open_pos_, other->open_pos_);
    std::swap(open_prc_, other->open_prc_);
    std::swap(is_active_, other->is_active_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionOvernightData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionOvernightData_descriptor_;
  metadata.reflection = PositionOvernightData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AccountLimitData::_default_max_open_long_qty_("0");
const ::std::string AccountLimitData::_default_max_open_short_qty_("0");
const ::std::string AccountLimitData::_default_max_release_qty_("0");
const ::std::string AccountLimitData::_default_is_active_("0");
#ifndef _MSC_VER
const int AccountLimitData::kAccountIdFieldNumber;
const int AccountLimitData::kSymbolFieldNumber;
const int AccountLimitData::kSecurityExchangeFieldNumber;
const int AccountLimitData::kSessionIdFieldNumber;
const int AccountLimitData::kMaxOpenLongQtyFieldNumber;
const int AccountLimitData::kMaxOpenShortQtyFieldNumber;
const int AccountLimitData::kMaxReleaseQtyFieldNumber;
const int AccountLimitData::kIsActiveFieldNumber;
const int AccountLimitData::kAddedDatetimeFieldNumber;
const int AccountLimitData::kAddedByFieldNumber;
const int AccountLimitData::kUpdatedDatetimeFieldNumber;
const int AccountLimitData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

AccountLimitData::AccountLimitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLimitData::InitAsDefaultInstance() {
}

AccountLimitData::AccountLimitData(const AccountLimitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLimitData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_open_long_qty_ = const_cast< ::std::string*>(&_default_max_open_long_qty_);
  max_open_short_qty_ = const_cast< ::std::string*>(&_default_max_open_short_qty_);
  max_release_qty_ = const_cast< ::std::string*>(&_default_max_release_qty_);
  is_active_ = const_cast< ::std::string*>(&_default_is_active_);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLimitData::~AccountLimitData() {
  SharedDtor();
}

void AccountLimitData::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete security_exchange_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (max_open_long_qty_ != &_default_max_open_long_qty_) {
    delete max_open_long_qty_;
  }
  if (max_open_short_qty_ != &_default_max_open_short_qty_) {
    delete max_open_short_qty_;
  }
  if (max_release_qty_ != &_default_max_release_qty_) {
    delete max_release_qty_;
  }
  if (is_active_ != &_default_is_active_) {
    delete is_active_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void AccountLimitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLimitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLimitData_descriptor_;
}

const AccountLimitData& AccountLimitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

AccountLimitData* AccountLimitData::default_instance_ = NULL;

AccountLimitData* AccountLimitData::New() const {
  return new AccountLimitData;
}

void AccountLimitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_security_exchange()) {
      if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
        security_exchange_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_max_open_long_qty()) {
      if (max_open_long_qty_ != &_default_max_open_long_qty_) {
        max_open_long_qty_->assign(_default_max_open_long_qty_);
      }
    }
    if (has_max_open_short_qty()) {
      if (max_open_short_qty_ != &_default_max_open_short_qty_) {
        max_open_short_qty_->assign(_default_max_open_short_qty_);
      }
    }
    if (has_max_release_qty()) {
      if (max_release_qty_ != &_default_max_release_qty_) {
        max_release_qty_->assign(_default_max_release_qty_);
      }
    }
    if (has_is_active()) {
      if (is_active_ != &_default_is_active_) {
        is_active_->assign(_default_is_active_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }
      
      // optional string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security_exchange;
        break;
      }
      
      // optional string security_exchange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_exchange().data(), this->security_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_max_open_long_qty;
        break;
      }
      
      // optional string max_open_long_qty = 5 [default = "0"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_open_long_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_open_long_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->max_open_long_qty().data(), this->max_open_long_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_max_open_short_qty;
        break;
      }
      
      // optional string max_open_short_qty = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_open_short_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_open_short_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->max_open_short_qty().data(), this->max_open_short_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_max_release_qty;
        break;
      }
      
      // optional string max_release_qty = 7 [default = "0"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_release_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_release_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->max_release_qty().data(), this->max_release_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 8 [default = "0"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_id(), output);
  }
  
  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }
  
  // optional string security_exchange = 3;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->security_exchange(), output);
  }
  
  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session_id(), output);
  }
  
  // optional string max_open_long_qty = 5 [default = "0"];
  if (has_max_open_long_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_open_long_qty().data(), this->max_open_long_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->max_open_long_qty(), output);
  }
  
  // optional string max_open_short_qty = 6 [default = "0"];
  if (has_max_open_short_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_open_short_qty().data(), this->max_open_short_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->max_open_short_qty(), output);
  }
  
  // optional string max_release_qty = 7 [default = "0"];
  if (has_max_release_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_release_qty().data(), this->max_release_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->max_release_qty(), output);
  }
  
  // optional string is_active = 8 [default = "0"];
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->is_active(), output);
  }
  
  // optional string added_datetime = 9;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->added_datetime(), output);
  }
  
  // optional string added_by = 10;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->added_by(), output);
  }
  
  // optional string updated_datetime = 11;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 12;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLimitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }
  
  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }
  
  // optional string security_exchange = 3;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->security_exchange(), target);
  }
  
  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }
  
  // optional string max_open_long_qty = 5 [default = "0"];
  if (has_max_open_long_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_open_long_qty().data(), this->max_open_long_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->max_open_long_qty(), target);
  }
  
  // optional string max_open_short_qty = 6 [default = "0"];
  if (has_max_open_short_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_open_short_qty().data(), this->max_open_short_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->max_open_short_qty(), target);
  }
  
  // optional string max_release_qty = 7 [default = "0"];
  if (has_max_release_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_release_qty().data(), this->max_release_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->max_release_qty(), target);
  }
  
  // optional string is_active = 8 [default = "0"];
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->is_active(), target);
  }
  
  // optional string added_datetime = 9;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->added_datetime(), target);
  }
  
  // optional string added_by = 10;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->added_by(), target);
  }
  
  // optional string updated_datetime = 11;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 12;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLimitData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // optional string security_exchange = 3;
    if (has_security_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_exchange());
    }
    
    // optional string session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string max_open_long_qty = 5 [default = "0"];
    if (has_max_open_long_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_open_long_qty());
    }
    
    // optional string max_open_short_qty = 6 [default = "0"];
    if (has_max_open_short_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_open_short_qty());
    }
    
    // optional string max_release_qty = 7 [default = "0"];
    if (has_max_release_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_release_qty());
    }
    
    // optional string is_active = 8 [default = "0"];
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string added_datetime = 9;
    if (has_added_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 10;
    if (has_added_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 11;
    if (has_updated_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 12;
    if (has_updated_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLimitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLimitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLimitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLimitData::MergeFrom(const AccountLimitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_security_exchange()) {
      set_security_exchange(from.security_exchange());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_max_open_long_qty()) {
      set_max_open_long_qty(from.max_open_long_qty());
    }
    if (from.has_max_open_short_qty()) {
      set_max_open_short_qty(from.max_open_short_qty());
    }
    if (from.has_max_release_qty()) {
      set_max_release_qty(from.max_release_qty());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLimitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLimitData::CopyFrom(const AccountLimitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLimitData::IsInitialized() const {
  
  return true;
}

void AccountLimitData::Swap(AccountLimitData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(security_exchange_, other->security_exchange_);
    std::swap(session_id_, other->session_id_);
    std::swap(max_open_long_qty_, other->max_open_long_qty_);
    std::swap(max_open_short_qty_, other->max_open_short_qty_);
    std::swap(max_release_qty_, other->max_release_qty_);
    std::swap(is_active_, other->is_active_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLimitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLimitData_descriptor_;
  metadata.reflection = AccountLimitData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DraftOrderData_SideCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftOrderData_SideCode_descriptor_;
}
bool DraftOrderData_SideCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DraftOrderData_SideCode DraftOrderData::BUY;
const DraftOrderData_SideCode DraftOrderData::SELL;
const DraftOrderData_SideCode DraftOrderData::SideCode_MIN;
const DraftOrderData_SideCode DraftOrderData::SideCode_MAX;
const int DraftOrderData::SideCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DraftOrderData_OrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftOrderData_OrderType_descriptor_;
}
bool DraftOrderData_OrderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DraftOrderData_OrderType DraftOrderData::MARKET;
const DraftOrderData_OrderType DraftOrderData::LIMIT;
const DraftOrderData_OrderType DraftOrderData::STOP;
const DraftOrderData_OrderType DraftOrderData::STOP_LIMIT;
const DraftOrderData_OrderType DraftOrderData::MARKET_ON_CLOSE;
const DraftOrderData_OrderType DraftOrderData::MARKET_LIMIT;
const DraftOrderData_OrderType DraftOrderData::OrderType_MIN;
const DraftOrderData_OrderType DraftOrderData::OrderType_MAX;
const int DraftOrderData::OrderType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DraftOrderData_TimeInForce_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftOrderData_TimeInForce_descriptor_;
}
bool DraftOrderData_TimeInForce_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DraftOrderData_TimeInForce DraftOrderData::DAY;
const DraftOrderData_TimeInForce DraftOrderData::GTC;
const DraftOrderData_TimeInForce DraftOrderData::OPG;
const DraftOrderData_TimeInForce DraftOrderData::IOC;
const DraftOrderData_TimeInForce DraftOrderData::FOK;
const DraftOrderData_TimeInForce DraftOrderData::GTD;
const DraftOrderData_TimeInForce DraftOrderData::GIS;
const DraftOrderData_TimeInForce DraftOrderData::TimeInForce_MIN;
const DraftOrderData_TimeInForce DraftOrderData::TimeInForce_MAX;
const int DraftOrderData::TimeInForce_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string DraftOrderData::_default_order_qty_("0");
const ::std::string DraftOrderData::_default_limit_prc_("0");
const ::std::string DraftOrderData::_default_stop_prc_("0");
#ifndef _MSC_VER
const int DraftOrderData::kExternalOrderIdFieldNumber;
const int DraftOrderData::kInvestmentSystemIdFieldNumber;
const int DraftOrderData::kInstrumentIdFieldNumber;
const int DraftOrderData::kSideCodeFieldNumber;
const int DraftOrderData::kTifFieldNumber;
const int DraftOrderData::kOrderTypeFieldNumber;
const int DraftOrderData::kOrderQtyFieldNumber;
const int DraftOrderData::kLimitPrcFieldNumber;
const int DraftOrderData::kStopPrcFieldNumber;
#endif  // !_MSC_VER

DraftOrderData::DraftOrderData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DraftOrderData::InitAsDefaultInstance() {
}

DraftOrderData::DraftOrderData(const DraftOrderData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DraftOrderData::SharedCtor() {
  _cached_size_ = 0;
  external_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = 1;
  tif_ = 0;
  order_type_ = 1;
  order_qty_ = const_cast< ::std::string*>(&_default_order_qty_);
  limit_prc_ = const_cast< ::std::string*>(&_default_limit_prc_);
  stop_prc_ = const_cast< ::std::string*>(&_default_stop_prc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftOrderData::~DraftOrderData() {
  SharedDtor();
}

void DraftOrderData::SharedDtor() {
  if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete external_order_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (order_qty_ != &_default_order_qty_) {
    delete order_qty_;
  }
  if (limit_prc_ != &_default_limit_prc_) {
    delete limit_prc_;
  }
  if (stop_prc_ != &_default_stop_prc_) {
    delete stop_prc_;
  }
  if (this != default_instance_) {
  }
}

void DraftOrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftOrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftOrderData_descriptor_;
}

const DraftOrderData& DraftOrderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DraftOrderData* DraftOrderData::default_instance_ = NULL;

DraftOrderData* DraftOrderData::New() const {
  return new DraftOrderData;
}

void DraftOrderData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_external_order_id()) {
      if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
        external_order_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    side_code_ = 1;
    tif_ = 0;
    order_type_ = 1;
    if (has_order_qty()) {
      if (order_qty_ != &_default_order_qty_) {
        order_qty_->assign(_default_order_qty_);
      }
    }
    if (has_limit_prc()) {
      if (limit_prc_ != &_default_limit_prc_) {
        limit_prc_->assign(_default_limit_prc_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stop_prc()) {
      if (stop_prc_ != &_default_stop_prc_) {
        stop_prc_->assign(_default_stop_prc_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftOrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string external_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_order_id().data(), this->external_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side_code;
        break;
      }
      
      // optional .quantmodel.DraftOrderData.SideCode side_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DraftOrderData_SideCode_IsValid(value)) {
            set_side_code(static_cast< ::quantmodel::DraftOrderData_SideCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tif;
        break;
      }
      
      // optional .quantmodel.DraftOrderData.TimeInForce tif = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tif:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DraftOrderData_TimeInForce_IsValid(value)) {
            set_tif(static_cast< ::quantmodel::DraftOrderData_TimeInForce >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_type;
        break;
      }
      
      // optional .quantmodel.DraftOrderData.OrderType order_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DraftOrderData_OrderType_IsValid(value)) {
            set_order_type(static_cast< ::quantmodel::DraftOrderData_OrderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_order_qty;
        break;
      }
      
      // optional string order_qty = 7 [default = "0"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_qty().data(), this->order_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_limit_prc;
        break;
      }
      
      // optional string limit_prc = 8 [default = "0"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limit_prc().data(), this->limit_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stop_prc;
        break;
      }
      
      // optional string stop_prc = 9 [default = "0"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_prc().data(), this->stop_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DraftOrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string external_order_id = 1;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->external_order_id(), output);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investment_system_id(), output);
  }
  
  // optional string instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrument_id(), output);
  }
  
  // optional .quantmodel.DraftOrderData.SideCode side_code = 4;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side_code(), output);
  }
  
  // optional .quantmodel.DraftOrderData.TimeInForce tif = 5;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tif(), output);
  }
  
  // optional .quantmodel.DraftOrderData.OrderType order_type = 6;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->order_type(), output);
  }
  
  // optional string order_qty = 7 [default = "0"];
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_qty().data(), this->order_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->order_qty(), output);
  }
  
  // optional string limit_prc = 8 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->limit_prc(), output);
  }
  
  // optional string stop_prc = 9 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stop_prc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DraftOrderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string external_order_id = 1;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->external_order_id(), target);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investment_system_id(), target);
  }
  
  // optional string instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrument_id(), target);
  }
  
  // optional .quantmodel.DraftOrderData.SideCode side_code = 4;
  if (has_side_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side_code(), target);
  }
  
  // optional .quantmodel.DraftOrderData.TimeInForce tif = 5;
  if (has_tif()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tif(), target);
  }
  
  // optional .quantmodel.DraftOrderData.OrderType order_type = 6;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->order_type(), target);
  }
  
  // optional string order_qty = 7 [default = "0"];
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_qty().data(), this->order_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_qty(), target);
  }
  
  // optional string limit_prc = 8 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->limit_prc(), target);
  }
  
  // optional string stop_prc = 9 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stop_prc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DraftOrderData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string external_order_id = 1;
    if (has_external_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_order_id());
    }
    
    // optional string investment_system_id = 2;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string instrument_id = 3;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional .quantmodel.DraftOrderData.SideCode side_code = 4;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_code());
    }
    
    // optional .quantmodel.DraftOrderData.TimeInForce tif = 5;
    if (has_tif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tif());
    }
    
    // optional .quantmodel.DraftOrderData.OrderType order_type = 6;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
    }
    
    // optional string order_qty = 7 [default = "0"];
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_qty());
    }
    
    // optional string limit_prc = 8 [default = "0"];
    if (has_limit_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit_prc());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string stop_prc = 9 [default = "0"];
    if (has_stop_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_prc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftOrderData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftOrderData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftOrderData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftOrderData::MergeFrom(const DraftOrderData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_external_order_id()) {
      set_external_order_id(from.external_order_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_tif()) {
      set_tif(from.tif());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_limit_prc()) {
      set_limit_prc(from.limit_prc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stop_prc()) {
      set_stop_prc(from.stop_prc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftOrderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftOrderData::CopyFrom(const DraftOrderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftOrderData::IsInitialized() const {
  
  return true;
}

void DraftOrderData::Swap(DraftOrderData* other) {
  if (other != this) {
    std::swap(external_order_id_, other->external_order_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(side_code_, other->side_code_);
    std::swap(tif_, other->tif_);
    std::swap(order_type_, other->order_type_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(limit_prc_, other->limit_prc_);
    std::swap(stop_prc_, other->stop_prc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftOrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftOrderData_descriptor_;
  metadata.reflection = DraftOrderData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DraftAllocationData::_default_allocation_qty_("0");
#ifndef _MSC_VER
const int DraftAllocationData::kAccountIdFieldNumber;
const int DraftAllocationData::kAllocationQtyFieldNumber;
#endif  // !_MSC_VER

DraftAllocationData::DraftAllocationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DraftAllocationData::InitAsDefaultInstance() {
}

DraftAllocationData::DraftAllocationData(const DraftAllocationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DraftAllocationData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allocation_qty_ = const_cast< ::std::string*>(&_default_allocation_qty_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftAllocationData::~DraftAllocationData() {
  SharedDtor();
}

void DraftAllocationData::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (allocation_qty_ != &_default_allocation_qty_) {
    delete allocation_qty_;
  }
  if (this != default_instance_) {
  }
}

void DraftAllocationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftAllocationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftAllocationData_descriptor_;
}

const DraftAllocationData& DraftAllocationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DraftAllocationData* DraftAllocationData::default_instance_ = NULL;

DraftAllocationData* DraftAllocationData::New() const {
  return new DraftAllocationData;
}

void DraftAllocationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_allocation_qty()) {
      if (allocation_qty_ != &_default_allocation_qty_) {
        allocation_qty_->assign(_default_allocation_qty_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftAllocationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allocation_qty;
        break;
      }
      
      // optional string allocation_qty = 2 [default = "0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocation_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocation_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allocation_qty().data(), this->allocation_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DraftAllocationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_id(), output);
  }
  
  // optional string allocation_qty = 2 [default = "0"];
  if (has_allocation_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_qty().data(), this->allocation_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->allocation_qty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DraftAllocationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }
  
  // optional string allocation_qty = 2 [default = "0"];
  if (has_allocation_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_qty().data(), this->allocation_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->allocation_qty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DraftAllocationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string allocation_qty = 2 [default = "0"];
    if (has_allocation_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allocation_qty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftAllocationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftAllocationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftAllocationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftAllocationData::MergeFrom(const DraftAllocationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_allocation_qty()) {
      set_allocation_qty(from.allocation_qty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftAllocationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftAllocationData::CopyFrom(const DraftAllocationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftAllocationData::IsInitialized() const {
  
  return true;
}

void DraftAllocationData::Swap(DraftAllocationData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(allocation_qty_, other->allocation_qty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftAllocationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftAllocationData_descriptor_;
  metadata.reflection = DraftAllocationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountData::kAccountIdFieldNumber;
const int AccountData::kParentAccountIdFieldNumber;
const int AccountData::kNameFieldNumber;
const int AccountData::kMarketAccountIdFieldNumber;
const int AccountData::kCustodyAccountIdFieldNumber;
const int AccountData::kGiveupAccountIdFieldNumber;
const int AccountData::kGiveupFirmIdFieldNumber;
const int AccountData::kNotionalValFieldNumber;
const int AccountData::kProfitTargetFieldNumber;
const int AccountData::kStopLossFieldNumber;
const int AccountData::kSignalWeightFieldNumber;
const int AccountData::kIsSuppressedFieldNumber;
const int AccountData::kIsActiveFieldNumber;
const int AccountData::kContactNameFieldNumber;
const int AccountData::kContactEmailFieldNumber;
const int AccountData::kContactPhoneFieldNumber;
const int AccountData::kTradingFirmNameFieldNumber;
const int AccountData::kTradingFirmEmailFieldNumber;
const int AccountData::kTradingFirmPhoneFieldNumber;
const int AccountData::kAddedDatetimeFieldNumber;
const int AccountData::kAddedByFieldNumber;
const int AccountData::kUpdatedDatetimeFieldNumber;
const int AccountData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

AccountData::AccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountData::InitAsDefaultInstance() {
}

AccountData::AccountData(const AccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custody_account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  giveup_account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  giveup_firm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notional_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profit_target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stop_loss_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signal_weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_suppressed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_active_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_firm_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_firm_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_firm_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountData::~AccountData() {
  SharedDtor();
}

void AccountData::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (parent_account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_account_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (market_account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_account_id_;
  }
  if (custody_account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete custody_account_id_;
  }
  if (giveup_account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete giveup_account_id_;
  }
  if (giveup_firm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete giveup_firm_id_;
  }
  if (notional_val_ != &::google::protobuf::internal::kEmptyString) {
    delete notional_val_;
  }
  if (profit_target_ != &::google::protobuf::internal::kEmptyString) {
    delete profit_target_;
  }
  if (stop_loss_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_loss_;
  }
  if (signal_weight_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_weight_;
  }
  if (is_suppressed_ != &::google::protobuf::internal::kEmptyString) {
    delete is_suppressed_;
  }
  if (is_active_ != &::google::protobuf::internal::kEmptyString) {
    delete is_active_;
  }
  if (contact_name_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_name_;
  }
  if (contact_email_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_email_;
  }
  if (contact_phone_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_phone_;
  }
  if (trading_firm_name_ != &::google::protobuf::internal::kEmptyString) {
    delete trading_firm_name_;
  }
  if (trading_firm_email_ != &::google::protobuf::internal::kEmptyString) {
    delete trading_firm_email_;
  }
  if (trading_firm_phone_ != &::google::protobuf::internal::kEmptyString) {
    delete trading_firm_phone_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void AccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountData_descriptor_;
}

const AccountData& AccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

AccountData* AccountData::default_instance_ = NULL;

AccountData* AccountData::New() const {
  return new AccountData;
}

void AccountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_parent_account_id()) {
      if (parent_account_id_ != &::google::protobuf::internal::kEmptyString) {
        parent_account_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_market_account_id()) {
      if (market_account_id_ != &::google::protobuf::internal::kEmptyString) {
        market_account_id_->clear();
      }
    }
    if (has_custody_account_id()) {
      if (custody_account_id_ != &::google::protobuf::internal::kEmptyString) {
        custody_account_id_->clear();
      }
    }
    if (has_giveup_account_id()) {
      if (giveup_account_id_ != &::google::protobuf::internal::kEmptyString) {
        giveup_account_id_->clear();
      }
    }
    if (has_giveup_firm_id()) {
      if (giveup_firm_id_ != &::google::protobuf::internal::kEmptyString) {
        giveup_firm_id_->clear();
      }
    }
    if (has_notional_val()) {
      if (notional_val_ != &::google::protobuf::internal::kEmptyString) {
        notional_val_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_profit_target()) {
      if (profit_target_ != &::google::protobuf::internal::kEmptyString) {
        profit_target_->clear();
      }
    }
    if (has_stop_loss()) {
      if (stop_loss_ != &::google::protobuf::internal::kEmptyString) {
        stop_loss_->clear();
      }
    }
    if (has_signal_weight()) {
      if (signal_weight_ != &::google::protobuf::internal::kEmptyString) {
        signal_weight_->clear();
      }
    }
    if (has_is_suppressed()) {
      if (is_suppressed_ != &::google::protobuf::internal::kEmptyString) {
        is_suppressed_->clear();
      }
    }
    if (has_is_active()) {
      if (is_active_ != &::google::protobuf::internal::kEmptyString) {
        is_active_->clear();
      }
    }
    if (has_contact_name()) {
      if (contact_name_ != &::google::protobuf::internal::kEmptyString) {
        contact_name_->clear();
      }
    }
    if (has_contact_email()) {
      if (contact_email_ != &::google::protobuf::internal::kEmptyString) {
        contact_email_->clear();
      }
    }
    if (has_contact_phone()) {
      if (contact_phone_ != &::google::protobuf::internal::kEmptyString) {
        contact_phone_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_trading_firm_name()) {
      if (trading_firm_name_ != &::google::protobuf::internal::kEmptyString) {
        trading_firm_name_->clear();
      }
    }
    if (has_trading_firm_email()) {
      if (trading_firm_email_ != &::google::protobuf::internal::kEmptyString) {
        trading_firm_email_->clear();
      }
    }
    if (has_trading_firm_phone()) {
      if (trading_firm_phone_ != &::google::protobuf::internal::kEmptyString) {
        trading_firm_phone_->clear();
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent_account_id;
        break;
      }
      
      // optional string parent_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent_account_id().data(), this->parent_account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_market_account_id;
        break;
      }
      
      // optional string market_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_account_id().data(), this->market_account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_custody_account_id;
        break;
      }
      
      // optional string custody_account_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custody_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custody_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custody_account_id().data(), this->custody_account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_giveup_account_id;
        break;
      }
      
      // optional string giveup_account_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giveup_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giveup_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giveup_account_id().data(), this->giveup_account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_giveup_firm_id;
        break;
      }
      
      // optional string giveup_firm_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giveup_firm_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giveup_firm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giveup_firm_id().data(), this->giveup_firm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_notional_val;
        break;
      }
      
      // optional string notional_val = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notional_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notional_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notional_val().data(), this->notional_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_profit_target;
        break;
      }
      
      // optional string profit_target = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profit_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profit_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profit_target().data(), this->profit_target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stop_loss;
        break;
      }
      
      // optional string stop_loss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_loss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_loss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_loss().data(), this->stop_loss().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_signal_weight;
        break;
      }
      
      // optional string signal_weight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_weight().data(), this->signal_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_is_suppressed;
        break;
      }
      
      // optional string is_suppressed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_suppressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_suppressed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_suppressed().data(), this->is_suppressed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_contact_name;
        break;
      }
      
      // optional string contact_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact_name().data(), this->contact_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_contact_email;
        break;
      }
      
      // optional string contact_email = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact_email().data(), this->contact_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_contact_phone;
        break;
      }
      
      // optional string contact_phone = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact_phone().data(), this->contact_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_trading_firm_name;
        break;
      }
      
      // optional string trading_firm_name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_firm_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_firm_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trading_firm_name().data(), this->trading_firm_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_trading_firm_email;
        break;
      }
      
      // optional string trading_firm_email = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_firm_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_firm_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trading_firm_email().data(), this->trading_firm_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_trading_firm_phone;
        break;
      }
      
      // optional string trading_firm_phone = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_firm_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_firm_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trading_firm_phone().data(), this->trading_firm_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_id(), output);
  }
  
  // optional string parent_account_id = 2;
  if (has_parent_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_account_id().data(), this->parent_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parent_account_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string market_account_id = 4;
  if (has_market_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_account_id().data(), this->market_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->market_account_id(), output);
  }
  
  // optional string custody_account_id = 5;
  if (has_custody_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custody_account_id().data(), this->custody_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->custody_account_id(), output);
  }
  
  // optional string giveup_account_id = 6;
  if (has_giveup_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giveup_account_id().data(), this->giveup_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->giveup_account_id(), output);
  }
  
  // optional string giveup_firm_id = 7;
  if (has_giveup_firm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giveup_firm_id().data(), this->giveup_firm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->giveup_firm_id(), output);
  }
  
  // optional string notional_val = 8;
  if (has_notional_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notional_val().data(), this->notional_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->notional_val(), output);
  }
  
  // optional string profit_target = 9;
  if (has_profit_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profit_target().data(), this->profit_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->profit_target(), output);
  }
  
  // optional string stop_loss = 10;
  if (has_stop_loss()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_loss().data(), this->stop_loss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->stop_loss(), output);
  }
  
  // optional string signal_weight = 11;
  if (has_signal_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_weight().data(), this->signal_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->signal_weight(), output);
  }
  
  // optional string is_suppressed = 12;
  if (has_is_suppressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_suppressed().data(), this->is_suppressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->is_suppressed(), output);
  }
  
  // optional string is_active = 13;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->is_active(), output);
  }
  
  // optional string contact_name = 14;
  if (has_contact_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_name().data(), this->contact_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->contact_name(), output);
  }
  
  // optional string contact_email = 15;
  if (has_contact_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_email().data(), this->contact_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->contact_email(), output);
  }
  
  // optional string contact_phone = 16;
  if (has_contact_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_phone().data(), this->contact_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->contact_phone(), output);
  }
  
  // optional string trading_firm_name = 17;
  if (has_trading_firm_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_name().data(), this->trading_firm_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->trading_firm_name(), output);
  }
  
  // optional string trading_firm_email = 18;
  if (has_trading_firm_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_email().data(), this->trading_firm_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->trading_firm_email(), output);
  }
  
  // optional string trading_firm_phone = 19;
  if (has_trading_firm_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_phone().data(), this->trading_firm_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->trading_firm_phone(), output);
  }
  
  // optional string added_datetime = 20;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->added_datetime(), output);
  }
  
  // optional string added_by = 21;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->added_by(), output);
  }
  
  // optional string updated_datetime = 22;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 23;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }
  
  // optional string parent_account_id = 2;
  if (has_parent_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_account_id().data(), this->parent_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parent_account_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string market_account_id = 4;
  if (has_market_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_account_id().data(), this->market_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->market_account_id(), target);
  }
  
  // optional string custody_account_id = 5;
  if (has_custody_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custody_account_id().data(), this->custody_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->custody_account_id(), target);
  }
  
  // optional string giveup_account_id = 6;
  if (has_giveup_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giveup_account_id().data(), this->giveup_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->giveup_account_id(), target);
  }
  
  // optional string giveup_firm_id = 7;
  if (has_giveup_firm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giveup_firm_id().data(), this->giveup_firm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->giveup_firm_id(), target);
  }
  
  // optional string notional_val = 8;
  if (has_notional_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notional_val().data(), this->notional_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->notional_val(), target);
  }
  
  // optional string profit_target = 9;
  if (has_profit_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profit_target().data(), this->profit_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->profit_target(), target);
  }
  
  // optional string stop_loss = 10;
  if (has_stop_loss()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_loss().data(), this->stop_loss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->stop_loss(), target);
  }
  
  // optional string signal_weight = 11;
  if (has_signal_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_weight().data(), this->signal_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->signal_weight(), target);
  }
  
  // optional string is_suppressed = 12;
  if (has_is_suppressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_suppressed().data(), this->is_suppressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->is_suppressed(), target);
  }
  
  // optional string is_active = 13;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->is_active(), target);
  }
  
  // optional string contact_name = 14;
  if (has_contact_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_name().data(), this->contact_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->contact_name(), target);
  }
  
  // optional string contact_email = 15;
  if (has_contact_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_email().data(), this->contact_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->contact_email(), target);
  }
  
  // optional string contact_phone = 16;
  if (has_contact_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact_phone().data(), this->contact_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->contact_phone(), target);
  }
  
  // optional string trading_firm_name = 17;
  if (has_trading_firm_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_name().data(), this->trading_firm_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->trading_firm_name(), target);
  }
  
  // optional string trading_firm_email = 18;
  if (has_trading_firm_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_email().data(), this->trading_firm_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->trading_firm_email(), target);
  }
  
  // optional string trading_firm_phone = 19;
  if (has_trading_firm_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_firm_phone().data(), this->trading_firm_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->trading_firm_phone(), target);
  }
  
  // optional string added_datetime = 20;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->added_datetime(), target);
  }
  
  // optional string added_by = 21;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->added_by(), target);
  }
  
  // optional string updated_datetime = 22;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 23;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string parent_account_id = 2;
    if (has_parent_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_account_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string market_account_id = 4;
    if (has_market_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_account_id());
    }
    
    // optional string custody_account_id = 5;
    if (has_custody_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custody_account_id());
    }
    
    // optional string giveup_account_id = 6;
    if (has_giveup_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giveup_account_id());
    }
    
    // optional string giveup_firm_id = 7;
    if (has_giveup_firm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giveup_firm_id());
    }
    
    // optional string notional_val = 8;
    if (has_notional_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notional_val());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string profit_target = 9;
    if (has_profit_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profit_target());
    }
    
    // optional string stop_loss = 10;
    if (has_stop_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_loss());
    }
    
    // optional string signal_weight = 11;
    if (has_signal_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_weight());
    }
    
    // optional string is_suppressed = 12;
    if (has_is_suppressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_suppressed());
    }
    
    // optional string is_active = 13;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
    // optional string contact_name = 14;
    if (has_contact_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_name());
    }
    
    // optional string contact_email = 15;
    if (has_contact_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_email());
    }
    
    // optional string contact_phone = 16;
    if (has_contact_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_phone());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string trading_firm_name = 17;
    if (has_trading_firm_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_firm_name());
    }
    
    // optional string trading_firm_email = 18;
    if (has_trading_firm_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_firm_email());
    }
    
    // optional string trading_firm_phone = 19;
    if (has_trading_firm_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_firm_phone());
    }
    
    // optional string added_datetime = 20;
    if (has_added_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 21;
    if (has_added_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 22;
    if (has_updated_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 23;
    if (has_updated_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountData::MergeFrom(const AccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_parent_account_id()) {
      set_parent_account_id(from.parent_account_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_market_account_id()) {
      set_market_account_id(from.market_account_id());
    }
    if (from.has_custody_account_id()) {
      set_custody_account_id(from.custody_account_id());
    }
    if (from.has_giveup_account_id()) {
      set_giveup_account_id(from.giveup_account_id());
    }
    if (from.has_giveup_firm_id()) {
      set_giveup_firm_id(from.giveup_firm_id());
    }
    if (from.has_notional_val()) {
      set_notional_val(from.notional_val());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profit_target()) {
      set_profit_target(from.profit_target());
    }
    if (from.has_stop_loss()) {
      set_stop_loss(from.stop_loss());
    }
    if (from.has_signal_weight()) {
      set_signal_weight(from.signal_weight());
    }
    if (from.has_is_suppressed()) {
      set_is_suppressed(from.is_suppressed());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_contact_name()) {
      set_contact_name(from.contact_name());
    }
    if (from.has_contact_email()) {
      set_contact_email(from.contact_email());
    }
    if (from.has_contact_phone()) {
      set_contact_phone(from.contact_phone());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trading_firm_name()) {
      set_trading_firm_name(from.trading_firm_name());
    }
    if (from.has_trading_firm_email()) {
      set_trading_firm_email(from.trading_firm_email());
    }
    if (from.has_trading_firm_phone()) {
      set_trading_firm_phone(from.trading_firm_phone());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountData::CopyFrom(const AccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountData::IsInitialized() const {
  
  return true;
}

void AccountData::Swap(AccountData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(parent_account_id_, other->parent_account_id_);
    std::swap(name_, other->name_);
    std::swap(market_account_id_, other->market_account_id_);
    std::swap(custody_account_id_, other->custody_account_id_);
    std::swap(giveup_account_id_, other->giveup_account_id_);
    std::swap(giveup_firm_id_, other->giveup_firm_id_);
    std::swap(notional_val_, other->notional_val_);
    std::swap(profit_target_, other->profit_target_);
    std::swap(stop_loss_, other->stop_loss_);
    std::swap(signal_weight_, other->signal_weight_);
    std::swap(is_suppressed_, other->is_suppressed_);
    std::swap(is_active_, other->is_active_);
    std::swap(contact_name_, other->contact_name_);
    std::swap(contact_email_, other->contact_email_);
    std::swap(contact_phone_, other->contact_phone_);
    std::swap(trading_firm_name_, other->trading_firm_name_);
    std::swap(trading_firm_email_, other->trading_firm_email_);
    std::swap(trading_firm_phone_, other->trading_firm_phone_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountData_descriptor_;
  metadata.reflection = AccountData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OrderData_SideCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_SideCode_descriptor_;
}
bool OrderData_SideCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderData_SideCode OrderData::BUY;
const OrderData_SideCode OrderData::SELL;
const OrderData_SideCode OrderData::SideCode_MIN;
const OrderData_SideCode OrderData::SideCode_MAX;
const int OrderData::SideCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OrderData_OrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_OrderType_descriptor_;
}
bool OrderData_OrderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderData_OrderType OrderData::MARKET;
const OrderData_OrderType OrderData::LIMIT;
const OrderData_OrderType OrderData::STOP;
const OrderData_OrderType OrderData::STOP_LIMIT;
const OrderData_OrderType OrderData::MARKET_ON_CLOSE;
const OrderData_OrderType OrderData::MARKET_LIMIT;
const OrderData_OrderType OrderData::OrderType_MIN;
const OrderData_OrderType OrderData::OrderType_MAX;
const int OrderData::OrderType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OrderData_OrderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_OrderStatus_descriptor_;
}
bool OrderData_OrderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderData_OrderStatus OrderData::SUPPRESSED;
const OrderData_OrderStatus OrderData::NEW;
const OrderData_OrderStatus OrderData::PENDING_RELEASE;
const OrderData_OrderStatus OrderData::RELEASED;
const OrderData_OrderStatus OrderData::PARTIALLY_FILLED;
const OrderData_OrderStatus OrderData::FILLED;
const OrderData_OrderStatus OrderData::CANCELED;
const OrderData_OrderStatus OrderData::CLOSED;
const OrderData_OrderStatus OrderData::OrderStatus_MIN;
const OrderData_OrderStatus OrderData::OrderStatus_MAX;
const int OrderData::OrderStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OrderData_TimeInForce_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_TimeInForce_descriptor_;
}
bool OrderData_TimeInForce_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderData_TimeInForce OrderData::DAY;
const OrderData_TimeInForce OrderData::GTC;
const OrderData_TimeInForce OrderData::OPG;
const OrderData_TimeInForce OrderData::IOC;
const OrderData_TimeInForce OrderData::FOK;
const OrderData_TimeInForce OrderData::GTD;
const OrderData_TimeInForce OrderData::GIS;
const OrderData_TimeInForce OrderData::TimeInForce_MIN;
const OrderData_TimeInForce OrderData::TimeInForce_MAX;
const int OrderData::TimeInForce_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string OrderData::_default_order_qty_("0");
const ::std::string OrderData::_default_open_qty_("0");
const ::std::string OrderData::_default_released_qty_("0");
const ::std::string OrderData::_default_executed_qty_("0");
const ::std::string OrderData::_default_limit_prc_("0");
const ::std::string OrderData::_default_stop_prc_("0");
const ::std::string OrderData::_default_mark_prc_("0");
const ::std::string OrderData::_default_average_prc_("0");
const ::std::string OrderData::_default_entry_prc_("0");
const ::std::string OrderData::_default_released_val_("0");
const ::std::string OrderData::_default_executed_val_("0");
#ifndef _MSC_VER
const int OrderData::kOrderIdFieldNumber;
const int OrderData::kExternalOrderIdFieldNumber;
const int OrderData::kInvestmentSystemIdFieldNumber;
const int OrderData::kOrderTypeFieldNumber;
const int OrderData::kOrderStatusFieldNumber;
const int OrderData::kInstrumentIdFieldNumber;
const int OrderData::kSymbolFieldNumber;
const int OrderData::kTifFieldNumber;
const int OrderData::kSideCodeFieldNumber;
const int OrderData::kBaseCcyFieldNumber;
const int OrderData::kOrderQtyFieldNumber;
const int OrderData::kOpenQtyFieldNumber;
const int OrderData::kReleasedQtyFieldNumber;
const int OrderData::kExecutedQtyFieldNumber;
const int OrderData::kLimitPrcFieldNumber;
const int OrderData::kStopPrcFieldNumber;
const int OrderData::kMarkPrcFieldNumber;
const int OrderData::kAveragePrcFieldNumber;
const int OrderData::kEntryPrcFieldNumber;
const int OrderData::kReleasedValFieldNumber;
const int OrderData::kExecutedValFieldNumber;
const int OrderData::kAddedDatetimeFieldNumber;
const int OrderData::kAddedByFieldNumber;
const int OrderData::kUpdatedDatetimeFieldNumber;
const int OrderData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

OrderData::OrderData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderData::InitAsDefaultInstance() {
}

OrderData::OrderData(const OrderData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderData::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  external_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tif_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_ccy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_qty_ = const_cast< ::std::string*>(&_default_order_qty_);
  open_qty_ = const_cast< ::std::string*>(&_default_open_qty_);
  released_qty_ = const_cast< ::std::string*>(&_default_released_qty_);
  executed_qty_ = const_cast< ::std::string*>(&_default_executed_qty_);
  limit_prc_ = const_cast< ::std::string*>(&_default_limit_prc_);
  stop_prc_ = const_cast< ::std::string*>(&_default_stop_prc_);
  mark_prc_ = const_cast< ::std::string*>(&_default_mark_prc_);
  average_prc_ = const_cast< ::std::string*>(&_default_average_prc_);
  entry_prc_ = const_cast< ::std::string*>(&_default_entry_prc_);
  released_val_ = const_cast< ::std::string*>(&_default_released_val_);
  executed_val_ = const_cast< ::std::string*>(&_default_executed_val_);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderData::~OrderData() {
  SharedDtor();
}

void OrderData::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete external_order_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (order_type_ != &::google::protobuf::internal::kEmptyString) {
    delete order_type_;
  }
  if (order_status_ != &::google::protobuf::internal::kEmptyString) {
    delete order_status_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (tif_ != &::google::protobuf::internal::kEmptyString) {
    delete tif_;
  }
  if (side_code_ != &::google::protobuf::internal::kEmptyString) {
    delete side_code_;
  }
  if (base_ccy_ != &::google::protobuf::internal::kEmptyString) {
    delete base_ccy_;
  }
  if (order_qty_ != &_default_order_qty_) {
    delete order_qty_;
  }
  if (open_qty_ != &_default_open_qty_) {
    delete open_qty_;
  }
  if (released_qty_ != &_default_released_qty_) {
    delete released_qty_;
  }
  if (executed_qty_ != &_default_executed_qty_) {
    delete executed_qty_;
  }
  if (limit_prc_ != &_default_limit_prc_) {
    delete limit_prc_;
  }
  if (stop_prc_ != &_default_stop_prc_) {
    delete stop_prc_;
  }
  if (mark_prc_ != &_default_mark_prc_) {
    delete mark_prc_;
  }
  if (average_prc_ != &_default_average_prc_) {
    delete average_prc_;
  }
  if (entry_prc_ != &_default_entry_prc_) {
    delete entry_prc_;
  }
  if (released_val_ != &_default_released_val_) {
    delete released_val_;
  }
  if (executed_val_ != &_default_executed_val_) {
    delete executed_val_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void OrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_descriptor_;
}

const OrderData& OrderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

OrderData* OrderData::default_instance_ = NULL;

OrderData* OrderData::New() const {
  return new OrderData;
}

void OrderData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_external_order_id()) {
      if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
        external_order_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_order_type()) {
      if (order_type_ != &::google::protobuf::internal::kEmptyString) {
        order_type_->clear();
      }
    }
    if (has_order_status()) {
      if (order_status_ != &::google::protobuf::internal::kEmptyString) {
        order_status_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_tif()) {
      if (tif_ != &::google::protobuf::internal::kEmptyString) {
        tif_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_side_code()) {
      if (side_code_ != &::google::protobuf::internal::kEmptyString) {
        side_code_->clear();
      }
    }
    if (has_base_ccy()) {
      if (base_ccy_ != &::google::protobuf::internal::kEmptyString) {
        base_ccy_->clear();
      }
    }
    if (has_order_qty()) {
      if (order_qty_ != &_default_order_qty_) {
        order_qty_->assign(_default_order_qty_);
      }
    }
    if (has_open_qty()) {
      if (open_qty_ != &_default_open_qty_) {
        open_qty_->assign(_default_open_qty_);
      }
    }
    if (has_released_qty()) {
      if (released_qty_ != &_default_released_qty_) {
        released_qty_->assign(_default_released_qty_);
      }
    }
    if (has_executed_qty()) {
      if (executed_qty_ != &_default_executed_qty_) {
        executed_qty_->assign(_default_executed_qty_);
      }
    }
    if (has_limit_prc()) {
      if (limit_prc_ != &_default_limit_prc_) {
        limit_prc_->assign(_default_limit_prc_);
      }
    }
    if (has_stop_prc()) {
      if (stop_prc_ != &_default_stop_prc_) {
        stop_prc_->assign(_default_stop_prc_);
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_mark_prc()) {
      if (mark_prc_ != &_default_mark_prc_) {
        mark_prc_->assign(_default_mark_prc_);
      }
    }
    if (has_average_prc()) {
      if (average_prc_ != &_default_average_prc_) {
        average_prc_->assign(_default_average_prc_);
      }
    }
    if (has_entry_prc()) {
      if (entry_prc_ != &_default_entry_prc_) {
        entry_prc_->assign(_default_entry_prc_);
      }
    }
    if (has_released_val()) {
      if (released_val_ != &_default_released_val_) {
        released_val_->assign(_default_released_val_);
      }
    }
    if (has_executed_val()) {
      if (executed_val_ != &_default_executed_val_) {
        executed_val_->assign(_default_executed_val_);
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_external_order_id;
        break;
      }
      
      // optional string external_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_order_id().data(), this->external_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_type;
        break;
      }
      
      // optional string order_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_type().data(), this->order_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_order_status;
        break;
      }
      
      // optional string order_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_status().data(), this->order_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_symbol;
        break;
      }
      
      // optional string symbol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tif;
        break;
      }
      
      // optional string tif = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tif:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tif()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tif().data(), this->tif().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_side_code;
        break;
      }
      
      // optional string side_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side_code().data(), this->side_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_base_ccy;
        break;
      }
      
      // optional string base_ccy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_ccy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_ccy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_ccy().data(), this->base_ccy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_order_qty;
        break;
      }
      
      // optional string order_qty = 11 [default = "0"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_qty().data(), this->order_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_open_qty;
        break;
      }
      
      // optional string open_qty = 12 [default = "0"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_qty().data(), this->open_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_released_qty;
        break;
      }
      
      // optional string released_qty = 13 [default = "0"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_released_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_released_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->released_qty().data(), this->released_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_executed_qty;
        break;
      }
      
      // optional string executed_qty = 14 [default = "0"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_qty().data(), this->executed_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_limit_prc;
        break;
      }
      
      // optional string limit_prc = 15 [default = "0"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limit_prc().data(), this->limit_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_stop_prc;
        break;
      }
      
      // optional string stop_prc = 16 [default = "0"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_prc().data(), this->stop_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_mark_prc;
        break;
      }
      
      // optional string mark_prc = 17 [default = "0"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mark_prc().data(), this->mark_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_average_prc;
        break;
      }
      
      // optional string average_prc = 18 [default = "0"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_average_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->average_prc().data(), this->average_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_entry_prc;
        break;
      }
      
      // optional string entry_prc = 19 [default = "0"];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_prc().data(), this->entry_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_released_val;
        break;
      }
      
      // optional string released_val = 20 [default = "0"];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_released_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_released_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->released_val().data(), this->released_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_executed_val;
        break;
      }
      
      // optional string executed_val = 21 [default = "0"];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_val().data(), this->executed_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->order_id(), output);
  }
  
  // optional string external_order_id = 2;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->external_order_id(), output);
  }
  
  // optional string investment_system_id = 3;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->investment_system_id(), output);
  }
  
  // optional string order_type = 4;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_type().data(), this->order_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->order_type(), output);
  }
  
  // optional string order_status = 5;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_status().data(), this->order_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->order_status(), output);
  }
  
  // optional string instrument_id = 6;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->instrument_id(), output);
  }
  
  // optional string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->symbol(), output);
  }
  
  // optional string tif = 8;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tif(), output);
  }
  
  // optional string side_code = 9;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->side_code(), output);
  }
  
  // optional string base_ccy = 10;
  if (has_base_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_ccy().data(), this->base_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->base_ccy(), output);
  }
  
  // optional string order_qty = 11 [default = "0"];
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_qty().data(), this->order_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->order_qty(), output);
  }
  
  // optional string open_qty = 12 [default = "0"];
  if (has_open_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_qty().data(), this->open_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->open_qty(), output);
  }
  
  // optional string released_qty = 13 [default = "0"];
  if (has_released_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_qty().data(), this->released_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->released_qty(), output);
  }
  
  // optional string executed_qty = 14 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->executed_qty(), output);
  }
  
  // optional string limit_prc = 15 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->limit_prc(), output);
  }
  
  // optional string stop_prc = 16 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->stop_prc(), output);
  }
  
  // optional string mark_prc = 17 [default = "0"];
  if (has_mark_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_prc().data(), this->mark_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->mark_prc(), output);
  }
  
  // optional string average_prc = 18 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->average_prc(), output);
  }
  
  // optional string entry_prc = 19 [default = "0"];
  if (has_entry_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_prc().data(), this->entry_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->entry_prc(), output);
  }
  
  // optional string released_val = 20 [default = "0"];
  if (has_released_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_val().data(), this->released_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->released_val(), output);
  }
  
  // optional string executed_val = 21 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->executed_val(), output);
  }
  
  // optional string added_datetime = 22;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->added_datetime(), output);
  }
  
  // optional string added_by = 23;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->added_by(), output);
  }
  
  // optional string updated_datetime = 24;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 25;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }
  
  // optional string external_order_id = 2;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->external_order_id(), target);
  }
  
  // optional string investment_system_id = 3;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investment_system_id(), target);
  }
  
  // optional string order_type = 4;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_type().data(), this->order_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_type(), target);
  }
  
  // optional string order_status = 5;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_status().data(), this->order_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_status(), target);
  }
  
  // optional string instrument_id = 6;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->instrument_id(), target);
  }
  
  // optional string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol(), target);
  }
  
  // optional string tif = 8;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tif(), target);
  }
  
  // optional string side_code = 9;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->side_code(), target);
  }
  
  // optional string base_ccy = 10;
  if (has_base_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_ccy().data(), this->base_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->base_ccy(), target);
  }
  
  // optional string order_qty = 11 [default = "0"];
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_qty().data(), this->order_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->order_qty(), target);
  }
  
  // optional string open_qty = 12 [default = "0"];
  if (has_open_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_qty().data(), this->open_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->open_qty(), target);
  }
  
  // optional string released_qty = 13 [default = "0"];
  if (has_released_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_qty().data(), this->released_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->released_qty(), target);
  }
  
  // optional string executed_qty = 14 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->executed_qty(), target);
  }
  
  // optional string limit_prc = 15 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->limit_prc(), target);
  }
  
  // optional string stop_prc = 16 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->stop_prc(), target);
  }
  
  // optional string mark_prc = 17 [default = "0"];
  if (has_mark_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_prc().data(), this->mark_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mark_prc(), target);
  }
  
  // optional string average_prc = 18 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->average_prc(), target);
  }
  
  // optional string entry_prc = 19 [default = "0"];
  if (has_entry_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_prc().data(), this->entry_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->entry_prc(), target);
  }
  
  // optional string released_val = 20 [default = "0"];
  if (has_released_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_val().data(), this->released_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->released_val(), target);
  }
  
  // optional string executed_val = 21 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->executed_val(), target);
  }
  
  // optional string added_datetime = 22;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->added_datetime(), target);
  }
  
  // optional string added_by = 23;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->added_by(), target);
  }
  
  // optional string updated_datetime = 24;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 25;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }
    
    // optional string external_order_id = 2;
    if (has_external_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_order_id());
    }
    
    // optional string investment_system_id = 3;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string order_type = 4;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }
    
    // optional string order_status = 5;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_status());
    }
    
    // optional string instrument_id = 6;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // optional string tif = 8;
    if (has_tif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tif());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string side_code = 9;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_code());
    }
    
    // optional string base_ccy = 10;
    if (has_base_ccy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_ccy());
    }
    
    // optional string order_qty = 11 [default = "0"];
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_qty());
    }
    
    // optional string open_qty = 12 [default = "0"];
    if (has_open_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_qty());
    }
    
    // optional string released_qty = 13 [default = "0"];
    if (has_released_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->released_qty());
    }
    
    // optional string executed_qty = 14 [default = "0"];
    if (has_executed_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_qty());
    }
    
    // optional string limit_prc = 15 [default = "0"];
    if (has_limit_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit_prc());
    }
    
    // optional string stop_prc = 16 [default = "0"];
    if (has_stop_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_prc());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string mark_prc = 17 [default = "0"];
    if (has_mark_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark_prc());
    }
    
    // optional string average_prc = 18 [default = "0"];
    if (has_average_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->average_prc());
    }
    
    // optional string entry_prc = 19 [default = "0"];
    if (has_entry_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_prc());
    }
    
    // optional string released_val = 20 [default = "0"];
    if (has_released_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->released_val());
    }
    
    // optional string executed_val = 21 [default = "0"];
    if (has_executed_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_val());
    }
    
    // optional string added_datetime = 22;
    if (has_added_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 23;
    if (has_added_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 24;
    if (has_updated_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string updated_by = 25;
    if (has_updated_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderData::MergeFrom(const OrderData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_external_order_id()) {
      set_external_order_id(from.external_order_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_order_status()) {
      set_order_status(from.order_status());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tif()) {
      set_tif(from.tif());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_base_ccy()) {
      set_base_ccy(from.base_ccy());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_open_qty()) {
      set_open_qty(from.open_qty());
    }
    if (from.has_released_qty()) {
      set_released_qty(from.released_qty());
    }
    if (from.has_executed_qty()) {
      set_executed_qty(from.executed_qty());
    }
    if (from.has_limit_prc()) {
      set_limit_prc(from.limit_prc());
    }
    if (from.has_stop_prc()) {
      set_stop_prc(from.stop_prc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mark_prc()) {
      set_mark_prc(from.mark_prc());
    }
    if (from.has_average_prc()) {
      set_average_prc(from.average_prc());
    }
    if (from.has_entry_prc()) {
      set_entry_prc(from.entry_prc());
    }
    if (from.has_released_val()) {
      set_released_val(from.released_val());
    }
    if (from.has_executed_val()) {
      set_executed_val(from.executed_val());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderData::CopyFrom(const OrderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderData::IsInitialized() const {
  
  return true;
}

void OrderData::Swap(OrderData* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(external_order_id_, other->external_order_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(order_type_, other->order_type_);
    std::swap(order_status_, other->order_status_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(tif_, other->tif_);
    std::swap(side_code_, other->side_code_);
    std::swap(base_ccy_, other->base_ccy_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(open_qty_, other->open_qty_);
    std::swap(released_qty_, other->released_qty_);
    std::swap(executed_qty_, other->executed_qty_);
    std::swap(limit_prc_, other->limit_prc_);
    std::swap(stop_prc_, other->stop_prc_);
    std::swap(mark_prc_, other->mark_prc_);
    std::swap(average_prc_, other->average_prc_);
    std::swap(entry_prc_, other->entry_prc_);
    std::swap(released_val_, other->released_val_);
    std::swap(executed_val_, other->executed_val_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderData_descriptor_;
  metadata.reflection = OrderData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AllocationData::_default_allocation_qty_("0");
const ::std::string AllocationData::_default_released_qty_("0");
const ::std::string AllocationData::_default_executed_qty_("0");
const ::std::string AllocationData::_default_executed_val_("0");
const ::std::string AllocationData::_default_average_prc_("0");
#ifndef _MSC_VER
const int AllocationData::kAllocationIdFieldNumber;
const int AllocationData::kOrderIdFieldNumber;
const int AllocationData::kAccountIdFieldNumber;
const int AllocationData::kInstrumentIdFieldNumber;
const int AllocationData::kSideCodeFieldNumber;
const int AllocationData::kAllocationQtyFieldNumber;
const int AllocationData::kReleasedQtyFieldNumber;
const int AllocationData::kExecutedQtyFieldNumber;
const int AllocationData::kExecutedValFieldNumber;
const int AllocationData::kAveragePrcFieldNumber;
const int AllocationData::kAddedDatetimeFieldNumber;
const int AllocationData::kAddedByFieldNumber;
const int AllocationData::kUpdatedDatetimeFieldNumber;
const int AllocationData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

AllocationData::AllocationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllocationData::InitAsDefaultInstance() {
}

AllocationData::AllocationData(const AllocationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllocationData::SharedCtor() {
  _cached_size_ = 0;
  allocation_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allocation_qty_ = const_cast< ::std::string*>(&_default_allocation_qty_);
  released_qty_ = const_cast< ::std::string*>(&_default_released_qty_);
  executed_qty_ = const_cast< ::std::string*>(&_default_executed_qty_);
  executed_val_ = const_cast< ::std::string*>(&_default_executed_val_);
  average_prc_ = const_cast< ::std::string*>(&_default_average_prc_);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocationData::~AllocationData() {
  SharedDtor();
}

void AllocationData::SharedDtor() {
  if (allocation_id_ != &::google::protobuf::internal::kEmptyString) {
    delete allocation_id_;
  }
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (side_code_ != &::google::protobuf::internal::kEmptyString) {
    delete side_code_;
  }
  if (allocation_qty_ != &_default_allocation_qty_) {
    delete allocation_qty_;
  }
  if (released_qty_ != &_default_released_qty_) {
    delete released_qty_;
  }
  if (executed_qty_ != &_default_executed_qty_) {
    delete executed_qty_;
  }
  if (executed_val_ != &_default_executed_val_) {
    delete executed_val_;
  }
  if (average_prc_ != &_default_average_prc_) {
    delete average_prc_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void AllocationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocationData_descriptor_;
}

const AllocationData& AllocationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

AllocationData* AllocationData::default_instance_ = NULL;

AllocationData* AllocationData::New() const {
  return new AllocationData;
}

void AllocationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_allocation_id()) {
      if (allocation_id_ != &::google::protobuf::internal::kEmptyString) {
        allocation_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_side_code()) {
      if (side_code_ != &::google::protobuf::internal::kEmptyString) {
        side_code_->clear();
      }
    }
    if (has_allocation_qty()) {
      if (allocation_qty_ != &_default_allocation_qty_) {
        allocation_qty_->assign(_default_allocation_qty_);
      }
    }
    if (has_released_qty()) {
      if (released_qty_ != &_default_released_qty_) {
        released_qty_->assign(_default_released_qty_);
      }
    }
    if (has_executed_qty()) {
      if (executed_qty_ != &_default_executed_qty_) {
        executed_qty_->assign(_default_executed_qty_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_executed_val()) {
      if (executed_val_ != &_default_executed_val_) {
        executed_val_->assign(_default_executed_val_);
      }
    }
    if (has_average_prc()) {
      if (average_prc_ != &_default_average_prc_) {
        average_prc_->assign(_default_average_prc_);
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allocation_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocation_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allocation_id().data(), this->allocation_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_id;
        break;
      }
      
      // optional string order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_side_code;
        break;
      }
      
      // optional string side_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side_code().data(), this->side_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_allocation_qty;
        break;
      }
      
      // optional string allocation_qty = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocation_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocation_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allocation_qty().data(), this->allocation_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_released_qty;
        break;
      }
      
      // optional string released_qty = 7 [default = "0"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_released_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_released_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->released_qty().data(), this->released_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_executed_qty;
        break;
      }
      
      // optional string executed_qty = 8 [default = "0"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_qty().data(), this->executed_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_executed_val;
        break;
      }
      
      // optional string executed_val = 9 [default = "0"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_val().data(), this->executed_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_average_prc;
        break;
      }
      
      // optional string average_prc = 10 [default = "0"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_average_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->average_prc().data(), this->average_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllocationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string allocation_id = 1;
  if (has_allocation_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_id().data(), this->allocation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->allocation_id(), output);
  }
  
  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order_id(), output);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_id(), output);
  }
  
  // optional string instrument_id = 4;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->instrument_id(), output);
  }
  
  // optional string side_code = 5;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->side_code(), output);
  }
  
  // optional string allocation_qty = 6 [default = "0"];
  if (has_allocation_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_qty().data(), this->allocation_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->allocation_qty(), output);
  }
  
  // optional string released_qty = 7 [default = "0"];
  if (has_released_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_qty().data(), this->released_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->released_qty(), output);
  }
  
  // optional string executed_qty = 8 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->executed_qty(), output);
  }
  
  // optional string executed_val = 9 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->executed_val(), output);
  }
  
  // optional string average_prc = 10 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->average_prc(), output);
  }
  
  // optional string added_datetime = 11;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->added_datetime(), output);
  }
  
  // optional string added_by = 12;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->added_by(), output);
  }
  
  // optional string updated_datetime = 13;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 14;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllocationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string allocation_id = 1;
  if (has_allocation_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_id().data(), this->allocation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allocation_id(), target);
  }
  
  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }
  
  // optional string instrument_id = 4;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument_id(), target);
  }
  
  // optional string side_code = 5;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->side_code(), target);
  }
  
  // optional string allocation_qty = 6 [default = "0"];
  if (has_allocation_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_qty().data(), this->allocation_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->allocation_qty(), target);
  }
  
  // optional string released_qty = 7 [default = "0"];
  if (has_released_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->released_qty().data(), this->released_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->released_qty(), target);
  }
  
  // optional string executed_qty = 8 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->executed_qty(), target);
  }
  
  // optional string executed_val = 9 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->executed_val(), target);
  }
  
  // optional string average_prc = 10 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->average_prc(), target);
  }
  
  // optional string added_datetime = 11;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->added_datetime(), target);
  }
  
  // optional string added_by = 12;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->added_by(), target);
  }
  
  // optional string updated_datetime = 13;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 14;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllocationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string allocation_id = 1;
    if (has_allocation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allocation_id());
    }
    
    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }
    
    // optional string account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string instrument_id = 4;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string side_code = 5;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_code());
    }
    
    // optional string allocation_qty = 6 [default = "0"];
    if (has_allocation_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allocation_qty());
    }
    
    // optional string released_qty = 7 [default = "0"];
    if (has_released_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->released_qty());
    }
    
    // optional string executed_qty = 8 [default = "0"];
    if (has_executed_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_qty());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string executed_val = 9 [default = "0"];
    if (has_executed_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_val());
    }
    
    // optional string average_prc = 10 [default = "0"];
    if (has_average_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->average_prc());
    }
    
    // optional string added_datetime = 11;
    if (has_added_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 12;
    if (has_added_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 13;
    if (has_updated_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 14;
    if (has_updated_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocationData::MergeFrom(const AllocationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allocation_id()) {
      set_allocation_id(from.allocation_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_allocation_qty()) {
      set_allocation_qty(from.allocation_qty());
    }
    if (from.has_released_qty()) {
      set_released_qty(from.released_qty());
    }
    if (from.has_executed_qty()) {
      set_executed_qty(from.executed_qty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_executed_val()) {
      set_executed_val(from.executed_val());
    }
    if (from.has_average_prc()) {
      set_average_prc(from.average_prc());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocationData::CopyFrom(const AllocationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationData::IsInitialized() const {
  
  return true;
}

void AllocationData::Swap(AllocationData* other) {
  if (other != this) {
    std::swap(allocation_id_, other->allocation_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(side_code_, other->side_code_);
    std::swap(allocation_qty_, other->allocation_qty_);
    std::swap(released_qty_, other->released_qty_);
    std::swap(executed_qty_, other->executed_qty_);
    std::swap(executed_val_, other->executed_val_);
    std::swap(average_prc_, other->average_prc_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocationData_descriptor_;
  metadata.reflection = AllocationData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReleaseData::_default_release_qty_("0");
const ::std::string ReleaseData::_default_limit_prc_("0");
const ::std::string ReleaseData::_default_stop_prc_("0");
const ::std::string ReleaseData::_default_average_prc_("0");
const ::std::string ReleaseData::_default_executed_val_("0");
const ::std::string ReleaseData::_default_executed_qty_("0");
#ifndef _MSC_VER
const int ReleaseData::kReleaseIdFieldNumber;
const int ReleaseData::kSessionIdFieldNumber;
const int ReleaseData::kAccountIdFieldNumber;
const int ReleaseData::kOrderIdFieldNumber;
const int ReleaseData::kAllocationIdFieldNumber;
const int ReleaseData::kInvestmentSystemIdFieldNumber;
const int ReleaseData::kInstrumentIdFieldNumber;
const int ReleaseData::kComplianceAuditIdFieldNumber;
const int ReleaseData::kClientOrderIdFieldNumber;
const int ReleaseData::kCounterpartyOrderIdFieldNumber;
const int ReleaseData::kReleaseStatusFieldNumber;
const int ReleaseData::kReleaseTypeFieldNumber;
const int ReleaseData::kTifFieldNumber;
const int ReleaseData::kSideCodeFieldNumber;
const int ReleaseData::kReleaseQtyFieldNumber;
const int ReleaseData::kLimitPrcFieldNumber;
const int ReleaseData::kStopPrcFieldNumber;
const int ReleaseData::kAveragePrcFieldNumber;
const int ReleaseData::kExecutedValFieldNumber;
const int ReleaseData::kExecutedQtyFieldNumber;
const int ReleaseData::kAddedDatetimeFieldNumber;
const int ReleaseData::kAddedByFieldNumber;
const int ReleaseData::kUpdatedDatetimeFieldNumber;
const int ReleaseData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

ReleaseData::ReleaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseData::InitAsDefaultInstance() {
}

ReleaseData::ReleaseData(const ReleaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseData::SharedCtor() {
  _cached_size_ = 0;
  release_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allocation_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compliance_audit_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counterparty_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tif_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_qty_ = const_cast< ::std::string*>(&_default_release_qty_);
  limit_prc_ = const_cast< ::std::string*>(&_default_limit_prc_);
  stop_prc_ = const_cast< ::std::string*>(&_default_stop_prc_);
  average_prc_ = const_cast< ::std::string*>(&_default_average_prc_);
  executed_val_ = const_cast< ::std::string*>(&_default_executed_val_);
  executed_qty_ = const_cast< ::std::string*>(&_default_executed_qty_);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseData::~ReleaseData() {
  SharedDtor();
}

void ReleaseData::SharedDtor() {
  if (release_id_ != &::google::protobuf::internal::kEmptyString) {
    delete release_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (allocation_id_ != &::google::protobuf::internal::kEmptyString) {
    delete allocation_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (compliance_audit_id_ != &::google::protobuf::internal::kEmptyString) {
    delete compliance_audit_id_;
  }
  if (client_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_order_id_;
  }
  if (counterparty_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete counterparty_order_id_;
  }
  if (release_status_ != &::google::protobuf::internal::kEmptyString) {
    delete release_status_;
  }
  if (release_type_ != &::google::protobuf::internal::kEmptyString) {
    delete release_type_;
  }
  if (tif_ != &::google::protobuf::internal::kEmptyString) {
    delete tif_;
  }
  if (side_code_ != &::google::protobuf::internal::kEmptyString) {
    delete side_code_;
  }
  if (release_qty_ != &_default_release_qty_) {
    delete release_qty_;
  }
  if (limit_prc_ != &_default_limit_prc_) {
    delete limit_prc_;
  }
  if (stop_prc_ != &_default_stop_prc_) {
    delete stop_prc_;
  }
  if (average_prc_ != &_default_average_prc_) {
    delete average_prc_;
  }
  if (executed_val_ != &_default_executed_val_) {
    delete executed_val_;
  }
  if (executed_qty_ != &_default_executed_qty_) {
    delete executed_qty_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void ReleaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseData_descriptor_;
}

const ReleaseData& ReleaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ReleaseData* ReleaseData::default_instance_ = NULL;

ReleaseData* ReleaseData::New() const {
  return new ReleaseData;
}

void ReleaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_release_id()) {
      if (release_id_ != &::google::protobuf::internal::kEmptyString) {
        release_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_allocation_id()) {
      if (allocation_id_ != &::google::protobuf::internal::kEmptyString) {
        allocation_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_compliance_audit_id()) {
      if (compliance_audit_id_ != &::google::protobuf::internal::kEmptyString) {
        compliance_audit_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_client_order_id()) {
      if (client_order_id_ != &::google::protobuf::internal::kEmptyString) {
        client_order_id_->clear();
      }
    }
    if (has_counterparty_order_id()) {
      if (counterparty_order_id_ != &::google::protobuf::internal::kEmptyString) {
        counterparty_order_id_->clear();
      }
    }
    if (has_release_status()) {
      if (release_status_ != &::google::protobuf::internal::kEmptyString) {
        release_status_->clear();
      }
    }
    if (has_release_type()) {
      if (release_type_ != &::google::protobuf::internal::kEmptyString) {
        release_type_->clear();
      }
    }
    if (has_tif()) {
      if (tif_ != &::google::protobuf::internal::kEmptyString) {
        tif_->clear();
      }
    }
    if (has_side_code()) {
      if (side_code_ != &::google::protobuf::internal::kEmptyString) {
        side_code_->clear();
      }
    }
    if (has_release_qty()) {
      if (release_qty_ != &_default_release_qty_) {
        release_qty_->assign(_default_release_qty_);
      }
    }
    if (has_limit_prc()) {
      if (limit_prc_ != &_default_limit_prc_) {
        limit_prc_->assign(_default_limit_prc_);
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_stop_prc()) {
      if (stop_prc_ != &_default_stop_prc_) {
        stop_prc_->assign(_default_stop_prc_);
      }
    }
    if (has_average_prc()) {
      if (average_prc_ != &_default_average_prc_) {
        average_prc_->assign(_default_average_prc_);
      }
    }
    if (has_executed_val()) {
      if (executed_val_ != &_default_executed_val_) {
        executed_val_->assign(_default_executed_val_);
      }
    }
    if (has_executed_qty()) {
      if (executed_qty_ != &_default_executed_qty_) {
        executed_qty_->assign(_default_executed_qty_);
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string release_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_id().data(), this->release_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_id;
        break;
      }
      
      // optional string order_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_allocation_id;
        break;
      }
      
      // optional string allocation_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocation_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocation_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allocation_id().data(), this->allocation_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_compliance_audit_id;
        break;
      }
      
      // optional string compliance_audit_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compliance_audit_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compliance_audit_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compliance_audit_id().data(), this->compliance_audit_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_client_order_id;
        break;
      }
      
      // optional string client_order_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_order_id().data(), this->client_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_counterparty_order_id;
        break;
      }
      
      // optional string counterparty_order_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterparty_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counterparty_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counterparty_order_id().data(), this->counterparty_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_release_status;
        break;
      }
      
      // optional string release_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_status().data(), this->release_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_release_type;
        break;
      }
      
      // optional string release_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_type().data(), this->release_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tif;
        break;
      }
      
      // optional string tif = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tif:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tif()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tif().data(), this->tif().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_side_code;
        break;
      }
      
      // optional string side_code = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side_code().data(), this->side_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_release_qty;
        break;
      }
      
      // optional string release_qty = 15 [default = "0"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_qty().data(), this->release_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_limit_prc;
        break;
      }
      
      // optional string limit_prc = 16 [default = "0"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limit_prc().data(), this->limit_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_stop_prc;
        break;
      }
      
      // optional string stop_prc = 17 [default = "0"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_prc().data(), this->stop_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_average_prc;
        break;
      }
      
      // optional string average_prc = 18 [default = "0"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_average_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->average_prc().data(), this->average_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_executed_val;
        break;
      }
      
      // optional string executed_val = 19 [default = "0"];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_val().data(), this->executed_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_executed_qty;
        break;
      }
      
      // optional string executed_qty = 20 [default = "0"];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executed_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executed_qty().data(), this->executed_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReleaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string release_id = 1;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->release_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_id(), output);
  }
  
  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->order_id(), output);
  }
  
  // optional string allocation_id = 5;
  if (has_allocation_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_id().data(), this->allocation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->allocation_id(), output);
  }
  
  // optional string investment_system_id = 6;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->investment_system_id(), output);
  }
  
  // optional string instrument_id = 7;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->instrument_id(), output);
  }
  
  // optional string compliance_audit_id = 8;
  if (has_compliance_audit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compliance_audit_id().data(), this->compliance_audit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->compliance_audit_id(), output);
  }
  
  // optional string client_order_id = 9;
  if (has_client_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_order_id().data(), this->client_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->client_order_id(), output);
  }
  
  // optional string counterparty_order_id = 10;
  if (has_counterparty_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty_order_id().data(), this->counterparty_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->counterparty_order_id(), output);
  }
  
  // optional string release_status = 11;
  if (has_release_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_status().data(), this->release_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->release_status(), output);
  }
  
  // optional string release_type = 12;
  if (has_release_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_type().data(), this->release_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->release_type(), output);
  }
  
  // optional string tif = 13;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tif(), output);
  }
  
  // optional string side_code = 14;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->side_code(), output);
  }
  
  // optional string release_qty = 15 [default = "0"];
  if (has_release_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_qty().data(), this->release_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->release_qty(), output);
  }
  
  // optional string limit_prc = 16 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->limit_prc(), output);
  }
  
  // optional string stop_prc = 17 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->stop_prc(), output);
  }
  
  // optional string average_prc = 18 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->average_prc(), output);
  }
  
  // optional string executed_val = 19 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->executed_val(), output);
  }
  
  // optional string executed_qty = 20 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->executed_qty(), output);
  }
  
  // optional string added_datetime = 21;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->added_datetime(), output);
  }
  
  // optional string added_by = 22;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->added_by(), output);
  }
  
  // optional string updated_datetime = 23;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 24;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string release_id = 1;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->release_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }
  
  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }
  
  // optional string allocation_id = 5;
  if (has_allocation_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allocation_id().data(), this->allocation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->allocation_id(), target);
  }
  
  // optional string investment_system_id = 6;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->investment_system_id(), target);
  }
  
  // optional string instrument_id = 7;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->instrument_id(), target);
  }
  
  // optional string compliance_audit_id = 8;
  if (has_compliance_audit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compliance_audit_id().data(), this->compliance_audit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->compliance_audit_id(), target);
  }
  
  // optional string client_order_id = 9;
  if (has_client_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_order_id().data(), this->client_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->client_order_id(), target);
  }
  
  // optional string counterparty_order_id = 10;
  if (has_counterparty_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty_order_id().data(), this->counterparty_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->counterparty_order_id(), target);
  }
  
  // optional string release_status = 11;
  if (has_release_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_status().data(), this->release_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->release_status(), target);
  }
  
  // optional string release_type = 12;
  if (has_release_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_type().data(), this->release_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->release_type(), target);
  }
  
  // optional string tif = 13;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tif(), target);
  }
  
  // optional string side_code = 14;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->side_code(), target);
  }
  
  // optional string release_qty = 15 [default = "0"];
  if (has_release_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_qty().data(), this->release_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->release_qty(), target);
  }
  
  // optional string limit_prc = 16 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->limit_prc(), target);
  }
  
  // optional string stop_prc = 17 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->stop_prc(), target);
  }
  
  // optional string average_prc = 18 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->average_prc(), target);
  }
  
  // optional string executed_val = 19 [default = "0"];
  if (has_executed_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_val().data(), this->executed_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->executed_val(), target);
  }
  
  // optional string executed_qty = 20 [default = "0"];
  if (has_executed_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executed_qty().data(), this->executed_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->executed_qty(), target);
  }
  
  // optional string added_datetime = 21;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->added_datetime(), target);
  }
  
  // optional string added_by = 22;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->added_by(), target);
  }
  
  // optional string updated_datetime = 23;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 24;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string release_id = 1;
    if (has_release_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }
    
    // optional string allocation_id = 5;
    if (has_allocation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allocation_id());
    }
    
    // optional string investment_system_id = 6;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string instrument_id = 7;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string compliance_audit_id = 8;
    if (has_compliance_audit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compliance_audit_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string client_order_id = 9;
    if (has_client_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_order_id());
    }
    
    // optional string counterparty_order_id = 10;
    if (has_counterparty_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counterparty_order_id());
    }
    
    // optional string release_status = 11;
    if (has_release_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_status());
    }
    
    // optional string release_type = 12;
    if (has_release_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_type());
    }
    
    // optional string tif = 13;
    if (has_tif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tif());
    }
    
    // optional string side_code = 14;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_code());
    }
    
    // optional string release_qty = 15 [default = "0"];
    if (has_release_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_qty());
    }
    
    // optional string limit_prc = 16 [default = "0"];
    if (has_limit_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit_prc());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string stop_prc = 17 [default = "0"];
    if (has_stop_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_prc());
    }
    
    // optional string average_prc = 18 [default = "0"];
    if (has_average_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->average_prc());
    }
    
    // optional string executed_val = 19 [default = "0"];
    if (has_executed_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_val());
    }
    
    // optional string executed_qty = 20 [default = "0"];
    if (has_executed_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executed_qty());
    }
    
    // optional string added_datetime = 21;
    if (has_added_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 22;
    if (has_added_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 23;
    if (has_updated_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 24;
    if (has_updated_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseData::MergeFrom(const ReleaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_release_id()) {
      set_release_id(from.release_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_allocation_id()) {
      set_allocation_id(from.allocation_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_compliance_audit_id()) {
      set_compliance_audit_id(from.compliance_audit_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_client_order_id()) {
      set_client_order_id(from.client_order_id());
    }
    if (from.has_counterparty_order_id()) {
      set_counterparty_order_id(from.counterparty_order_id());
    }
    if (from.has_release_status()) {
      set_release_status(from.release_status());
    }
    if (from.has_release_type()) {
      set_release_type(from.release_type());
    }
    if (from.has_tif()) {
      set_tif(from.tif());
    }
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_release_qty()) {
      set_release_qty(from.release_qty());
    }
    if (from.has_limit_prc()) {
      set_limit_prc(from.limit_prc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stop_prc()) {
      set_stop_prc(from.stop_prc());
    }
    if (from.has_average_prc()) {
      set_average_prc(from.average_prc());
    }
    if (from.has_executed_val()) {
      set_executed_val(from.executed_val());
    }
    if (from.has_executed_qty()) {
      set_executed_qty(from.executed_qty());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseData::CopyFrom(const ReleaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseData::IsInitialized() const {
  
  return true;
}

void ReleaseData::Swap(ReleaseData* other) {
  if (other != this) {
    std::swap(release_id_, other->release_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(allocation_id_, other->allocation_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(compliance_audit_id_, other->compliance_audit_id_);
    std::swap(client_order_id_, other->client_order_id_);
    std::swap(counterparty_order_id_, other->counterparty_order_id_);
    std::swap(release_status_, other->release_status_);
    std::swap(release_type_, other->release_type_);
    std::swap(tif_, other->tif_);
    std::swap(side_code_, other->side_code_);
    std::swap(release_qty_, other->release_qty_);
    std::swap(limit_prc_, other->limit_prc_);
    std::swap(stop_prc_, other->stop_prc_);
    std::swap(average_prc_, other->average_prc_);
    std::swap(executed_val_, other->executed_val_);
    std::swap(executed_qty_, other->executed_qty_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseData_descriptor_;
  metadata.reflection = ReleaseData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ExecutionData::_default_execution_prc_("0");
const ::std::string ExecutionData::_default_execution_qty_("0");
const ::std::string ExecutionData::_default_execution_val_("0");
const ::std::string ExecutionData::_default_leaves_qty_("0");
const ::std::string ExecutionData::_default_average_prc_("0");
const ::std::string ExecutionData::_default_leg_type_("1");
#ifndef _MSC_VER
const int ExecutionData::kExecutionIdFieldNumber;
const int ExecutionData::kSessionIdFieldNumber;
const int ExecutionData::kAccountIdFieldNumber;
const int ExecutionData::kOrderIdFieldNumber;
const int ExecutionData::kReleaseIdFieldNumber;
const int ExecutionData::kInvestmentSystemIdFieldNumber;
const int ExecutionData::kInstrumentIdFieldNumber;
const int ExecutionData::kClientOrderIdFieldNumber;
const int ExecutionData::kCounterpartyExecutionIdFieldNumber;
const int ExecutionData::kSideCodeFieldNumber;
const int ExecutionData::kExecutionCcyFieldNumber;
const int ExecutionData::kExecutionStatusFieldNumber;
const int ExecutionData::kExecutionPrcFieldNumber;
const int ExecutionData::kExecutionQtyFieldNumber;
const int ExecutionData::kExecutionValFieldNumber;
const int ExecutionData::kLeavesQtyFieldNumber;
const int ExecutionData::kAveragePrcFieldNumber;
const int ExecutionData::kLegTypeFieldNumber;
const int ExecutionData::kAddedDatetimeFieldNumber;
const int ExecutionData::kAddedByFieldNumber;
const int ExecutionData::kUpdatedDatetimeFieldNumber;
const int ExecutionData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

ExecutionData::ExecutionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionData::InitAsDefaultInstance() {
}

ExecutionData::ExecutionData(const ExecutionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionData::SharedCtor() {
  _cached_size_ = 0;
  execution_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counterparty_execution_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execution_ccy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execution_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execution_prc_ = const_cast< ::std::string*>(&_default_execution_prc_);
  execution_qty_ = const_cast< ::std::string*>(&_default_execution_qty_);
  execution_val_ = const_cast< ::std::string*>(&_default_execution_val_);
  leaves_qty_ = const_cast< ::std::string*>(&_default_leaves_qty_);
  average_prc_ = const_cast< ::std::string*>(&_default_average_prc_);
  leg_type_ = const_cast< ::std::string*>(&_default_leg_type_);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionData::~ExecutionData() {
  SharedDtor();
}

void ExecutionData::SharedDtor() {
  if (execution_id_ != &::google::protobuf::internal::kEmptyString) {
    delete execution_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (release_id_ != &::google::protobuf::internal::kEmptyString) {
    delete release_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (client_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_order_id_;
  }
  if (counterparty_execution_id_ != &::google::protobuf::internal::kEmptyString) {
    delete counterparty_execution_id_;
  }
  if (side_code_ != &::google::protobuf::internal::kEmptyString) {
    delete side_code_;
  }
  if (execution_ccy_ != &::google::protobuf::internal::kEmptyString) {
    delete execution_ccy_;
  }
  if (execution_status_ != &::google::protobuf::internal::kEmptyString) {
    delete execution_status_;
  }
  if (execution_prc_ != &_default_execution_prc_) {
    delete execution_prc_;
  }
  if (execution_qty_ != &_default_execution_qty_) {
    delete execution_qty_;
  }
  if (execution_val_ != &_default_execution_val_) {
    delete execution_val_;
  }
  if (leaves_qty_ != &_default_leaves_qty_) {
    delete leaves_qty_;
  }
  if (average_prc_ != &_default_average_prc_) {
    delete average_prc_;
  }
  if (leg_type_ != &_default_leg_type_) {
    delete leg_type_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void ExecutionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionData_descriptor_;
}

const ExecutionData& ExecutionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ExecutionData* ExecutionData::default_instance_ = NULL;

ExecutionData* ExecutionData::New() const {
  return new ExecutionData;
}

void ExecutionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_execution_id()) {
      if (execution_id_ != &::google::protobuf::internal::kEmptyString) {
        execution_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_release_id()) {
      if (release_id_ != &::google::protobuf::internal::kEmptyString) {
        release_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_client_order_id()) {
      if (client_order_id_ != &::google::protobuf::internal::kEmptyString) {
        client_order_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_counterparty_execution_id()) {
      if (counterparty_execution_id_ != &::google::protobuf::internal::kEmptyString) {
        counterparty_execution_id_->clear();
      }
    }
    if (has_side_code()) {
      if (side_code_ != &::google::protobuf::internal::kEmptyString) {
        side_code_->clear();
      }
    }
    if (has_execution_ccy()) {
      if (execution_ccy_ != &::google::protobuf::internal::kEmptyString) {
        execution_ccy_->clear();
      }
    }
    if (has_execution_status()) {
      if (execution_status_ != &::google::protobuf::internal::kEmptyString) {
        execution_status_->clear();
      }
    }
    if (has_execution_prc()) {
      if (execution_prc_ != &_default_execution_prc_) {
        execution_prc_->assign(_default_execution_prc_);
      }
    }
    if (has_execution_qty()) {
      if (execution_qty_ != &_default_execution_qty_) {
        execution_qty_->assign(_default_execution_qty_);
      }
    }
    if (has_execution_val()) {
      if (execution_val_ != &_default_execution_val_) {
        execution_val_->assign(_default_execution_val_);
      }
    }
    if (has_leaves_qty()) {
      if (leaves_qty_ != &_default_leaves_qty_) {
        leaves_qty_->assign(_default_leaves_qty_);
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_average_prc()) {
      if (average_prc_ != &_default_average_prc_) {
        average_prc_->assign(_default_average_prc_);
      }
    }
    if (has_leg_type()) {
      if (leg_type_ != &_default_leg_type_) {
        leg_type_->assign(_default_leg_type_);
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string execution_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_id().data(), this->execution_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_id;
        break;
      }
      
      // optional string order_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_release_id;
        break;
      }
      
      // optional string release_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_id().data(), this->release_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_client_order_id;
        break;
      }
      
      // optional string client_order_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_order_id().data(), this->client_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_counterparty_execution_id;
        break;
      }
      
      // optional string counterparty_execution_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterparty_execution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counterparty_execution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counterparty_execution_id().data(), this->counterparty_execution_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_side_code;
        break;
      }
      
      // optional string side_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side_code().data(), this->side_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_execution_ccy;
        break;
      }
      
      // optional string execution_ccy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_ccy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_ccy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_ccy().data(), this->execution_ccy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_execution_status;
        break;
      }
      
      // optional string execution_status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_status().data(), this->execution_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_execution_prc;
        break;
      }
      
      // optional string execution_prc = 13 [default = "0"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_prc().data(), this->execution_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_execution_qty;
        break;
      }
      
      // optional string execution_qty = 14 [default = "0"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_qty().data(), this->execution_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_execution_val;
        break;
      }
      
      // optional string execution_val = 15 [default = "0"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execution_val().data(), this->execution_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_leaves_qty;
        break;
      }
      
      // optional string leaves_qty = 16 [default = "0"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaves_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaves_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leaves_qty().data(), this->leaves_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_average_prc;
        break;
      }
      
      // optional string average_prc = 17 [default = "0"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_average_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->average_prc().data(), this->average_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_leg_type;
        break;
      }
      
      // optional string leg_type = 18 [default = "1"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_type().data(), this->leg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string execution_id = 1;
  if (has_execution_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_id().data(), this->execution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->execution_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_id(), output);
  }
  
  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->order_id(), output);
  }
  
  // optional string release_id = 5;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->release_id(), output);
  }
  
  // optional string investment_system_id = 6;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->investment_system_id(), output);
  }
  
  // optional string instrument_id = 7;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->instrument_id(), output);
  }
  
  // optional string client_order_id = 8;
  if (has_client_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_order_id().data(), this->client_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->client_order_id(), output);
  }
  
  // optional string counterparty_execution_id = 9;
  if (has_counterparty_execution_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty_execution_id().data(), this->counterparty_execution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->counterparty_execution_id(), output);
  }
  
  // optional string side_code = 10;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->side_code(), output);
  }
  
  // optional string execution_ccy = 11;
  if (has_execution_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_ccy().data(), this->execution_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->execution_ccy(), output);
  }
  
  // optional string execution_status = 12;
  if (has_execution_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_status().data(), this->execution_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->execution_status(), output);
  }
  
  // optional string execution_prc = 13 [default = "0"];
  if (has_execution_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_prc().data(), this->execution_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->execution_prc(), output);
  }
  
  // optional string execution_qty = 14 [default = "0"];
  if (has_execution_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_qty().data(), this->execution_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->execution_qty(), output);
  }
  
  // optional string execution_val = 15 [default = "0"];
  if (has_execution_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_val().data(), this->execution_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->execution_val(), output);
  }
  
  // optional string leaves_qty = 16 [default = "0"];
  if (has_leaves_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaves_qty().data(), this->leaves_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->leaves_qty(), output);
  }
  
  // optional string average_prc = 17 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->average_prc(), output);
  }
  
  // optional string leg_type = 18 [default = "1"];
  if (has_leg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_type().data(), this->leg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->leg_type(), output);
  }
  
  // optional string added_datetime = 19;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->added_datetime(), output);
  }
  
  // optional string added_by = 20;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->added_by(), output);
  }
  
  // optional string updated_datetime = 21;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 22;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string execution_id = 1;
  if (has_execution_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_id().data(), this->execution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->execution_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }
  
  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }
  
  // optional string release_id = 5;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->release_id(), target);
  }
  
  // optional string investment_system_id = 6;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->investment_system_id(), target);
  }
  
  // optional string instrument_id = 7;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->instrument_id(), target);
  }
  
  // optional string client_order_id = 8;
  if (has_client_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_order_id().data(), this->client_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->client_order_id(), target);
  }
  
  // optional string counterparty_execution_id = 9;
  if (has_counterparty_execution_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty_execution_id().data(), this->counterparty_execution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->counterparty_execution_id(), target);
  }
  
  // optional string side_code = 10;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->side_code(), target);
  }
  
  // optional string execution_ccy = 11;
  if (has_execution_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_ccy().data(), this->execution_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->execution_ccy(), target);
  }
  
  // optional string execution_status = 12;
  if (has_execution_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_status().data(), this->execution_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->execution_status(), target);
  }
  
  // optional string execution_prc = 13 [default = "0"];
  if (has_execution_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_prc().data(), this->execution_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->execution_prc(), target);
  }
  
  // optional string execution_qty = 14 [default = "0"];
  if (has_execution_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_qty().data(), this->execution_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->execution_qty(), target);
  }
  
  // optional string execution_val = 15 [default = "0"];
  if (has_execution_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execution_val().data(), this->execution_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->execution_val(), target);
  }
  
  // optional string leaves_qty = 16 [default = "0"];
  if (has_leaves_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaves_qty().data(), this->leaves_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->leaves_qty(), target);
  }
  
  // optional string average_prc = 17 [default = "0"];
  if (has_average_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->average_prc().data(), this->average_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->average_prc(), target);
  }
  
  // optional string leg_type = 18 [default = "1"];
  if (has_leg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_type().data(), this->leg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->leg_type(), target);
  }
  
  // optional string added_datetime = 19;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->added_datetime(), target);
  }
  
  // optional string added_by = 20;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->added_by(), target);
  }
  
  // optional string updated_datetime = 21;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 22;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string execution_id = 1;
    if (has_execution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }
    
    // optional string release_id = 5;
    if (has_release_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_id());
    }
    
    // optional string investment_system_id = 6;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string instrument_id = 7;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string client_order_id = 8;
    if (has_client_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_order_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string counterparty_execution_id = 9;
    if (has_counterparty_execution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counterparty_execution_id());
    }
    
    // optional string side_code = 10;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_code());
    }
    
    // optional string execution_ccy = 11;
    if (has_execution_ccy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_ccy());
    }
    
    // optional string execution_status = 12;
    if (has_execution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_status());
    }
    
    // optional string execution_prc = 13 [default = "0"];
    if (has_execution_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_prc());
    }
    
    // optional string execution_qty = 14 [default = "0"];
    if (has_execution_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_qty());
    }
    
    // optional string execution_val = 15 [default = "0"];
    if (has_execution_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execution_val());
    }
    
    // optional string leaves_qty = 16 [default = "0"];
    if (has_leaves_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaves_qty());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string average_prc = 17 [default = "0"];
    if (has_average_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->average_prc());
    }
    
    // optional string leg_type = 18 [default = "1"];
    if (has_leg_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_type());
    }
    
    // optional string added_datetime = 19;
    if (has_added_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 20;
    if (has_added_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
    // optional string updated_datetime = 21;
    if (has_updated_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 22;
    if (has_updated_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionData::MergeFrom(const ExecutionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_execution_id()) {
      set_execution_id(from.execution_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_release_id()) {
      set_release_id(from.release_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_client_order_id()) {
      set_client_order_id(from.client_order_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_counterparty_execution_id()) {
      set_counterparty_execution_id(from.counterparty_execution_id());
    }
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_execution_ccy()) {
      set_execution_ccy(from.execution_ccy());
    }
    if (from.has_execution_status()) {
      set_execution_status(from.execution_status());
    }
    if (from.has_execution_prc()) {
      set_execution_prc(from.execution_prc());
    }
    if (from.has_execution_qty()) {
      set_execution_qty(from.execution_qty());
    }
    if (from.has_execution_val()) {
      set_execution_val(from.execution_val());
    }
    if (from.has_leaves_qty()) {
      set_leaves_qty(from.leaves_qty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_average_prc()) {
      set_average_prc(from.average_prc());
    }
    if (from.has_leg_type()) {
      set_leg_type(from.leg_type());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionData::CopyFrom(const ExecutionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionData::IsInitialized() const {
  
  return true;
}

void ExecutionData::Swap(ExecutionData* other) {
  if (other != this) {
    std::swap(execution_id_, other->execution_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(release_id_, other->release_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(client_order_id_, other->client_order_id_);
    std::swap(counterparty_execution_id_, other->counterparty_execution_id_);
    std::swap(side_code_, other->side_code_);
    std::swap(execution_ccy_, other->execution_ccy_);
    std::swap(execution_status_, other->execution_status_);
    std::swap(execution_prc_, other->execution_prc_);
    std::swap(execution_qty_, other->execution_qty_);
    std::swap(execution_val_, other->execution_val_);
    std::swap(leaves_qty_, other->leaves_qty_);
    std::swap(average_prc_, other->average_prc_);
    std::swap(leg_type_, other->leg_type_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionData_descriptor_;
  metadata.reflection = ExecutionData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string InstrumentData::_default_last_prc_("0");
const ::std::string InstrumentData::_default_mark_prc_("0");
#ifndef _MSC_VER
const int InstrumentData::kInstrumentIdFieldNumber;
const int InstrumentData::kInstrumentTypeFieldNumber;
const int InstrumentData::kNameFieldNumber;
const int InstrumentData::kSymbolFieldNumber;
const int InstrumentData::kCusipFieldNumber;
const int InstrumentData::kSedolFieldNumber;
const int InstrumentData::kIsinFieldNumber;
const int InstrumentData::kRicFieldNumber;
const int InstrumentData::kCfiCodeFieldNumber;
const int InstrumentData::kSecurityIdFieldNumber;
const int InstrumentData::kSecurityTypeFieldNumber;
const int InstrumentData::kSecurityDescFieldNumber;
const int InstrumentData::kSecurityExchangeFieldNumber;
const int InstrumentData::kMaturityMonthYearFieldNumber;
const int InstrumentData::kBaseCcyFieldNumber;
const int InstrumentData::kLastPrcFieldNumber;
const int InstrumentData::kMarkPrcFieldNumber;
const int InstrumentData::kMarkDatetimeFieldNumber;
const int InstrumentData::kMultiplierFieldNumber;
const int InstrumentData::kExchangePriceFactorFieldNumber;
const int InstrumentData::kRolloverDatetimeFieldNumber;
const int InstrumentData::kIsActiveFieldNumber;
const int InstrumentData::kAddedDatetimeFieldNumber;
const int InstrumentData::kAddedByFieldNumber;
const int InstrumentData::kUpdatedDatetimeFieldNumber;
const int InstrumentData::kUpdatedByFieldNumber;
#endif  // !_MSC_VER

InstrumentData::InstrumentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentData::InitAsDefaultInstance() {
}

InstrumentData::InstrumentData(const InstrumentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentData::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cusip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sedol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ric_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cfi_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maturity_month_year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_ccy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_prc_ = const_cast< ::std::string*>(&_default_last_prc_);
  mark_prc_ = const_cast< ::std::string*>(&_default_mark_prc_);
  mark_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multiplier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_price_factor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rollover_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_active_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentData::~InstrumentData() {
  SharedDtor();
}

void InstrumentData::SharedDtor() {
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (instrument_type_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (cusip_ != &::google::protobuf::internal::kEmptyString) {
    delete cusip_;
  }
  if (sedol_ != &::google::protobuf::internal::kEmptyString) {
    delete sedol_;
  }
  if (isin_ != &::google::protobuf::internal::kEmptyString) {
    delete isin_;
  }
  if (ric_ != &::google::protobuf::internal::kEmptyString) {
    delete ric_;
  }
  if (cfi_code_ != &::google::protobuf::internal::kEmptyString) {
    delete cfi_code_;
  }
  if (security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_id_;
  }
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete security_desc_;
  }
  if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete security_exchange_;
  }
  if (maturity_month_year_ != &::google::protobuf::internal::kEmptyString) {
    delete maturity_month_year_;
  }
  if (base_ccy_ != &::google::protobuf::internal::kEmptyString) {
    delete base_ccy_;
  }
  if (last_prc_ != &_default_last_prc_) {
    delete last_prc_;
  }
  if (mark_prc_ != &_default_mark_prc_) {
    delete mark_prc_;
  }
  if (mark_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete mark_datetime_;
  }
  if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
    delete multiplier_;
  }
  if (exchange_price_factor_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_price_factor_;
  }
  if (rollover_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete rollover_datetime_;
  }
  if (is_active_ != &::google::protobuf::internal::kEmptyString) {
    delete is_active_;
  }
  if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete added_datetime_;
  }
  if (added_by_ != &::google::protobuf::internal::kEmptyString) {
    delete added_by_;
  }
  if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_datetime_;
  }
  if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_by_;
  }
  if (this != default_instance_) {
  }
}

void InstrumentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentData_descriptor_;
}

const InstrumentData& InstrumentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

InstrumentData* InstrumentData::default_instance_ = NULL;

InstrumentData* InstrumentData::New() const {
  return new InstrumentData;
}

void InstrumentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_instrument_type()) {
      if (instrument_type_ != &::google::protobuf::internal::kEmptyString) {
        instrument_type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_cusip()) {
      if (cusip_ != &::google::protobuf::internal::kEmptyString) {
        cusip_->clear();
      }
    }
    if (has_sedol()) {
      if (sedol_ != &::google::protobuf::internal::kEmptyString) {
        sedol_->clear();
      }
    }
    if (has_isin()) {
      if (isin_ != &::google::protobuf::internal::kEmptyString) {
        isin_->clear();
      }
    }
    if (has_ric()) {
      if (ric_ != &::google::protobuf::internal::kEmptyString) {
        ric_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cfi_code()) {
      if (cfi_code_ != &::google::protobuf::internal::kEmptyString) {
        cfi_code_->clear();
      }
    }
    if (has_security_id()) {
      if (security_id_ != &::google::protobuf::internal::kEmptyString) {
        security_id_->clear();
      }
    }
    if (has_security_type()) {
      if (security_type_ != &::google::protobuf::internal::kEmptyString) {
        security_type_->clear();
      }
    }
    if (has_security_desc()) {
      if (security_desc_ != &::google::protobuf::internal::kEmptyString) {
        security_desc_->clear();
      }
    }
    if (has_security_exchange()) {
      if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
        security_exchange_->clear();
      }
    }
    if (has_maturity_month_year()) {
      if (maturity_month_year_ != &::google::protobuf::internal::kEmptyString) {
        maturity_month_year_->clear();
      }
    }
    if (has_base_ccy()) {
      if (base_ccy_ != &::google::protobuf::internal::kEmptyString) {
        base_ccy_->clear();
      }
    }
    if (has_last_prc()) {
      if (last_prc_ != &_default_last_prc_) {
        last_prc_->assign(_default_last_prc_);
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_mark_prc()) {
      if (mark_prc_ != &_default_mark_prc_) {
        mark_prc_->assign(_default_mark_prc_);
      }
    }
    if (has_mark_datetime()) {
      if (mark_datetime_ != &::google::protobuf::internal::kEmptyString) {
        mark_datetime_->clear();
      }
    }
    if (has_multiplier()) {
      if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
        multiplier_->clear();
      }
    }
    if (has_exchange_price_factor()) {
      if (exchange_price_factor_ != &::google::protobuf::internal::kEmptyString) {
        exchange_price_factor_->clear();
      }
    }
    if (has_rollover_datetime()) {
      if (rollover_datetime_ != &::google::protobuf::internal::kEmptyString) {
        rollover_datetime_->clear();
      }
    }
    if (has_is_active()) {
      if (is_active_ != &::google::protobuf::internal::kEmptyString) {
        is_active_->clear();
      }
    }
    if (has_added_datetime()) {
      if (added_datetime_ != &::google::protobuf::internal::kEmptyString) {
        added_datetime_->clear();
      }
    }
    if (has_added_by()) {
      if (added_by_ != &::google::protobuf::internal::kEmptyString) {
        added_by_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_updated_datetime()) {
      if (updated_datetime_ != &::google::protobuf::internal::kEmptyString) {
        updated_datetime_->clear();
      }
    }
    if (has_updated_by()) {
      if (updated_by_ != &::google::protobuf::internal::kEmptyString) {
        updated_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument_type;
        break;
      }
      
      // optional string instrument_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_type().data(), this->instrument_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }
      
      // optional string symbol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cusip;
        break;
      }
      
      // optional string cusip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cusip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cusip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cusip().data(), this->cusip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sedol;
        break;
      }
      
      // optional string sedol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sedol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sedol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sedol().data(), this->sedol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_isin;
        break;
      }
      
      // optional string isin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isin().data(), this->isin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ric;
        break;
      }
      
      // optional string ric = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ric()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ric().data(), this->ric().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cfi_code;
        break;
      }
      
      // optional string cfi_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfi_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfi_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cfi_code().data(), this->cfi_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_security_id;
        break;
      }
      
      // optional string security_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_id().data(), this->security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_security_type;
        break;
      }
      
      // optional string security_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_type().data(), this->security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_security_desc;
        break;
      }
      
      // optional string security_desc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_desc().data(), this->security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_security_exchange;
        break;
      }
      
      // optional string security_exchange = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_exchange().data(), this->security_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_maturity_month_year;
        break;
      }
      
      // optional string maturity_month_year = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maturity_month_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturity_month_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maturity_month_year().data(), this->maturity_month_year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_base_ccy;
        break;
      }
      
      // optional string base_ccy = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_ccy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_ccy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_ccy().data(), this->base_ccy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_last_prc;
        break;
      }
      
      // optional string last_prc = 16 [default = "0"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_prc().data(), this->last_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_mark_prc;
        break;
      }
      
      // optional string mark_prc = 17 [default = "0"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mark_prc().data(), this->mark_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_mark_datetime;
        break;
      }
      
      // optional string mark_datetime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mark_datetime().data(), this->mark_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_multiplier;
        break;
      }
      
      // optional string multiplier = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiplier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multiplier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multiplier().data(), this->multiplier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_exchange_price_factor;
        break;
      }
      
      // optional string exchange_price_factor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_price_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_price_factor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange_price_factor().data(), this->exchange_price_factor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_rollover_datetime;
        break;
      }
      
      // optional string rollover_datetime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rollover_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rollover_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rollover_datetime().data(), this->rollover_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_added_datetime;
        break;
      }
      
      // optional string added_datetime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_datetime().data(), this->added_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_added_by;
        break;
      }
      
      // optional string added_by = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_added_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->added_by().data(), this->added_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_updated_datetime;
        break;
      }
      
      // optional string updated_datetime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_datetime().data(), this->updated_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_updated_by;
        break;
      }
      
      // optional string updated_by = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_by().data(), this->updated_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_id(), output);
  }
  
  // optional string instrument_type = 2;
  if (has_instrument_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_type().data(), this->instrument_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument_type(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->symbol(), output);
  }
  
  // optional string cusip = 5;
  if (has_cusip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cusip().data(), this->cusip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cusip(), output);
  }
  
  // optional string sedol = 6;
  if (has_sedol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sedol().data(), this->sedol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sedol(), output);
  }
  
  // optional string isin = 7;
  if (has_isin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isin().data(), this->isin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->isin(), output);
  }
  
  // optional string ric = 8;
  if (has_ric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ric().data(), this->ric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ric(), output);
  }
  
  // optional string cfi_code = 9;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cfi_code(), output);
  }
  
  // optional string security_id = 10;
  if (has_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_id().data(), this->security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->security_id(), output);
  }
  
  // optional string security_type = 11;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->security_type(), output);
  }
  
  // optional string security_desc = 12;
  if (has_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_desc().data(), this->security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->security_desc(), output);
  }
  
  // optional string security_exchange = 13;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->security_exchange(), output);
  }
  
  // optional string maturity_month_year = 14;
  if (has_maturity_month_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_month_year().data(), this->maturity_month_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->maturity_month_year(), output);
  }
  
  // optional string base_ccy = 15;
  if (has_base_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_ccy().data(), this->base_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->base_ccy(), output);
  }
  
  // optional string last_prc = 16 [default = "0"];
  if (has_last_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_prc().data(), this->last_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->last_prc(), output);
  }
  
  // optional string mark_prc = 17 [default = "0"];
  if (has_mark_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_prc().data(), this->mark_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->mark_prc(), output);
  }
  
  // optional string mark_datetime = 18;
  if (has_mark_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_datetime().data(), this->mark_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->mark_datetime(), output);
  }
  
  // optional string multiplier = 19;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiplier().data(), this->multiplier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->multiplier(), output);
  }
  
  // optional string exchange_price_factor = 20;
  if (has_exchange_price_factor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_price_factor().data(), this->exchange_price_factor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->exchange_price_factor(), output);
  }
  
  // optional string rollover_datetime = 21;
  if (has_rollover_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rollover_datetime().data(), this->rollover_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->rollover_datetime(), output);
  }
  
  // optional string is_active = 22;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->is_active(), output);
  }
  
  // optional string added_datetime = 23;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->added_datetime(), output);
  }
  
  // optional string added_by = 24;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->added_by(), output);
  }
  
  // optional string updated_datetime = 25;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->updated_datetime(), output);
  }
  
  // optional string updated_by = 26;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->updated_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_id(), target);
  }
  
  // optional string instrument_type = 2;
  if (has_instrument_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_type().data(), this->instrument_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument_type(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }
  
  // optional string cusip = 5;
  if (has_cusip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cusip().data(), this->cusip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cusip(), target);
  }
  
  // optional string sedol = 6;
  if (has_sedol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sedol().data(), this->sedol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sedol(), target);
  }
  
  // optional string isin = 7;
  if (has_isin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isin().data(), this->isin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->isin(), target);
  }
  
  // optional string ric = 8;
  if (has_ric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ric().data(), this->ric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ric(), target);
  }
  
  // optional string cfi_code = 9;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cfi_code(), target);
  }
  
  // optional string security_id = 10;
  if (has_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_id().data(), this->security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->security_id(), target);
  }
  
  // optional string security_type = 11;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->security_type(), target);
  }
  
  // optional string security_desc = 12;
  if (has_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_desc().data(), this->security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->security_desc(), target);
  }
  
  // optional string security_exchange = 13;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->security_exchange(), target);
  }
  
  // optional string maturity_month_year = 14;
  if (has_maturity_month_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_month_year().data(), this->maturity_month_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->maturity_month_year(), target);
  }
  
  // optional string base_ccy = 15;
  if (has_base_ccy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_ccy().data(), this->base_ccy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->base_ccy(), target);
  }
  
  // optional string last_prc = 16 [default = "0"];
  if (has_last_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_prc().data(), this->last_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->last_prc(), target);
  }
  
  // optional string mark_prc = 17 [default = "0"];
  if (has_mark_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_prc().data(), this->mark_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mark_prc(), target);
  }
  
  // optional string mark_datetime = 18;
  if (has_mark_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark_datetime().data(), this->mark_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->mark_datetime(), target);
  }
  
  // optional string multiplier = 19;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiplier().data(), this->multiplier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->multiplier(), target);
  }
  
  // optional string exchange_price_factor = 20;
  if (has_exchange_price_factor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_price_factor().data(), this->exchange_price_factor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->exchange_price_factor(), target);
  }
  
  // optional string rollover_datetime = 21;
  if (has_rollover_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rollover_datetime().data(), this->rollover_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->rollover_datetime(), target);
  }
  
  // optional string is_active = 22;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->is_active(), target);
  }
  
  // optional string added_datetime = 23;
  if (has_added_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_datetime().data(), this->added_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->added_datetime(), target);
  }
  
  // optional string added_by = 24;
  if (has_added_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->added_by().data(), this->added_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->added_by(), target);
  }
  
  // optional string updated_datetime = 25;
  if (has_updated_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_datetime().data(), this->updated_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->updated_datetime(), target);
  }
  
  // optional string updated_by = 26;
  if (has_updated_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_by().data(), this->updated_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->updated_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string instrument_type = 2;
    if (has_instrument_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_type());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // optional string cusip = 5;
    if (has_cusip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cusip());
    }
    
    // optional string sedol = 6;
    if (has_sedol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sedol());
    }
    
    // optional string isin = 7;
    if (has_isin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isin());
    }
    
    // optional string ric = 8;
    if (has_ric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ric());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cfi_code = 9;
    if (has_cfi_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfi_code());
    }
    
    // optional string security_id = 10;
    if (has_security_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_id());
    }
    
    // optional string security_type = 11;
    if (has_security_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_type());
    }
    
    // optional string security_desc = 12;
    if (has_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_desc());
    }
    
    // optional string security_exchange = 13;
    if (has_security_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_exchange());
    }
    
    // optional string maturity_month_year = 14;
    if (has_maturity_month_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturity_month_year());
    }
    
    // optional string base_ccy = 15;
    if (has_base_ccy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_ccy());
    }
    
    // optional string last_prc = 16 [default = "0"];
    if (has_last_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_prc());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string mark_prc = 17 [default = "0"];
    if (has_mark_prc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark_prc());
    }
    
    // optional string mark_datetime = 18;
    if (has_mark_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark_datetime());
    }
    
    // optional string multiplier = 19;
    if (has_multiplier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multiplier());
    }
    
    // optional string exchange_price_factor = 20;
    if (has_exchange_price_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_price_factor());
    }
    
    // optional string rollover_datetime = 21;
    if (has_rollover_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rollover_datetime());
    }
    
    // optional string is_active = 22;
    if (has_is_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
    // optional string added_datetime = 23;
    if (has_added_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_datetime());
    }
    
    // optional string added_by = 24;
    if (has_added_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->added_by());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string updated_datetime = 25;
    if (has_updated_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_datetime());
    }
    
    // optional string updated_by = 26;
    if (has_updated_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentData::MergeFrom(const InstrumentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_instrument_type()) {
      set_instrument_type(from.instrument_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_cusip()) {
      set_cusip(from.cusip());
    }
    if (from.has_sedol()) {
      set_sedol(from.sedol());
    }
    if (from.has_isin()) {
      set_isin(from.isin());
    }
    if (from.has_ric()) {
      set_ric(from.ric());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cfi_code()) {
      set_cfi_code(from.cfi_code());
    }
    if (from.has_security_id()) {
      set_security_id(from.security_id());
    }
    if (from.has_security_type()) {
      set_security_type(from.security_type());
    }
    if (from.has_security_desc()) {
      set_security_desc(from.security_desc());
    }
    if (from.has_security_exchange()) {
      set_security_exchange(from.security_exchange());
    }
    if (from.has_maturity_month_year()) {
      set_maturity_month_year(from.maturity_month_year());
    }
    if (from.has_base_ccy()) {
      set_base_ccy(from.base_ccy());
    }
    if (from.has_last_prc()) {
      set_last_prc(from.last_prc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mark_prc()) {
      set_mark_prc(from.mark_prc());
    }
    if (from.has_mark_datetime()) {
      set_mark_datetime(from.mark_datetime());
    }
    if (from.has_multiplier()) {
      set_multiplier(from.multiplier());
    }
    if (from.has_exchange_price_factor()) {
      set_exchange_price_factor(from.exchange_price_factor());
    }
    if (from.has_rollover_datetime()) {
      set_rollover_datetime(from.rollover_datetime());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_added_datetime()) {
      set_added_datetime(from.added_datetime());
    }
    if (from.has_added_by()) {
      set_added_by(from.added_by());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updated_datetime()) {
      set_updated_datetime(from.updated_datetime());
    }
    if (from.has_updated_by()) {
      set_updated_by(from.updated_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentData::CopyFrom(const InstrumentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentData::IsInitialized() const {
  
  return true;
}

void InstrumentData::Swap(InstrumentData* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(instrument_type_, other->instrument_type_);
    std::swap(name_, other->name_);
    std::swap(symbol_, other->symbol_);
    std::swap(cusip_, other->cusip_);
    std::swap(sedol_, other->sedol_);
    std::swap(isin_, other->isin_);
    std::swap(ric_, other->ric_);
    std::swap(cfi_code_, other->cfi_code_);
    std::swap(security_id_, other->security_id_);
    std::swap(security_type_, other->security_type_);
    std::swap(security_desc_, other->security_desc_);
    std::swap(security_exchange_, other->security_exchange_);
    std::swap(maturity_month_year_, other->maturity_month_year_);
    std::swap(base_ccy_, other->base_ccy_);
    std::swap(last_prc_, other->last_prc_);
    std::swap(mark_prc_, other->mark_prc_);
    std::swap(mark_datetime_, other->mark_datetime_);
    std::swap(multiplier_, other->multiplier_);
    std::swap(exchange_price_factor_, other->exchange_price_factor_);
    std::swap(rollover_datetime_, other->rollover_datetime_);
    std::swap(is_active_, other->is_active_);
    std::swap(added_datetime_, other->added_datetime_);
    std::swap(added_by_, other->added_by_);
    std::swap(updated_datetime_, other->updated_datetime_);
    std::swap(updated_by_, other->updated_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentData_descriptor_;
  metadata.reflection = InstrumentData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SignalData::_default_limit_prc_("0");
const ::std::string SignalData::_default_stop_prc_("0");
#ifndef _MSC_VER
const int SignalData::kExternalOrderIdFieldNumber;
const int SignalData::kInvestmentSystemIdFieldNumber;
const int SignalData::kSignalIdFieldNumber;
const int SignalData::kInstrumentIdFieldNumber;
const int SignalData::kSideCodeFieldNumber;
const int SignalData::kSignalQtyFieldNumber;
const int SignalData::kOrderTypeFieldNumber;
const int SignalData::kLimitPrcFieldNumber;
const int SignalData::kStopPrcFieldNumber;
#endif  // !_MSC_VER

SignalData::SignalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalData::InitAsDefaultInstance() {
}

SignalData::SignalData(const SignalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalData::SharedCtor() {
  _cached_size_ = 0;
  external_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signal_qty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_prc_ = const_cast< ::std::string*>(&_default_limit_prc_);
  stop_prc_ = const_cast< ::std::string*>(&_default_stop_prc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalData::~SignalData() {
  SharedDtor();
}

void SignalData::SharedDtor() {
  if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete external_order_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_id_;
  }
  if (side_code_ != &::google::protobuf::internal::kEmptyString) {
    delete side_code_;
  }
  if (signal_qty_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_qty_;
  }
  if (order_type_ != &::google::protobuf::internal::kEmptyString) {
    delete order_type_;
  }
  if (limit_prc_ != &_default_limit_prc_) {
    delete limit_prc_;
  }
  if (stop_prc_ != &_default_stop_prc_) {
    delete stop_prc_;
  }
  if (this != default_instance_) {
  }
}

void SignalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalData_descriptor_;
}

const SignalData& SignalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

SignalData* SignalData::default_instance_ = NULL;

SignalData* SignalData::New() const {
  return new SignalData;
}

void SignalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_external_order_id()) {
      if (external_order_id_ != &::google::protobuf::internal::kEmptyString) {
        external_order_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_signal_id()) {
      if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
        signal_id_->clear();
      }
    }
    if (has_instrument_id()) {
      if (instrument_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_id_->clear();
      }
    }
    if (has_side_code()) {
      if (side_code_ != &::google::protobuf::internal::kEmptyString) {
        side_code_->clear();
      }
    }
    if (has_signal_qty()) {
      if (signal_qty_ != &::google::protobuf::internal::kEmptyString) {
        signal_qty_->clear();
      }
    }
    if (has_order_type()) {
      if (order_type_ != &::google::protobuf::internal::kEmptyString) {
        order_type_->clear();
      }
    }
    if (has_limit_prc()) {
      if (limit_prc_ != &_default_limit_prc_) {
        limit_prc_->assign(_default_limit_prc_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stop_prc()) {
      if (stop_prc_ != &_default_stop_prc_) {
        stop_prc_->assign(_default_stop_prc_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string external_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_order_id().data(), this->external_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signal_id;
        break;
      }
      
      // optional string signal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_id().data(), this->signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument_id;
        break;
      }
      
      // optional string instrument_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_id().data(), this->instrument_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_side_code;
        break;
      }
      
      // optional string side_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side_code().data(), this->side_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_signal_qty;
        break;
      }
      
      // optional string signal_qty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_qty().data(), this->signal_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_order_type;
        break;
      }
      
      // optional string order_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_type().data(), this->order_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_limit_prc;
        break;
      }
      
      // optional string limit_prc = 8 [default = "0"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limit_prc().data(), this->limit_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stop_prc;
        break;
      }
      
      // optional string stop_prc = 9 [default = "0"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_prc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_prc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_prc().data(), this->stop_prc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string external_order_id = 1;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->external_order_id(), output);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investment_system_id(), output);
  }
  
  // optional string signal_id = 3;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signal_id(), output);
  }
  
  // optional string instrument_id = 4;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->instrument_id(), output);
  }
  
  // optional string side_code = 5;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->side_code(), output);
  }
  
  // optional string signal_qty = 6;
  if (has_signal_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_qty().data(), this->signal_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->signal_qty(), output);
  }
  
  // optional string order_type = 7;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_type().data(), this->order_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->order_type(), output);
  }
  
  // optional string limit_prc = 8 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->limit_prc(), output);
  }
  
  // optional string stop_prc = 9 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stop_prc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string external_order_id = 1;
  if (has_external_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_order_id().data(), this->external_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->external_order_id(), target);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investment_system_id(), target);
  }
  
  // optional string signal_id = 3;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signal_id(), target);
  }
  
  // optional string instrument_id = 4;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_id().data(), this->instrument_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument_id(), target);
  }
  
  // optional string side_code = 5;
  if (has_side_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side_code().data(), this->side_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->side_code(), target);
  }
  
  // optional string signal_qty = 6;
  if (has_signal_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_qty().data(), this->signal_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->signal_qty(), target);
  }
  
  // optional string order_type = 7;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_type().data(), this->order_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_type(), target);
  }
  
  // optional string limit_prc = 8 [default = "0"];
  if (has_limit_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit_prc().data(), this->limit_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->limit_prc(), target);
  }
  
  // optional string stop_prc = 9 [default = "0"];
  if (has_stop_prc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_prc().data(), this->stop_prc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stop_prc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string external_order_id = 1;
    if (has_external_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_order_id());
    }
    
    // optional string investment_system_id = 2;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string signal_id = 3;
    if (has_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_id());
    }
    
    // optional string instrument_id = 4;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }
    
    // optional string side_code = 5;
    if (has_side_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_code());
    }
    
    // optional string signal_qty = 6;
    if (has_signal_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_qty());
    }
    
    // optional string order_type = 7;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }
    
    // optional string limit_prc = 8 [default = "0"];
    if (has_limit_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit_prc());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string stop_prc = 9 [default = "0"];
    if (has_stop_prc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_prc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalData::MergeFrom(const SignalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_external_order_id()) {
      set_external_order_id(from.external_order_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_signal_id()) {
      set_signal_id(from.signal_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_side_code()) {
      set_side_code(from.side_code());
    }
    if (from.has_signal_qty()) {
      set_signal_qty(from.signal_qty());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_limit_prc()) {
      set_limit_prc(from.limit_prc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stop_prc()) {
      set_stop_prc(from.stop_prc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalData::CopyFrom(const SignalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalData::IsInitialized() const {
  
  return true;
}

void SignalData::Swap(SignalData* other) {
  if (other != this) {
    std::swap(external_order_id_, other->external_order_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(signal_id_, other->signal_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(side_code_, other->side_code_);
    std::swap(signal_qty_, other->signal_qty_);
    std::swap(order_type_, other->order_type_);
    std::swap(limit_prc_, other->limit_prc_);
    std::swap(stop_prc_, other->stop_prc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalData_descriptor_;
  metadata.reflection = SignalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvestmentSystemData::kInvestmentSystemIdFieldNumber;
const int InvestmentSystemData::kNameFieldNumber;
const int InvestmentSystemData::kIsActiveFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemData::InvestmentSystemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemData::InitAsDefaultInstance() {
}

InvestmentSystemData::InvestmentSystemData(const InvestmentSystemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemData::SharedCtor() {
  _cached_size_ = 0;
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_active_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemData::~InvestmentSystemData() {
  SharedDtor();
}

void InvestmentSystemData::SharedDtor() {
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (is_active_ != &::google::protobuf::internal::kEmptyString) {
    delete is_active_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemData_descriptor_;
}

const InvestmentSystemData& InvestmentSystemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

InvestmentSystemData* InvestmentSystemData::default_instance_ = NULL;

InvestmentSystemData* InvestmentSystemData::New() const {
  return new InvestmentSystemData;
}

void InvestmentSystemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_is_active()) {
      if (is_active_ != &::google::protobuf::internal::kEmptyString) {
        is_active_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string investment_system_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string investment_system_id = 1;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investment_system_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->is_active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string investment_system_id = 1;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->investment_system_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->is_active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string investment_system_id = 1;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string is_active = 3;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemData::MergeFrom(const InvestmentSystemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemData::CopyFrom(const InvestmentSystemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemData::IsInitialized() const {
  
  return true;
}

void InvestmentSystemData::Swap(InvestmentSystemData* other) {
  if (other != this) {
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(name_, other->name_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemData_descriptor_;
  metadata.reflection = InvestmentSystemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategyData::kStrategyIdFieldNumber;
const int StrategyData::kInvestmentSystemIdFieldNumber;
const int StrategyData::kSignalIdFieldNumber;
const int StrategyData::kNameFieldNumber;
const int StrategyData::kDefaultWeightFieldNumber;
const int StrategyData::kIsActiveFieldNumber;
#endif  // !_MSC_VER

StrategyData::StrategyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategyData::InitAsDefaultInstance() {
}

StrategyData::StrategyData(const StrategyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategyData::SharedCtor() {
  _cached_size_ = 0;
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investment_system_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_active_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategyData::~StrategyData() {
  SharedDtor();
}

void StrategyData::SharedDtor() {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
    delete investment_system_id_;
  }
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (default_weight_ != &::google::protobuf::internal::kEmptyString) {
    delete default_weight_;
  }
  if (is_active_ != &::google::protobuf::internal::kEmptyString) {
    delete is_active_;
  }
  if (this != default_instance_) {
  }
}

void StrategyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyData_descriptor_;
}

const StrategyData& StrategyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

StrategyData* StrategyData::default_instance_ = NULL;

StrategyData* StrategyData::New() const {
  return new StrategyData;
}

void StrategyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    if (has_investment_system_id()) {
      if (investment_system_id_ != &::google::protobuf::internal::kEmptyString) {
        investment_system_id_->clear();
      }
    }
    if (has_signal_id()) {
      if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
        signal_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_default_weight()) {
      if (default_weight_ != &::google::protobuf::internal::kEmptyString) {
        default_weight_->clear();
      }
    }
    if (has_is_active()) {
      if (is_active_ != &::google::protobuf::internal::kEmptyString) {
        is_active_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strategy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategy_id().data(), this->strategy_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_investment_system_id;
        break;
      }
      
      // optional string investment_system_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investment_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investment_system_id().data(), this->investment_system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signal_id;
        break;
      }
      
      // optional string signal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_id().data(), this->signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_default_weight;
        break;
      }
      
      // optional string default_weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_weight().data(), this->default_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_is_active;
        break;
      }
      
      // optional string is_active = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_active().data(), this->is_active().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strategy_id = 1;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_id().data(), this->strategy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strategy_id(), output);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investment_system_id(), output);
  }
  
  // optional string signal_id = 3;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signal_id(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional string default_weight = 5;
  if (has_default_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_weight().data(), this->default_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->default_weight(), output);
  }
  
  // optional string is_active = 6;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->is_active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strategy_id = 1;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_id().data(), this->strategy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strategy_id(), target);
  }
  
  // optional string investment_system_id = 2;
  if (has_investment_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investment_system_id().data(), this->investment_system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investment_system_id(), target);
  }
  
  // optional string signal_id = 3;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signal_id(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional string default_weight = 5;
  if (has_default_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_weight().data(), this->default_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_weight(), target);
  }
  
  // optional string is_active = 6;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_active().data(), this->is_active().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->is_active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategyData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strategy_id = 1;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy_id());
    }
    
    // optional string investment_system_id = 2;
    if (has_investment_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investment_system_id());
    }
    
    // optional string signal_id = 3;
    if (has_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_id());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string default_weight = 5;
    if (has_default_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_weight());
    }
    
    // optional string is_active = 6;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_active());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategyData::MergeFrom(const StrategyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_investment_system_id()) {
      set_investment_system_id(from.investment_system_id());
    }
    if (from.has_signal_id()) {
      set_signal_id(from.signal_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_default_weight()) {
      set_default_weight(from.default_weight());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyData::CopyFrom(const StrategyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyData::IsInitialized() const {
  
  return true;
}

void StrategyData::Swap(StrategyData* other) {
  if (other != this) {
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(investment_system_id_, other->investment_system_id_);
    std::swap(signal_id_, other->signal_id_);
    std::swap(name_, other->name_);
    std::swap(default_weight_, other->default_weight_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategyData_descriptor_;
  metadata.reflection = StrategyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountStrategyData::kAccountIdFieldNumber;
const int AccountStrategyData::kStrategyIdFieldNumber;
const int AccountStrategyData::kWeightFieldNumber;
const int AccountStrategyData::kIsEnabledFieldNumber;
#endif  // !_MSC_VER

AccountStrategyData::AccountStrategyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountStrategyData::InitAsDefaultInstance() {
}

AccountStrategyData::AccountStrategyData(const AccountStrategyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountStrategyData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_enabled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountStrategyData::~AccountStrategyData() {
  SharedDtor();
}

void AccountStrategyData::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    delete weight_;
  }
  if (is_enabled_ != &::google::protobuf::internal::kEmptyString) {
    delete is_enabled_;
  }
  if (this != default_instance_) {
  }
}

void AccountStrategyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountStrategyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountStrategyData_descriptor_;
}

const AccountStrategyData& AccountStrategyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

AccountStrategyData* AccountStrategyData::default_instance_ = NULL;

AccountStrategyData* AccountStrategyData::New() const {
  return new AccountStrategyData;
}

void AccountStrategyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    if (has_weight()) {
      if (weight_ != &::google::protobuf::internal::kEmptyString) {
        weight_->clear();
      }
    }
    if (has_is_enabled()) {
      if (is_enabled_ != &::google::protobuf::internal::kEmptyString) {
        is_enabled_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountStrategyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strategy_id;
        break;
      }
      
      // optional string strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategy_id().data(), this->strategy_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weight;
        break;
      }
      
      // optional string weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_is_enabled;
        break;
      }
      
      // optional string is_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->is_enabled().data(), this->is_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountStrategyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_id(), output);
  }
  
  // optional string strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_id().data(), this->strategy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strategy_id(), output);
  }
  
  // optional string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weight(), output);
  }
  
  // optional string is_enabled = 4;
  if (has_is_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_enabled().data(), this->is_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->is_enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountStrategyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }
  
  // optional string strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_id().data(), this->strategy_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strategy_id(), target);
  }
  
  // optional string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight(), target);
  }
  
  // optional string is_enabled = 4;
  if (has_is_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->is_enabled().data(), this->is_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->is_enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountStrategyData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional string strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy_id());
    }
    
    // optional string weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight());
    }
    
    // optional string is_enabled = 4;
    if (has_is_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_enabled());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountStrategyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountStrategyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountStrategyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountStrategyData::MergeFrom(const AccountStrategyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_is_enabled()) {
      set_is_enabled(from.is_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountStrategyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountStrategyData::CopyFrom(const AccountStrategyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountStrategyData::IsInitialized() const {
  
  return true;
}

void AccountStrategyData::Swap(AccountStrategyData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(weight_, other->weight_);
    std::swap(is_enabled_, other->is_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountStrategyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountStrategyData_descriptor_;
  metadata.reflection = AccountStrategyData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ExecutionReportData::_default_multilegreportingtype_("1");
const ::std::string ExecutionReportData::_default_cumqty_("0");
const ::std::string ExecutionReportData::_default_orderqty_("0");
const ::std::string ExecutionReportData::_default_leavesqty_("0");
const ::std::string ExecutionReportData::_default_lastshares_("0");
const ::std::string ExecutionReportData::_default_price_("0");
const ::std::string ExecutionReportData::_default_avgpx_("0");
const ::std::string ExecutionReportData::_default_lastpx_("0");
const ::std::string ExecutionReportData::_default_stoppx_("0");
#ifndef _MSC_VER
const int ExecutionReportData::kReleaseIdFieldNumber;
const int ExecutionReportData::kSessionIdFieldNumber;
const int ExecutionReportData::kSendingTmFieldNumber;
const int ExecutionReportData::kExecIDFieldNumber;
const int ExecutionReportData::kOrderIDFieldNumber;
const int ExecutionReportData::kClOrdIDFieldNumber;
const int ExecutionReportData::kOrigClOrdIDFieldNumber;
const int ExecutionReportData::kExecRefIDFieldNumber;
const int ExecutionReportData::kOrdTypeFieldNumber;
const int ExecutionReportData::kExecTypeFieldNumber;
const int ExecutionReportData::kExecTransTypeFieldNumber;
const int ExecutionReportData::kMultiLegReportingTypeFieldNumber;
const int ExecutionReportData::kSecurityIDFieldNumber;
const int ExecutionReportData::kSecurityTypeFieldNumber;
const int ExecutionReportData::kIDSourceFieldNumber;
const int ExecutionReportData::kAccountFieldNumber;
const int ExecutionReportData::kOrdStatusFieldNumber;
const int ExecutionReportData::kSymbolFieldNumber;
const int ExecutionReportData::kSideFieldNumber;
const int ExecutionReportData::kTimeInForceFieldNumber;
const int ExecutionReportData::kMaturityMonthYearFieldNumber;
const int ExecutionReportData::kTransactTimeFieldNumber;
const int ExecutionReportData::kTextFieldNumber;
const int ExecutionReportData::kCumQtyFieldNumber;
const int ExecutionReportData::kOrderQtyFieldNumber;
const int ExecutionReportData::kLeavesQtyFieldNumber;
const int ExecutionReportData::kLastSharesFieldNumber;
const int ExecutionReportData::kPriceFieldNumber;
const int ExecutionReportData::kAvgPxFieldNumber;
const int ExecutionReportData::kLastPxFieldNumber;
const int ExecutionReportData::kStopPxFieldNumber;
#endif  // !_MSC_VER

ExecutionReportData::ExecutionReportData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionReportData::InitAsDefaultInstance() {
}

ExecutionReportData::ExecutionReportData(const ExecutionReportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionReportData::SharedCtor() {
  _cached_size_ = 0;
  release_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sending_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  origclordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execrefid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exectype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exectranstype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multilegreportingtype_ = const_cast< ::std::string*>(&_default_multilegreportingtype_);
  securityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  securitytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeinforce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maturitymonthyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transacttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cumqty_ = const_cast< ::std::string*>(&_default_cumqty_);
  orderqty_ = const_cast< ::std::string*>(&_default_orderqty_);
  leavesqty_ = const_cast< ::std::string*>(&_default_leavesqty_);
  lastshares_ = const_cast< ::std::string*>(&_default_lastshares_);
  price_ = const_cast< ::std::string*>(&_default_price_);
  avgpx_ = const_cast< ::std::string*>(&_default_avgpx_);
  lastpx_ = const_cast< ::std::string*>(&_default_lastpx_);
  stoppx_ = const_cast< ::std::string*>(&_default_stoppx_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionReportData::~ExecutionReportData() {
  SharedDtor();
}

void ExecutionReportData::SharedDtor() {
  if (release_id_ != &::google::protobuf::internal::kEmptyString) {
    delete release_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (sending_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete sending_tm_;
  }
  if (execid_ != &::google::protobuf::internal::kEmptyString) {
    delete execid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (clordid_ != &::google::protobuf::internal::kEmptyString) {
    delete clordid_;
  }
  if (origclordid_ != &::google::protobuf::internal::kEmptyString) {
    delete origclordid_;
  }
  if (execrefid_ != &::google::protobuf::internal::kEmptyString) {
    delete execrefid_;
  }
  if (ordtype_ != &::google::protobuf::internal::kEmptyString) {
    delete ordtype_;
  }
  if (exectype_ != &::google::protobuf::internal::kEmptyString) {
    delete exectype_;
  }
  if (exectranstype_ != &::google::protobuf::internal::kEmptyString) {
    delete exectranstype_;
  }
  if (multilegreportingtype_ != &_default_multilegreportingtype_) {
    delete multilegreportingtype_;
  }
  if (securityid_ != &::google::protobuf::internal::kEmptyString) {
    delete securityid_;
  }
  if (securitytype_ != &::google::protobuf::internal::kEmptyString) {
    delete securitytype_;
  }
  if (idsource_ != &::google::protobuf::internal::kEmptyString) {
    delete idsource_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ordstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete ordstatus_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (side_ != &::google::protobuf::internal::kEmptyString) {
    delete side_;
  }
  if (timeinforce_ != &::google::protobuf::internal::kEmptyString) {
    delete timeinforce_;
  }
  if (maturitymonthyear_ != &::google::protobuf::internal::kEmptyString) {
    delete maturitymonthyear_;
  }
  if (transacttime_ != &::google::protobuf::internal::kEmptyString) {
    delete transacttime_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (cumqty_ != &_default_cumqty_) {
    delete cumqty_;
  }
  if (orderqty_ != &_default_orderqty_) {
    delete orderqty_;
  }
  if (leavesqty_ != &_default_leavesqty_) {
    delete leavesqty_;
  }
  if (lastshares_ != &_default_lastshares_) {
    delete lastshares_;
  }
  if (price_ != &_default_price_) {
    delete price_;
  }
  if (avgpx_ != &_default_avgpx_) {
    delete avgpx_;
  }
  if (lastpx_ != &_default_lastpx_) {
    delete lastpx_;
  }
  if (stoppx_ != &_default_stoppx_) {
    delete stoppx_;
  }
  if (this != default_instance_) {
  }
}

void ExecutionReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionReportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionReportData_descriptor_;
}

const ExecutionReportData& ExecutionReportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ExecutionReportData* ExecutionReportData::default_instance_ = NULL;

ExecutionReportData* ExecutionReportData::New() const {
  return new ExecutionReportData;
}

void ExecutionReportData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_release_id()) {
      if (release_id_ != &::google::protobuf::internal::kEmptyString) {
        release_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_sending_tm()) {
      if (sending_tm_ != &::google::protobuf::internal::kEmptyString) {
        sending_tm_->clear();
      }
    }
    if (has_execid()) {
      if (execid_ != &::google::protobuf::internal::kEmptyString) {
        execid_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_clordid()) {
      if (clordid_ != &::google::protobuf::internal::kEmptyString) {
        clordid_->clear();
      }
    }
    if (has_origclordid()) {
      if (origclordid_ != &::google::protobuf::internal::kEmptyString) {
        origclordid_->clear();
      }
    }
    if (has_execrefid()) {
      if (execrefid_ != &::google::protobuf::internal::kEmptyString) {
        execrefid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ordtype()) {
      if (ordtype_ != &::google::protobuf::internal::kEmptyString) {
        ordtype_->clear();
      }
    }
    if (has_exectype()) {
      if (exectype_ != &::google::protobuf::internal::kEmptyString) {
        exectype_->clear();
      }
    }
    if (has_exectranstype()) {
      if (exectranstype_ != &::google::protobuf::internal::kEmptyString) {
        exectranstype_->clear();
      }
    }
    if (has_multilegreportingtype()) {
      if (multilegreportingtype_ != &_default_multilegreportingtype_) {
        multilegreportingtype_->assign(_default_multilegreportingtype_);
      }
    }
    if (has_securityid()) {
      if (securityid_ != &::google::protobuf::internal::kEmptyString) {
        securityid_->clear();
      }
    }
    if (has_securitytype()) {
      if (securitytype_ != &::google::protobuf::internal::kEmptyString) {
        securitytype_->clear();
      }
    }
    if (has_idsource()) {
      if (idsource_ != &::google::protobuf::internal::kEmptyString) {
        idsource_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_ordstatus()) {
      if (ordstatus_ != &::google::protobuf::internal::kEmptyString) {
        ordstatus_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_side()) {
      if (side_ != &::google::protobuf::internal::kEmptyString) {
        side_->clear();
      }
    }
    if (has_timeinforce()) {
      if (timeinforce_ != &::google::protobuf::internal::kEmptyString) {
        timeinforce_->clear();
      }
    }
    if (has_maturitymonthyear()) {
      if (maturitymonthyear_ != &::google::protobuf::internal::kEmptyString) {
        maturitymonthyear_->clear();
      }
    }
    if (has_transacttime()) {
      if (transacttime_ != &::google::protobuf::internal::kEmptyString) {
        transacttime_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_cumqty()) {
      if (cumqty_ != &_default_cumqty_) {
        cumqty_->assign(_default_cumqty_);
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_orderqty()) {
      if (orderqty_ != &_default_orderqty_) {
        orderqty_->assign(_default_orderqty_);
      }
    }
    if (has_leavesqty()) {
      if (leavesqty_ != &_default_leavesqty_) {
        leavesqty_->assign(_default_leavesqty_);
      }
    }
    if (has_lastshares()) {
      if (lastshares_ != &_default_lastshares_) {
        lastshares_->assign(_default_lastshares_);
      }
    }
    if (has_price()) {
      if (price_ != &_default_price_) {
        price_->assign(_default_price_);
      }
    }
    if (has_avgpx()) {
      if (avgpx_ != &_default_avgpx_) {
        avgpx_->assign(_default_avgpx_);
      }
    }
    if (has_lastpx()) {
      if (lastpx_ != &_default_lastpx_) {
        lastpx_->assign(_default_lastpx_);
      }
    }
    if (has_stoppx()) {
      if (stoppx_ != &_default_stoppx_) {
        stoppx_->assign(_default_stoppx_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string release_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release_id().data(), this->release_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sending_tm;
        break;
      }
      
      // optional string sending_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sending_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sending_tm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sending_tm().data(), this->sending_tm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExecID;
        break;
      }
      
      // optional string ExecID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExecID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execid().data(), this->execid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OrderID;
        break;
      }
      
      // optional string OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ClOrdID;
        break;
      }
      
      // optional string ClOrdID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClOrdID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clordid().data(), this->clordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_OrigClOrdID;
        break;
      }
      
      // optional string OrigClOrdID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrigClOrdID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origclordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origclordid().data(), this->origclordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ExecRefID;
        break;
      }
      
      // optional string ExecRefID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExecRefID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execrefid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execrefid().data(), this->execrefid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_OrdType;
        break;
      }
      
      // optional string OrdType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrdType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordtype().data(), this->ordtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ExecType;
        break;
      }
      
      // optional string ExecType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExecType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exectype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exectype().data(), this->exectype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ExecTransType;
        break;
      }
      
      // optional string ExecTransType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExecTransType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exectranstype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exectranstype().data(), this->exectranstype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_MultiLegReportingType;
        break;
      }
      
      // optional string MultiLegReportingType = 12 [default = "1"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MultiLegReportingType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multilegreportingtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multilegreportingtype().data(), this->multilegreportingtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_SecurityID;
        break;
      }
      
      // optional string SecurityID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecurityID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securityid().data(), this->securityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_SecurityType;
        break;
      }
      
      // optional string SecurityType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecurityType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securitytype().data(), this->securitytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_IDSource;
        break;
      }
      
      // optional string IDSource = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IDSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idsource().data(), this->idsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Account;
        break;
      }
      
      // optional string Account = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OrdStatus;
        break;
      }
      
      // optional string OrdStatus = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrdStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordstatus().data(), this->ordstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Symbol;
        break;
      }
      
      // optional string Symbol = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_Side;
        break;
      }
      
      // optional string Side = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side().data(), this->side().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_TimeInForce;
        break;
      }
      
      // optional string TimeInForce = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeInForce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeinforce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timeinforce().data(), this->timeinforce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_MaturityMonthYear;
        break;
      }
      
      // optional string MaturityMonthYear = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaturityMonthYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturitymonthyear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maturitymonthyear().data(), this->maturitymonthyear().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_TransactTime;
        break;
      }
      
      // optional string TransactTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TransactTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transacttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transacttime().data(), this->transacttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_Text;
        break;
      }
      
      // optional string Text = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_CumQty;
        break;
      }
      
      // optional string CumQty = 24 [default = "0"];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CumQty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cumqty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cumqty().data(), this->cumqty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_OrderQty;
        break;
      }
      
      // optional string OrderQty = 25 [default = "0"];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderQty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderqty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderqty().data(), this->orderqty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_LeavesQty;
        break;
      }
      
      // optional string LeavesQty = 26 [default = "0"];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LeavesQty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leavesqty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leavesqty().data(), this->leavesqty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_LastShares;
        break;
      }
      
      // optional string LastShares = 27 [default = "0"];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastShares:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastshares()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastshares().data(), this->lastshares().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_Price;
        break;
      }
      
      // optional string Price = 28 [default = "0"];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_AvgPx;
        break;
      }
      
      // optional string AvgPx = 29 [default = "0"];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AvgPx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avgpx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avgpx().data(), this->avgpx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_LastPx;
        break;
      }
      
      // optional string LastPx = 30 [default = "0"];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastPx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpx().data(), this->lastpx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_StopPx;
        break;
      }
      
      // optional string StopPx = 31 [default = "0"];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StopPx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoppx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stoppx().data(), this->stoppx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string release_id = 1;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->release_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string sending_tm = 3;
  if (has_sending_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sending_tm().data(), this->sending_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sending_tm(), output);
  }
  
  // optional string ExecID = 4;
  if (has_execid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execid().data(), this->execid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->execid(), output);
  }
  
  // optional string OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->orderid(), output);
  }
  
  // optional string ClOrdID = 6;
  if (has_clordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clordid().data(), this->clordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->clordid(), output);
  }
  
  // optional string OrigClOrdID = 7;
  if (has_origclordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origclordid().data(), this->origclordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->origclordid(), output);
  }
  
  // optional string ExecRefID = 8;
  if (has_execrefid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execrefid().data(), this->execrefid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->execrefid(), output);
  }
  
  // optional string OrdType = 9;
  if (has_ordtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordtype().data(), this->ordtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ordtype(), output);
  }
  
  // optional string ExecType = 10;
  if (has_exectype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exectype().data(), this->exectype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->exectype(), output);
  }
  
  // optional string ExecTransType = 11;
  if (has_exectranstype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exectranstype().data(), this->exectranstype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->exectranstype(), output);
  }
  
  // optional string MultiLegReportingType = 12 [default = "1"];
  if (has_multilegreportingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegreportingtype().data(), this->multilegreportingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->multilegreportingtype(), output);
  }
  
  // optional string SecurityID = 13;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->securityid(), output);
  }
  
  // optional string SecurityType = 14;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->securitytype(), output);
  }
  
  // optional string IDSource = 15;
  if (has_idsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idsource().data(), this->idsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->idsource(), output);
  }
  
  // optional string Account = 16;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->account(), output);
  }
  
  // optional string OrdStatus = 17;
  if (has_ordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordstatus().data(), this->ordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->ordstatus(), output);
  }
  
  // optional string Symbol = 18;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->symbol(), output);
  }
  
  // optional string Side = 19;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->side(), output);
  }
  
  // optional string TimeInForce = 20;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeinforce().data(), this->timeinforce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->timeinforce(), output);
  }
  
  // optional string MaturityMonthYear = 21;
  if (has_maturitymonthyear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturitymonthyear().data(), this->maturitymonthyear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->maturitymonthyear(), output);
  }
  
  // optional string TransactTime = 22;
  if (has_transacttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transacttime().data(), this->transacttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->transacttime(), output);
  }
  
  // optional string Text = 23;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->text(), output);
  }
  
  // optional string CumQty = 24 [default = "0"];
  if (has_cumqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cumqty().data(), this->cumqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->cumqty(), output);
  }
  
  // optional string OrderQty = 25 [default = "0"];
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderqty().data(), this->orderqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->orderqty(), output);
  }
  
  // optional string LeavesQty = 26 [default = "0"];
  if (has_leavesqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leavesqty().data(), this->leavesqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->leavesqty(), output);
  }
  
  // optional string LastShares = 27 [default = "0"];
  if (has_lastshares()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastshares().data(), this->lastshares().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->lastshares(), output);
  }
  
  // optional string Price = 28 [default = "0"];
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->price(), output);
  }
  
  // optional string AvgPx = 29 [default = "0"];
  if (has_avgpx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avgpx().data(), this->avgpx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->avgpx(), output);
  }
  
  // optional string LastPx = 30 [default = "0"];
  if (has_lastpx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpx().data(), this->lastpx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->lastpx(), output);
  }
  
  // optional string StopPx = 31 [default = "0"];
  if (has_stoppx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoppx().data(), this->stoppx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->stoppx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionReportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string release_id = 1;
  if (has_release_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release_id().data(), this->release_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->release_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string sending_tm = 3;
  if (has_sending_tm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sending_tm().data(), this->sending_tm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sending_tm(), target);
  }
  
  // optional string ExecID = 4;
  if (has_execid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execid().data(), this->execid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->execid(), target);
  }
  
  // optional string OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderid(), target);
  }
  
  // optional string ClOrdID = 6;
  if (has_clordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clordid().data(), this->clordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clordid(), target);
  }
  
  // optional string OrigClOrdID = 7;
  if (has_origclordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origclordid().data(), this->origclordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->origclordid(), target);
  }
  
  // optional string ExecRefID = 8;
  if (has_execrefid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execrefid().data(), this->execrefid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->execrefid(), target);
  }
  
  // optional string OrdType = 9;
  if (has_ordtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordtype().data(), this->ordtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ordtype(), target);
  }
  
  // optional string ExecType = 10;
  if (has_exectype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exectype().data(), this->exectype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->exectype(), target);
  }
  
  // optional string ExecTransType = 11;
  if (has_exectranstype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exectranstype().data(), this->exectranstype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->exectranstype(), target);
  }
  
  // optional string MultiLegReportingType = 12 [default = "1"];
  if (has_multilegreportingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegreportingtype().data(), this->multilegreportingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->multilegreportingtype(), target);
  }
  
  // optional string SecurityID = 13;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->securityid(), target);
  }
  
  // optional string SecurityType = 14;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->securitytype(), target);
  }
  
  // optional string IDSource = 15;
  if (has_idsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idsource().data(), this->idsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->idsource(), target);
  }
  
  // optional string Account = 16;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->account(), target);
  }
  
  // optional string OrdStatus = 17;
  if (has_ordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordstatus().data(), this->ordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ordstatus(), target);
  }
  
  // optional string Symbol = 18;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->symbol(), target);
  }
  
  // optional string Side = 19;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->side(), target);
  }
  
  // optional string TimeInForce = 20;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeinforce().data(), this->timeinforce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->timeinforce(), target);
  }
  
  // optional string MaturityMonthYear = 21;
  if (has_maturitymonthyear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturitymonthyear().data(), this->maturitymonthyear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->maturitymonthyear(), target);
  }
  
  // optional string TransactTime = 22;
  if (has_transacttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transacttime().data(), this->transacttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->transacttime(), target);
  }
  
  // optional string Text = 23;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->text(), target);
  }
  
  // optional string CumQty = 24 [default = "0"];
  if (has_cumqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cumqty().data(), this->cumqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->cumqty(), target);
  }
  
  // optional string OrderQty = 25 [default = "0"];
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderqty().data(), this->orderqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->orderqty(), target);
  }
  
  // optional string LeavesQty = 26 [default = "0"];
  if (has_leavesqty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leavesqty().data(), this->leavesqty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->leavesqty(), target);
  }
  
  // optional string LastShares = 27 [default = "0"];
  if (has_lastshares()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastshares().data(), this->lastshares().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->lastshares(), target);
  }
  
  // optional string Price = 28 [default = "0"];
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->price(), target);
  }
  
  // optional string AvgPx = 29 [default = "0"];
  if (has_avgpx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avgpx().data(), this->avgpx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->avgpx(), target);
  }
  
  // optional string LastPx = 30 [default = "0"];
  if (has_lastpx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpx().data(), this->lastpx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->lastpx(), target);
  }
  
  // optional string StopPx = 31 [default = "0"];
  if (has_stoppx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoppx().data(), this->stoppx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->stoppx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionReportData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string release_id = 1;
    if (has_release_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string sending_tm = 3;
    if (has_sending_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sending_tm());
    }
    
    // optional string ExecID = 4;
    if (has_execid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execid());
    }
    
    // optional string OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }
    
    // optional string ClOrdID = 6;
    if (has_clordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clordid());
    }
    
    // optional string OrigClOrdID = 7;
    if (has_origclordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origclordid());
    }
    
    // optional string ExecRefID = 8;
    if (has_execrefid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execrefid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string OrdType = 9;
    if (has_ordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordtype());
    }
    
    // optional string ExecType = 10;
    if (has_exectype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exectype());
    }
    
    // optional string ExecTransType = 11;
    if (has_exectranstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exectranstype());
    }
    
    // optional string MultiLegReportingType = 12 [default = "1"];
    if (has_multilegreportingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multilegreportingtype());
    }
    
    // optional string SecurityID = 13;
    if (has_securityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securityid());
    }
    
    // optional string SecurityType = 14;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitytype());
    }
    
    // optional string IDSource = 15;
    if (has_idsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idsource());
    }
    
    // optional string Account = 16;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OrdStatus = 17;
    if (has_ordstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordstatus());
    }
    
    // optional string Symbol = 18;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // optional string Side = 19;
    if (has_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side());
    }
    
    // optional string TimeInForce = 20;
    if (has_timeinforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeinforce());
    }
    
    // optional string MaturityMonthYear = 21;
    if (has_maturitymonthyear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturitymonthyear());
    }
    
    // optional string TransactTime = 22;
    if (has_transacttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transacttime());
    }
    
    // optional string Text = 23;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string CumQty = 24 [default = "0"];
    if (has_cumqty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cumqty());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string OrderQty = 25 [default = "0"];
    if (has_orderqty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderqty());
    }
    
    // optional string LeavesQty = 26 [default = "0"];
    if (has_leavesqty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leavesqty());
    }
    
    // optional string LastShares = 27 [default = "0"];
    if (has_lastshares()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastshares());
    }
    
    // optional string Price = 28 [default = "0"];
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }
    
    // optional string AvgPx = 29 [default = "0"];
    if (has_avgpx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avgpx());
    }
    
    // optional string LastPx = 30 [default = "0"];
    if (has_lastpx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpx());
    }
    
    // optional string StopPx = 31 [default = "0"];
    if (has_stoppx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoppx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionReportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionReportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionReportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionReportData::MergeFrom(const ExecutionReportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_release_id()) {
      set_release_id(from.release_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_sending_tm()) {
      set_sending_tm(from.sending_tm());
    }
    if (from.has_execid()) {
      set_execid(from.execid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_clordid()) {
      set_clordid(from.clordid());
    }
    if (from.has_origclordid()) {
      set_origclordid(from.origclordid());
    }
    if (from.has_execrefid()) {
      set_execrefid(from.execrefid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordtype()) {
      set_ordtype(from.ordtype());
    }
    if (from.has_exectype()) {
      set_exectype(from.exectype());
    }
    if (from.has_exectranstype()) {
      set_exectranstype(from.exectranstype());
    }
    if (from.has_multilegreportingtype()) {
      set_multilegreportingtype(from.multilegreportingtype());
    }
    if (from.has_securityid()) {
      set_securityid(from.securityid());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_idsource()) {
      set_idsource(from.idsource());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ordstatus()) {
      set_ordstatus(from.ordstatus());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
    if (from.has_maturitymonthyear()) {
      set_maturitymonthyear(from.maturitymonthyear());
    }
    if (from.has_transacttime()) {
      set_transacttime(from.transacttime());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_cumqty()) {
      set_cumqty(from.cumqty());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_orderqty()) {
      set_orderqty(from.orderqty());
    }
    if (from.has_leavesqty()) {
      set_leavesqty(from.leavesqty());
    }
    if (from.has_lastshares()) {
      set_lastshares(from.lastshares());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_avgpx()) {
      set_avgpx(from.avgpx());
    }
    if (from.has_lastpx()) {
      set_lastpx(from.lastpx());
    }
    if (from.has_stoppx()) {
      set_stoppx(from.stoppx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionReportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionReportData::CopyFrom(const ExecutionReportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionReportData::IsInitialized() const {
  
  return true;
}

void ExecutionReportData::Swap(ExecutionReportData* other) {
  if (other != this) {
    std::swap(release_id_, other->release_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(sending_tm_, other->sending_tm_);
    std::swap(execid_, other->execid_);
    std::swap(orderid_, other->orderid_);
    std::swap(clordid_, other->clordid_);
    std::swap(origclordid_, other->origclordid_);
    std::swap(execrefid_, other->execrefid_);
    std::swap(ordtype_, other->ordtype_);
    std::swap(exectype_, other->exectype_);
    std::swap(exectranstype_, other->exectranstype_);
    std::swap(multilegreportingtype_, other->multilegreportingtype_);
    std::swap(securityid_, other->securityid_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(idsource_, other->idsource_);
    std::swap(account_, other->account_);
    std::swap(ordstatus_, other->ordstatus_);
    std::swap(symbol_, other->symbol_);
    std::swap(side_, other->side_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(maturitymonthyear_, other->maturitymonthyear_);
    std::swap(transacttime_, other->transacttime_);
    std::swap(text_, other->text_);
    std::swap(cumqty_, other->cumqty_);
    std::swap(orderqty_, other->orderqty_);
    std::swap(leavesqty_, other->leavesqty_);
    std::swap(lastshares_, other->lastshares_);
    std::swap(price_, other->price_);
    std::swap(avgpx_, other->avgpx_);
    std::swap(lastpx_, other->lastpx_);
    std::swap(stoppx_, other->stoppx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionReportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionReportData_descriptor_;
  metadata.reflection = ExecutionReportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DraftOrderMessage::kDraftOrderDataFieldNumber;
const int DraftOrderMessage::kDraftAllocationDataFieldNumber;
#endif  // !_MSC_VER

DraftOrderMessage::DraftOrderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DraftOrderMessage::InitAsDefaultInstance() {
  draft_order_data_ = const_cast< ::quantmodel::DraftOrderData*>(&::quantmodel::DraftOrderData::default_instance());
}

DraftOrderMessage::DraftOrderMessage(const DraftOrderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DraftOrderMessage::SharedCtor() {
  _cached_size_ = 0;
  draft_order_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftOrderMessage::~DraftOrderMessage() {
  SharedDtor();
}

void DraftOrderMessage::SharedDtor() {
  if (this != default_instance_) {
    delete draft_order_data_;
  }
}

void DraftOrderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftOrderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftOrderMessage_descriptor_;
}

const DraftOrderMessage& DraftOrderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DraftOrderMessage* DraftOrderMessage::default_instance_ = NULL;

DraftOrderMessage* DraftOrderMessage::New() const {
  return new DraftOrderMessage;
}

void DraftOrderMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_draft_order_data()) {
      if (draft_order_data_ != NULL) draft_order_data_->::quantmodel::DraftOrderData::Clear();
    }
  }
  draft_allocation_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftOrderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .quantmodel.DraftOrderData draft_order_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draft_order_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_draft_allocation_data;
        break;
      }
      
      // repeated .quantmodel.DraftAllocationData draft_allocation_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draft_allocation_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draft_allocation_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_draft_allocation_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DraftOrderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .quantmodel.DraftOrderData draft_order_data = 1;
  if (has_draft_order_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->draft_order_data(), output);
  }
  
  // repeated .quantmodel.DraftAllocationData draft_allocation_data = 2;
  for (int i = 0; i < this->draft_allocation_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->draft_allocation_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DraftOrderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .quantmodel.DraftOrderData draft_order_data = 1;
  if (has_draft_order_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->draft_order_data(), target);
  }
  
  // repeated .quantmodel.DraftAllocationData draft_allocation_data = 2;
  for (int i = 0; i < this->draft_allocation_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->draft_allocation_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DraftOrderMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .quantmodel.DraftOrderData draft_order_data = 1;
    if (has_draft_order_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draft_order_data());
    }
    
  }
  // repeated .quantmodel.DraftAllocationData draft_allocation_data = 2;
  total_size += 1 * this->draft_allocation_data_size();
  for (int i = 0; i < this->draft_allocation_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draft_allocation_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftOrderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftOrderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftOrderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftOrderMessage::MergeFrom(const DraftOrderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  draft_allocation_data_.MergeFrom(from.draft_allocation_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draft_order_data()) {
      mutable_draft_order_data()->::quantmodel::DraftOrderData::MergeFrom(from.draft_order_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftOrderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftOrderMessage::CopyFrom(const DraftOrderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftOrderMessage::IsInitialized() const {
  
  return true;
}

void DraftOrderMessage::Swap(DraftOrderMessage* other) {
  if (other != this) {
    std::swap(draft_order_data_, other->draft_order_data_);
    draft_allocation_data_.Swap(&other->draft_allocation_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftOrderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftOrderMessage_descriptor_;
  metadata.reflection = DraftOrderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderMessage::kOrderDataFieldNumber;
const int OrderMessage::kAllocationDataFieldNumber;
const int OrderMessage::kReleaseDataFieldNumber;
const int OrderMessage::kExecutionDataFieldNumber;
#endif  // !_MSC_VER

OrderMessage::OrderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderMessage::InitAsDefaultInstance() {
  order_data_ = const_cast< ::quantmodel::OrderData*>(&::quantmodel::OrderData::default_instance());
}

OrderMessage::OrderMessage(const OrderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderMessage::SharedCtor() {
  _cached_size_ = 0;
  order_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderMessage::~OrderMessage() {
  SharedDtor();
}

void OrderMessage::SharedDtor() {
  if (this != default_instance_) {
    delete order_data_;
  }
}

void OrderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderMessage_descriptor_;
}

const OrderMessage& OrderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

OrderMessage* OrderMessage::default_instance_ = NULL;

OrderMessage* OrderMessage::New() const {
  return new OrderMessage;
}

void OrderMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_data()) {
      if (order_data_ != NULL) order_data_->::quantmodel::OrderData::Clear();
    }
  }
  allocation_data_.Clear();
  release_data_.Clear();
  execution_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .quantmodel.OrderData order_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allocation_data;
        break;
      }
      
      // repeated .quantmodel.AllocationData allocation_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocation_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocation_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allocation_data;
        if (input->ExpectTag(26)) goto parse_release_data;
        break;
      }
      
      // repeated .quantmodel.ReleaseData release_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_release_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_release_data;
        if (input->ExpectTag(34)) goto parse_execution_data;
        break;
      }
      
      // repeated .quantmodel.ExecutionData execution_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execution_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_execution_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .quantmodel.OrderData order_data = 1;
  if (has_order_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_data(), output);
  }
  
  // repeated .quantmodel.AllocationData allocation_data = 2;
  for (int i = 0; i < this->allocation_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allocation_data(i), output);
  }
  
  // repeated .quantmodel.ReleaseData release_data = 3;
  for (int i = 0; i < this->release_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->release_data(i), output);
  }
  
  // repeated .quantmodel.ExecutionData execution_data = 4;
  for (int i = 0; i < this->execution_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->execution_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .quantmodel.OrderData order_data = 1;
  if (has_order_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order_data(), target);
  }
  
  // repeated .quantmodel.AllocationData allocation_data = 2;
  for (int i = 0; i < this->allocation_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allocation_data(i), target);
  }
  
  // repeated .quantmodel.ReleaseData release_data = 3;
  for (int i = 0; i < this->release_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->release_data(i), target);
  }
  
  // repeated .quantmodel.ExecutionData execution_data = 4;
  for (int i = 0; i < this->execution_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->execution_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .quantmodel.OrderData order_data = 1;
    if (has_order_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_data());
    }
    
  }
  // repeated .quantmodel.AllocationData allocation_data = 2;
  total_size += 1 * this->allocation_data_size();
  for (int i = 0; i < this->allocation_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocation_data(i));
  }
  
  // repeated .quantmodel.ReleaseData release_data = 3;
  total_size += 1 * this->release_data_size();
  for (int i = 0; i < this->release_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->release_data(i));
  }
  
  // repeated .quantmodel.ExecutionData execution_data = 4;
  total_size += 1 * this->execution_data_size();
  for (int i = 0; i < this->execution_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->execution_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderMessage::MergeFrom(const OrderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  allocation_data_.MergeFrom(from.allocation_data_);
  release_data_.MergeFrom(from.release_data_);
  execution_data_.MergeFrom(from.execution_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_data()) {
      mutable_order_data()->::quantmodel::OrderData::MergeFrom(from.order_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMessage::CopyFrom(const OrderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMessage::IsInitialized() const {
  
  return true;
}

void OrderMessage::Swap(OrderMessage* other) {
  if (other != this) {
    std::swap(order_data_, other->order_data_);
    allocation_data_.Swap(&other->allocation_data_);
    release_data_.Swap(&other->release_data_);
    execution_data_.Swap(&other->execution_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderMessage_descriptor_;
  metadata.reflection = OrderMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DatabaseEngineRequest_QueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineRequest_QueryType_descriptor_;
}
bool DatabaseEngineRequest_QueryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DatabaseEngineRequest_QueryType DatabaseEngineRequest::SELECT;
const DatabaseEngineRequest_QueryType DatabaseEngineRequest::UPDATE;
const DatabaseEngineRequest_QueryType DatabaseEngineRequest::QueryType_MIN;
const DatabaseEngineRequest_QueryType DatabaseEngineRequest::QueryType_MAX;
const int DatabaseEngineRequest::QueryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DatabaseEngineRequest_Query::kTypeFieldNumber;
const int DatabaseEngineRequest_Query::kQueryIdFieldNumber;
const int DatabaseEngineRequest_Query::kQueryStrFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineRequest_Query::DatabaseEngineRequest_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineRequest_Query::InitAsDefaultInstance() {
}

DatabaseEngineRequest_Query::DatabaseEngineRequest_Query(const DatabaseEngineRequest_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineRequest_Query::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineRequest_Query::~DatabaseEngineRequest_Query() {
  SharedDtor();
}

void DatabaseEngineRequest_Query::SharedDtor() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (query_str_ != &::google::protobuf::internal::kEmptyString) {
    delete query_str_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseEngineRequest_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineRequest_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineRequest_Query_descriptor_;
}

const DatabaseEngineRequest_Query& DatabaseEngineRequest_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineRequest_Query* DatabaseEngineRequest_Query::default_instance_ = NULL;

DatabaseEngineRequest_Query* DatabaseEngineRequest_Query::New() const {
  return new DatabaseEngineRequest_Query;
}

void DatabaseEngineRequest_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_query_id()) {
      if (query_id_ != &::google::protobuf::internal::kEmptyString) {
        query_id_->clear();
      }
    }
    if (has_query_str()) {
      if (query_str_ != &::google::protobuf::internal::kEmptyString) {
        query_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineRequest_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .quantmodel.DatabaseEngineRequest.QueryType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DatabaseEngineRequest_QueryType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::DatabaseEngineRequest_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_id;
        break;
      }
      
      // optional string query_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_id().data(), this->query_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query_str;
        break;
      }
      
      // optional string query_str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_str().data(), this->query_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineRequest_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .quantmodel.DatabaseEngineRequest.QueryType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string query_id = 2;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query_id(), output);
  }
  
  // optional string query_str = 3;
  if (has_query_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_str().data(), this->query_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->query_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineRequest_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .quantmodel.DatabaseEngineRequest.QueryType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string query_id = 2;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query_id(), target);
  }
  
  // optional string query_str = 3;
  if (has_query_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_str().data(), this->query_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineRequest_Query::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .quantmodel.DatabaseEngineRequest.QueryType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string query_id = 2;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_id());
    }
    
    // optional string query_str = 3;
    if (has_query_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineRequest_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineRequest_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineRequest_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineRequest_Query::MergeFrom(const DatabaseEngineRequest_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
    if (from.has_query_str()) {
      set_query_str(from.query_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineRequest_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineRequest_Query::CopyFrom(const DatabaseEngineRequest_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineRequest_Query::IsInitialized() const {
  
  return true;
}

void DatabaseEngineRequest_Query::Swap(DatabaseEngineRequest_Query* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(query_id_, other->query_id_);
    std::swap(query_str_, other->query_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineRequest_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineRequest_Query_descriptor_;
  metadata.reflection = DatabaseEngineRequest_Query_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DatabaseEngineRequest::kRequestIdFieldNumber;
const int DatabaseEngineRequest::kTimestampFieldNumber;
const int DatabaseEngineRequest::kQueryFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineRequest::DatabaseEngineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineRequest::InitAsDefaultInstance() {
}

DatabaseEngineRequest::DatabaseEngineRequest(const DatabaseEngineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineRequest::~DatabaseEngineRequest() {
  SharedDtor();
}

void DatabaseEngineRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseEngineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineRequest_descriptor_;
}

const DatabaseEngineRequest& DatabaseEngineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineRequest* DatabaseEngineRequest::default_instance_ = NULL;

DatabaseEngineRequest* DatabaseEngineRequest::New() const {
  return new DatabaseEngineRequest;
}

void DatabaseEngineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query;
        break;
      }
      
      // repeated .quantmodel.DatabaseEngineRequest.Query query = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // repeated .quantmodel.DatabaseEngineRequest.Query query = 3;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->query(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // repeated .quantmodel.DatabaseEngineRequest.Query query = 3;
  for (int i = 0; i < this->query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->query(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .quantmodel.DatabaseEngineRequest.Query query = 3;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineRequest::MergeFrom(const DatabaseEngineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_.MergeFrom(from.query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineRequest::CopyFrom(const DatabaseEngineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineRequest::IsInitialized() const {
  
  return true;
}

void DatabaseEngineRequest::Swap(DatabaseEngineRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    query_.Swap(&other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineRequest_descriptor_;
  metadata.reflection = DatabaseEngineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatabaseEngineResponse_ResultSet_Row_Column::kColumnIdFieldNumber;
const int DatabaseEngineResponse_ResultSet_Row_Column::kNameFieldNumber;
const int DatabaseEngineResponse_ResultSet_Row_Column::kValueFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineResponse_ResultSet_Row_Column::DatabaseEngineResponse_ResultSet_Row_Column()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineResponse_ResultSet_Row_Column::InitAsDefaultInstance() {
}

DatabaseEngineResponse_ResultSet_Row_Column::DatabaseEngineResponse_ResultSet_Row_Column(const DatabaseEngineResponse_ResultSet_Row_Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet_Row_Column::SharedCtor() {
  _cached_size_ = 0;
  column_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineResponse_ResultSet_Row_Column::~DatabaseEngineResponse_ResultSet_Row_Column() {
  SharedDtor();
}

void DatabaseEngineResponse_ResultSet_Row_Column::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseEngineResponse_ResultSet_Row_Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet_Row_Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineResponse_ResultSet_Row_Column_descriptor_;
}

const DatabaseEngineResponse_ResultSet_Row_Column& DatabaseEngineResponse_ResultSet_Row_Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineResponse_ResultSet_Row_Column* DatabaseEngineResponse_ResultSet_Row_Column::default_instance_ = NULL;

DatabaseEngineResponse_ResultSet_Row_Column* DatabaseEngineResponse_ResultSet_Row_Column::New() const {
  return new DatabaseEngineResponse_ResultSet_Row_Column;
}

void DatabaseEngineResponse_ResultSet_Row_Column::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineResponse_ResultSet_Row_Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 column_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_id_)));
          set_has_column_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineResponse_ResultSet_Row_Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 column_id = 1;
  if (has_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->column_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineResponse_ResultSet_Row_Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 column_id = 1;
  if (has_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->column_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineResponse_ResultSet_Row_Column::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 column_id = 1;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineResponse_ResultSet_Row_Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineResponse_ResultSet_Row_Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineResponse_ResultSet_Row_Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineResponse_ResultSet_Row_Column::MergeFrom(const DatabaseEngineResponse_ResultSet_Row_Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column_id()) {
      set_column_id(from.column_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineResponse_ResultSet_Row_Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet_Row_Column::CopyFrom(const DatabaseEngineResponse_ResultSet_Row_Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineResponse_ResultSet_Row_Column::IsInitialized() const {
  
  return true;
}

void DatabaseEngineResponse_ResultSet_Row_Column::Swap(DatabaseEngineResponse_ResultSet_Row_Column* other) {
  if (other != this) {
    std::swap(column_id_, other->column_id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineResponse_ResultSet_Row_Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineResponse_ResultSet_Row_Column_descriptor_;
  metadata.reflection = DatabaseEngineResponse_ResultSet_Row_Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DatabaseEngineResponse_ResultSet_Row::kRowIdFieldNumber;
const int DatabaseEngineResponse_ResultSet_Row::kColumnFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineResponse_ResultSet_Row::DatabaseEngineResponse_ResultSet_Row()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineResponse_ResultSet_Row::InitAsDefaultInstance() {
}

DatabaseEngineResponse_ResultSet_Row::DatabaseEngineResponse_ResultSet_Row(const DatabaseEngineResponse_ResultSet_Row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet_Row::SharedCtor() {
  _cached_size_ = 0;
  row_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineResponse_ResultSet_Row::~DatabaseEngineResponse_ResultSet_Row() {
  SharedDtor();
}

void DatabaseEngineResponse_ResultSet_Row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatabaseEngineResponse_ResultSet_Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet_Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineResponse_ResultSet_Row_descriptor_;
}

const DatabaseEngineResponse_ResultSet_Row& DatabaseEngineResponse_ResultSet_Row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineResponse_ResultSet_Row* DatabaseEngineResponse_ResultSet_Row::default_instance_ = NULL;

DatabaseEngineResponse_ResultSet_Row* DatabaseEngineResponse_ResultSet_Row::New() const {
  return new DatabaseEngineResponse_ResultSet_Row;
}

void DatabaseEngineResponse_ResultSet_Row::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_id_ = 0;
  }
  column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineResponse_ResultSet_Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_id_)));
          set_has_row_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }
      
      // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row.Column column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineResponse_ResultSet_Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 row_id = 1;
  if (has_row_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_id(), output);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row.Column column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineResponse_ResultSet_Row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 row_id = 1;
  if (has_row_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_id(), target);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row.Column column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineResponse_ResultSet_Row::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 row_id = 1;
    if (has_row_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_id());
    }
    
  }
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row.Column column = 2;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineResponse_ResultSet_Row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineResponse_ResultSet_Row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineResponse_ResultSet_Row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineResponse_ResultSet_Row::MergeFrom(const DatabaseEngineResponse_ResultSet_Row& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_id()) {
      set_row_id(from.row_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineResponse_ResultSet_Row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet_Row::CopyFrom(const DatabaseEngineResponse_ResultSet_Row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineResponse_ResultSet_Row::IsInitialized() const {
  
  return true;
}

void DatabaseEngineResponse_ResultSet_Row::Swap(DatabaseEngineResponse_ResultSet_Row* other) {
  if (other != this) {
    std::swap(row_id_, other->row_id_);
    column_.Swap(&other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineResponse_ResultSet_Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineResponse_ResultSet_Row_descriptor_;
  metadata.reflection = DatabaseEngineResponse_ResultSet_Row_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DatabaseEngineResponse_ResultSet::kQueryIdFieldNumber;
const int DatabaseEngineResponse_ResultSet::kRowFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineResponse_ResultSet::DatabaseEngineResponse_ResultSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineResponse_ResultSet::InitAsDefaultInstance() {
}

DatabaseEngineResponse_ResultSet::DatabaseEngineResponse_ResultSet(const DatabaseEngineResponse_ResultSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet::SharedCtor() {
  _cached_size_ = 0;
  query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineResponse_ResultSet::~DatabaseEngineResponse_ResultSet() {
  SharedDtor();
}

void DatabaseEngineResponse_ResultSet::SharedDtor() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseEngineResponse_ResultSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineResponse_ResultSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineResponse_ResultSet_descriptor_;
}

const DatabaseEngineResponse_ResultSet& DatabaseEngineResponse_ResultSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineResponse_ResultSet* DatabaseEngineResponse_ResultSet::default_instance_ = NULL;

DatabaseEngineResponse_ResultSet* DatabaseEngineResponse_ResultSet::New() const {
  return new DatabaseEngineResponse_ResultSet;
}

void DatabaseEngineResponse_ResultSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query_id()) {
      if (query_id_ != &::google::protobuf::internal::kEmptyString) {
        query_id_->clear();
      }
    }
  }
  row_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineResponse_ResultSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_id().data(), this->query_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row;
        break;
      }
      
      // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineResponse_ResultSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string query_id = 1;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query_id(), output);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row row = 2;
  for (int i = 0; i < this->row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineResponse_ResultSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string query_id = 1;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_id(), target);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row row = 2;
  for (int i = 0; i < this->row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->row(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineResponse_ResultSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string query_id = 1;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_id());
    }
    
  }
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet.Row row = 2;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineResponse_ResultSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineResponse_ResultSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineResponse_ResultSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineResponse_ResultSet::MergeFrom(const DatabaseEngineResponse_ResultSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_.MergeFrom(from.row_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineResponse_ResultSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineResponse_ResultSet::CopyFrom(const DatabaseEngineResponse_ResultSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineResponse_ResultSet::IsInitialized() const {
  
  return true;
}

void DatabaseEngineResponse_ResultSet::Swap(DatabaseEngineResponse_ResultSet* other) {
  if (other != this) {
    std::swap(query_id_, other->query_id_);
    row_.Swap(&other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineResponse_ResultSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineResponse_ResultSet_descriptor_;
  metadata.reflection = DatabaseEngineResponse_ResultSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DatabaseEngineResponse::kResponseIdFieldNumber;
const int DatabaseEngineResponse::kRequestIdFieldNumber;
const int DatabaseEngineResponse::kTimestampFieldNumber;
const int DatabaseEngineResponse::kResultSetFieldNumber;
#endif  // !_MSC_VER

DatabaseEngineResponse::DatabaseEngineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseEngineResponse::InitAsDefaultInstance() {
}

DatabaseEngineResponse::DatabaseEngineResponse(const DatabaseEngineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseEngineResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseEngineResponse::~DatabaseEngineResponse() {
  SharedDtor();
}

void DatabaseEngineResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseEngineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseEngineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseEngineResponse_descriptor_;
}

const DatabaseEngineResponse& DatabaseEngineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DatabaseEngineResponse* DatabaseEngineResponse::default_instance_ = NULL;

DatabaseEngineResponse* DatabaseEngineResponse::New() const {
  return new DatabaseEngineResponse;
}

void DatabaseEngineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  result_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseEngineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_set;
        break;
      }
      
      // repeated .quantmodel.DatabaseEngineResponse.ResultSet result_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseEngineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet result_set = 4;
  for (int i = 0; i < this->result_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseEngineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet result_set = 4;
  for (int i = 0; i < this->result_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseEngineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .quantmodel.DatabaseEngineResponse.ResultSet result_set = 4;
  total_size += 1 * this->result_set_size();
  for (int i = 0; i < this->result_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseEngineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseEngineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseEngineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseEngineResponse::MergeFrom(const DatabaseEngineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_set_.MergeFrom(from.result_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseEngineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseEngineResponse::CopyFrom(const DatabaseEngineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseEngineResponse::IsInitialized() const {
  
  return true;
}

void DatabaseEngineResponse::Swap(DatabaseEngineResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    result_set_.Swap(&other->result_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseEngineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseEngineResponse_descriptor_;
  metadata.reflection = DatabaseEngineResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DealingEngineRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineRequest_RequestType_descriptor_;
}
bool DealingEngineRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DealingEngineRequest_RequestType DealingEngineRequest::EXECUTE_SIGNAL;
const DealingEngineRequest_RequestType DealingEngineRequest::EXECUTE_DRAFT_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::CREATE_DRAFT_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::CREATE_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::UPDATE_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::CANCEL_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::RELEASE_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::CREATE_RELEASE;
const DealingEngineRequest_RequestType DealingEngineRequest::VALIDATE_RELEASE;
const DealingEngineRequest_RequestType DealingEngineRequest::CANCEL_RELEASE;
const DealingEngineRequest_RequestType DealingEngineRequest::REPLACE_RELEASE;
const DealingEngineRequest_RequestType DealingEngineRequest::RELEASE_REJECTED;
const DealingEngineRequest_RequestType DealingEngineRequest::CANCEL_REJECTED;
const DealingEngineRequest_RequestType DealingEngineRequest::RELEASE_RESTATED;
const DealingEngineRequest_RequestType DealingEngineRequest::RELEASE_CANCELED;
const DealingEngineRequest_RequestType DealingEngineRequest::RELEASE_REPLACED;
const DealingEngineRequest_RequestType DealingEngineRequest::CREATE_EXECUTION;
const DealingEngineRequest_RequestType DealingEngineRequest::EXECUTION_CANCELED;
const DealingEngineRequest_RequestType DealingEngineRequest::BROADCAST_DATA;
const DealingEngineRequest_RequestType DealingEngineRequest::ACTIVE_SET;
const DealingEngineRequest_RequestType DealingEngineRequest::QUERY_ORDER;
const DealingEngineRequest_RequestType DealingEngineRequest::QUERY_RELEASE;
const DealingEngineRequest_RequestType DealingEngineRequest::QUERY_EXECUTION;
const DealingEngineRequest_RequestType DealingEngineRequest::ROLLOVER;
const DealingEngineRequest_RequestType DealingEngineRequest::CURRENT_STATUS;
const DealingEngineRequest_RequestType DealingEngineRequest::UPDATE_STATUS;
const DealingEngineRequest_RequestType DealingEngineRequest::MARKETDATA_SUBSCRIBE;
const DealingEngineRequest_RequestType DealingEngineRequest::MARKETDATA_UNSUBSCRIBE;
const DealingEngineRequest_RequestType DealingEngineRequest::FIXENGINE_LOGIN;
const DealingEngineRequest_RequestType DealingEngineRequest::FIXENGINE_LOGOUT;
const DealingEngineRequest_RequestType DealingEngineRequest::LOGOUT_FIXENGINE;
const DealingEngineRequest_RequestType DealingEngineRequest::LOGIN_FIXENGINE;
const DealingEngineRequest_RequestType DealingEngineRequest::RELOAD_STATIC_DATA;
const DealingEngineRequest_RequestType DealingEngineRequest::SHUTDOWN;
const DealingEngineRequest_RequestType DealingEngineRequest::RequestType_MIN;
const DealingEngineRequest_RequestType DealingEngineRequest::RequestType_MAX;
const int DealingEngineRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DealingEngineRequest::kRequestIdFieldNumber;
const int DealingEngineRequest::kTimestampFieldNumber;
const int DealingEngineRequest::kTypeFieldNumber;
const int DealingEngineRequest::kDraftOrderFieldNumber;
const int DealingEngineRequest::kOrderFieldNumber;
const int DealingEngineRequest::kExecutionReportDataFieldNumber;
const int DealingEngineRequest::kFixEngineDataFieldNumber;
const int DealingEngineRequest::kInstrumentDataFieldNumber;
const int DealingEngineRequest::kAccountDataFieldNumber;
const int DealingEngineRequest::kInvestmentSystemDataFieldNumber;
const int DealingEngineRequest::kSignalDataFieldNumber;
const int DealingEngineRequest::kSystemParameterDataFieldNumber;
#endif  // !_MSC_VER

DealingEngineRequest::DealingEngineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealingEngineRequest::InitAsDefaultInstance() {
  draft_order_ = const_cast< ::quantmodel::DraftOrderMessage*>(&::quantmodel::DraftOrderMessage::default_instance());
  order_ = const_cast< ::quantmodel::OrderMessage*>(&::quantmodel::OrderMessage::default_instance());
  execution_report_data_ = const_cast< ::quantmodel::ExecutionReportData*>(&::quantmodel::ExecutionReportData::default_instance());
  fix_engine_data_ = const_cast< ::quantmodel::FixEngineData*>(&::quantmodel::FixEngineData::default_instance());
  system_parameter_data_ = const_cast< ::quantmodel::SystemParameterData*>(&::quantmodel::SystemParameterData::default_instance());
}

DealingEngineRequest::DealingEngineRequest(const DealingEngineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealingEngineRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  draft_order_ = NULL;
  order_ = NULL;
  execution_report_data_ = NULL;
  fix_engine_data_ = NULL;
  system_parameter_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealingEngineRequest::~DealingEngineRequest() {
  SharedDtor();
}

void DealingEngineRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete draft_order_;
    delete order_;
    delete execution_report_data_;
    delete fix_engine_data_;
    delete system_parameter_data_;
  }
}

void DealingEngineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealingEngineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineRequest_descriptor_;
}

const DealingEngineRequest& DealingEngineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DealingEngineRequest* DealingEngineRequest::default_instance_ = NULL;

DealingEngineRequest* DealingEngineRequest::New() const {
  return new DealingEngineRequest;
}

void DealingEngineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_draft_order()) {
      if (draft_order_ != NULL) draft_order_->::quantmodel::DraftOrderMessage::Clear();
    }
    if (has_order()) {
      if (order_ != NULL) order_->::quantmodel::OrderMessage::Clear();
    }
    if (has_execution_report_data()) {
      if (execution_report_data_ != NULL) execution_report_data_->::quantmodel::ExecutionReportData::Clear();
    }
    if (has_fix_engine_data()) {
      if (fix_engine_data_ != NULL) fix_engine_data_->::quantmodel::FixEngineData::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_system_parameter_data()) {
      if (system_parameter_data_ != NULL) system_parameter_data_->::quantmodel::SystemParameterData::Clear();
    }
  }
  instrument_data_.Clear();
  account_data_.Clear();
  investment_system_data_.Clear();
  signal_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealingEngineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.DealingEngineRequest.RequestType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DealingEngineRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::DealingEngineRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draft_order;
        break;
      }
      
      // optional .quantmodel.DraftOrderMessage draft_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draft_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draft_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_order;
        break;
      }
      
      // optional .quantmodel.OrderMessage order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_execution_report_data;
        break;
      }
      
      // optional .quantmodel.ExecutionReportData execution_report_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_report_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_report_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fix_engine_data;
        break;
      }
      
      // optional .quantmodel.FixEngineData fix_engine_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_engine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fix_engine_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_instrument_data;
        break;
      }
      
      // repeated .quantmodel.InstrumentData instrument_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrument_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_instrument_data;
        if (input->ExpectTag(74)) goto parse_account_data;
        break;
      }
      
      // repeated .quantmodel.AccountData account_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_account_data;
        if (input->ExpectTag(82)) goto parse_investment_system_data;
        break;
      }
      
      // repeated .quantmodel.InvestmentSystemData investment_system_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investment_system_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_investment_system_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_investment_system_data;
        if (input->ExpectTag(90)) goto parse_signal_data;
        break;
      }
      
      // repeated .quantmodel.SignalData signal_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_signal_data;
        if (input->ExpectTag(98)) goto parse_system_parameter_data;
        break;
      }
      
      // optional .quantmodel.SystemParameterData system_parameter_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_parameter_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_parameter_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealingEngineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .quantmodel.DealingEngineRequest.RequestType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional .quantmodel.DraftOrderMessage draft_order = 4;
  if (has_draft_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->draft_order(), output);
  }
  
  // optional .quantmodel.OrderMessage order = 5;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->order(), output);
  }
  
  // optional .quantmodel.ExecutionReportData execution_report_data = 6;
  if (has_execution_report_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->execution_report_data(), output);
  }
  
  // optional .quantmodel.FixEngineData fix_engine_data = 7;
  if (has_fix_engine_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fix_engine_data(), output);
  }
  
  // repeated .quantmodel.InstrumentData instrument_data = 8;
  for (int i = 0; i < this->instrument_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->instrument_data(i), output);
  }
  
  // repeated .quantmodel.AccountData account_data = 9;
  for (int i = 0; i < this->account_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->account_data(i), output);
  }
  
  // repeated .quantmodel.InvestmentSystemData investment_system_data = 10;
  for (int i = 0; i < this->investment_system_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->investment_system_data(i), output);
  }
  
  // repeated .quantmodel.SignalData signal_data = 11;
  for (int i = 0; i < this->signal_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->signal_data(i), output);
  }
  
  // optional .quantmodel.SystemParameterData system_parameter_data = 12;
  if (has_system_parameter_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->system_parameter_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealingEngineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .quantmodel.DealingEngineRequest.RequestType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional .quantmodel.DraftOrderMessage draft_order = 4;
  if (has_draft_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->draft_order(), target);
  }
  
  // optional .quantmodel.OrderMessage order = 5;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->order(), target);
  }
  
  // optional .quantmodel.ExecutionReportData execution_report_data = 6;
  if (has_execution_report_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->execution_report_data(), target);
  }
  
  // optional .quantmodel.FixEngineData fix_engine_data = 7;
  if (has_fix_engine_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fix_engine_data(), target);
  }
  
  // repeated .quantmodel.InstrumentData instrument_data = 8;
  for (int i = 0; i < this->instrument_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->instrument_data(i), target);
  }
  
  // repeated .quantmodel.AccountData account_data = 9;
  for (int i = 0; i < this->account_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->account_data(i), target);
  }
  
  // repeated .quantmodel.InvestmentSystemData investment_system_data = 10;
  for (int i = 0; i < this->investment_system_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->investment_system_data(i), target);
  }
  
  // repeated .quantmodel.SignalData signal_data = 11;
  for (int i = 0; i < this->signal_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->signal_data(i), target);
  }
  
  // optional .quantmodel.SystemParameterData system_parameter_data = 12;
  if (has_system_parameter_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->system_parameter_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealingEngineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.DealingEngineRequest.RequestType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .quantmodel.DraftOrderMessage draft_order = 4;
    if (has_draft_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draft_order());
    }
    
    // optional .quantmodel.OrderMessage order = 5;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }
    
    // optional .quantmodel.ExecutionReportData execution_report_data = 6;
    if (has_execution_report_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->execution_report_data());
    }
    
    // optional .quantmodel.FixEngineData fix_engine_data = 7;
    if (has_fix_engine_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fix_engine_data());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .quantmodel.SystemParameterData system_parameter_data = 12;
    if (has_system_parameter_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_parameter_data());
    }
    
  }
  // repeated .quantmodel.InstrumentData instrument_data = 8;
  total_size += 1 * this->instrument_data_size();
  for (int i = 0; i < this->instrument_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrument_data(i));
  }
  
  // repeated .quantmodel.AccountData account_data = 9;
  total_size += 1 * this->account_data_size();
  for (int i = 0; i < this->account_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_data(i));
  }
  
  // repeated .quantmodel.InvestmentSystemData investment_system_data = 10;
  total_size += 1 * this->investment_system_data_size();
  for (int i = 0; i < this->investment_system_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->investment_system_data(i));
  }
  
  // repeated .quantmodel.SignalData signal_data = 11;
  total_size += 1 * this->signal_data_size();
  for (int i = 0; i < this->signal_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealingEngineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealingEngineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealingEngineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealingEngineRequest::MergeFrom(const DealingEngineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrument_data_.MergeFrom(from.instrument_data_);
  account_data_.MergeFrom(from.account_data_);
  investment_system_data_.MergeFrom(from.investment_system_data_);
  signal_data_.MergeFrom(from.signal_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_draft_order()) {
      mutable_draft_order()->::quantmodel::DraftOrderMessage::MergeFrom(from.draft_order());
    }
    if (from.has_order()) {
      mutable_order()->::quantmodel::OrderMessage::MergeFrom(from.order());
    }
    if (from.has_execution_report_data()) {
      mutable_execution_report_data()->::quantmodel::ExecutionReportData::MergeFrom(from.execution_report_data());
    }
    if (from.has_fix_engine_data()) {
      mutable_fix_engine_data()->::quantmodel::FixEngineData::MergeFrom(from.fix_engine_data());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_system_parameter_data()) {
      mutable_system_parameter_data()->::quantmodel::SystemParameterData::MergeFrom(from.system_parameter_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealingEngineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealingEngineRequest::CopyFrom(const DealingEngineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealingEngineRequest::IsInitialized() const {
  
  return true;
}

void DealingEngineRequest::Swap(DealingEngineRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(draft_order_, other->draft_order_);
    std::swap(order_, other->order_);
    std::swap(execution_report_data_, other->execution_report_data_);
    std::swap(fix_engine_data_, other->fix_engine_data_);
    instrument_data_.Swap(&other->instrument_data_);
    account_data_.Swap(&other->account_data_);
    investment_system_data_.Swap(&other->investment_system_data_);
    signal_data_.Swap(&other->signal_data_);
    std::swap(system_parameter_data_, other->system_parameter_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealingEngineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealingEngineRequest_descriptor_;
  metadata.reflection = DealingEngineRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DealingEngineResponse_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineResponse_ResponseType_descriptor_;
}
bool DealingEngineResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DealingEngineResponse_ResponseType DealingEngineResponse::ACKNOWLEDGEMENT;
const DealingEngineResponse_ResponseType DealingEngineResponse::REJECT;
const DealingEngineResponse_ResponseType DealingEngineResponse::ERROR;
const DealingEngineResponse_ResponseType DealingEngineResponse::ResponseType_MIN;
const DealingEngineResponse_ResponseType DealingEngineResponse::ResponseType_MAX;
const int DealingEngineResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DealingEngineResponse::kResponseIdFieldNumber;
const int DealingEngineResponse::kRequestIdFieldNumber;
const int DealingEngineResponse::kTimestampFieldNumber;
const int DealingEngineResponse::kTypeFieldNumber;
const int DealingEngineResponse::kErrorMsgFieldNumber;
const int DealingEngineResponse::kDraftOrderFieldNumber;
const int DealingEngineResponse::kOrderFieldNumber;
const int DealingEngineResponse::kPositionFieldNumber;
const int DealingEngineResponse::kSystemParameterFieldNumber;
const int DealingEngineResponse::kAccountLimitFieldNumber;
#endif  // !_MSC_VER

DealingEngineResponse::DealingEngineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealingEngineResponse::InitAsDefaultInstance() {
  account_limit_ = const_cast< ::quantmodel::AccountLimitData*>(&::quantmodel::AccountLimitData::default_instance());
}

DealingEngineResponse::DealingEngineResponse(const DealingEngineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealingEngineResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_limit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealingEngineResponse::~DealingEngineResponse() {
  SharedDtor();
}

void DealingEngineResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
    delete account_limit_;
  }
}

void DealingEngineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealingEngineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineResponse_descriptor_;
}

const DealingEngineResponse& DealingEngineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DealingEngineResponse* DealingEngineResponse::default_instance_ = NULL;

DealingEngineResponse* DealingEngineResponse::New() const {
  return new DealingEngineResponse;
}

void DealingEngineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_account_limit()) {
      if (account_limit_ != NULL) account_limit_->::quantmodel::AccountLimitData::Clear();
    }
  }
  draft_order_.Clear();
  order_.Clear();
  position_.Clear();
  system_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealingEngineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.DealingEngineResponse.ResponseType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DealingEngineResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::DealingEngineResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_draft_order;
        break;
      }
      
      // repeated .quantmodel.DraftOrderMessage draft_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draft_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draft_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_draft_order;
        if (input->ExpectTag(58)) goto parse_order;
        break;
      }
      
      // repeated .quantmodel.OrderMessage order = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_order;
        if (input->ExpectTag(66)) goto parse_position;
        break;
      }
      
      // repeated .quantmodel.PositionOvernightData position = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_position;
        if (input->ExpectTag(74)) goto parse_system_parameter;
        break;
      }
      
      // repeated .quantmodel.SystemParameterData system_parameter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_system_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_system_parameter;
        if (input->ExpectTag(82)) goto parse_account_limit;
        break;
      }
      
      // optional .quantmodel.AccountLimitData account_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealingEngineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .quantmodel.DealingEngineResponse.ResponseType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_msg(), output);
  }
  
  // repeated .quantmodel.DraftOrderMessage draft_order = 6;
  for (int i = 0; i < this->draft_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->draft_order(i), output);
  }
  
  // repeated .quantmodel.OrderMessage order = 7;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->order(i), output);
  }
  
  // repeated .quantmodel.PositionOvernightData position = 8;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->position(i), output);
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 9;
  for (int i = 0; i < this->system_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->system_parameter(i), output);
  }
  
  // optional .quantmodel.AccountLimitData account_limit = 10;
  if (has_account_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->account_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealingEngineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .quantmodel.DealingEngineResponse.ResponseType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }
  
  // repeated .quantmodel.DraftOrderMessage draft_order = 6;
  for (int i = 0; i < this->draft_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->draft_order(i), target);
  }
  
  // repeated .quantmodel.OrderMessage order = 7;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->order(i), target);
  }
  
  // repeated .quantmodel.PositionOvernightData position = 8;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->position(i), target);
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 9;
  for (int i = 0; i < this->system_parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->system_parameter(i), target);
  }
  
  // optional .quantmodel.AccountLimitData account_limit = 10;
  if (has_account_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->account_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealingEngineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.DealingEngineResponse.ResponseType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string error_msg = 5;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .quantmodel.AccountLimitData account_limit = 10;
    if (has_account_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_limit());
    }
    
  }
  // repeated .quantmodel.DraftOrderMessage draft_order = 6;
  total_size += 1 * this->draft_order_size();
  for (int i = 0; i < this->draft_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draft_order(i));
  }
  
  // repeated .quantmodel.OrderMessage order = 7;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }
  
  // repeated .quantmodel.PositionOvernightData position = 8;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 9;
  total_size += 1 * this->system_parameter_size();
  for (int i = 0; i < this->system_parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->system_parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealingEngineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealingEngineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealingEngineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealingEngineResponse::MergeFrom(const DealingEngineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  draft_order_.MergeFrom(from.draft_order_);
  order_.MergeFrom(from.order_);
  position_.MergeFrom(from.position_);
  system_parameter_.MergeFrom(from.system_parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_account_limit()) {
      mutable_account_limit()->::quantmodel::AccountLimitData::MergeFrom(from.account_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealingEngineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealingEngineResponse::CopyFrom(const DealingEngineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealingEngineResponse::IsInitialized() const {
  
  return true;
}

void DealingEngineResponse::Swap(DealingEngineResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(error_msg_, other->error_msg_);
    draft_order_.Swap(&other->draft_order_);
    order_.Swap(&other->order_);
    position_.Swap(&other->position_);
    system_parameter_.Swap(&other->system_parameter_);
    std::swap(account_limit_, other->account_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealingEngineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealingEngineResponse_descriptor_;
  metadata.reflection = DealingEngineResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DealingEngineBroadcast_BroadcastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineBroadcast_BroadcastType_descriptor_;
}
bool DealingEngineBroadcast_BroadcastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::EXECUTE_SIGNAL;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::EXECUTE_DRAFT_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CREATE_DRAFT_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CREATE_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::UPDATE_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CANCEL_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELEASE_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CREATE_RELEASE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::VALIDATE_RELEASE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CANCEL_RELEASE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::REPLACE_RELEASE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELEASE_REJECTED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CANCEL_REJECTED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELEASE_RESTATED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELEASE_CANCELED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELEASE_REPLACED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CREATE_EXECUTION;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::EXECUTION_CANCELED;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::BROADCAST_DATA;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::ACTIVE_SET;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::QUERY_ORDER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::QUERY_RELEASE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::QUERY_EXECUTION;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::ROLLOVER;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::CURRENT_STATUS;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::UPDATE_STATUS;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::MARKETDATA_SUBSCRIBE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::MARKETDATA_UNSUBSCRIBE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::FIXENGINE_LOGIN;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::FIXENGINE_LOGOUT;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::LOGOUT_FIXENGINE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::LOGIN_FIXENGINE;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::RELOAD_STATIC_DATA;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::SHUTDOWN;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::BroadcastType_MIN;
const DealingEngineBroadcast_BroadcastType DealingEngineBroadcast::BroadcastType_MAX;
const int DealingEngineBroadcast::BroadcastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DealingEngineBroadcast::kBroadcastIdFieldNumber;
const int DealingEngineBroadcast::kTypeFieldNumber;
const int DealingEngineBroadcast::kTimestampFieldNumber;
const int DealingEngineBroadcast::kOrderFieldNumber;
const int DealingEngineBroadcast::kFixEngineDataFieldNumber;
const int DealingEngineBroadcast::kPositionFieldNumber;
const int DealingEngineBroadcast::kSystemParameterFieldNumber;
#endif  // !_MSC_VER

DealingEngineBroadcast::DealingEngineBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealingEngineBroadcast::InitAsDefaultInstance() {
}

DealingEngineBroadcast::DealingEngineBroadcast(const DealingEngineBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealingEngineBroadcast::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealingEngineBroadcast::~DealingEngineBroadcast() {
  SharedDtor();
}

void DealingEngineBroadcast::SharedDtor() {
  if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void DealingEngineBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealingEngineBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealingEngineBroadcast_descriptor_;
}

const DealingEngineBroadcast& DealingEngineBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

DealingEngineBroadcast* DealingEngineBroadcast::default_instance_ = NULL;

DealingEngineBroadcast* DealingEngineBroadcast::New() const {
  return new DealingEngineBroadcast;
}

void DealingEngineBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_broadcast_id()) {
      if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_id_->clear();
      }
    }
    type_ = 1;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  order_.Clear();
  fix_engine_data_.Clear();
  position_.Clear();
  system_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealingEngineBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string broadcast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broadcast_id().data(), this->broadcast_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.DealingEngineBroadcast.BroadcastType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::DealingEngineBroadcast_BroadcastType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::DealingEngineBroadcast_BroadcastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order;
        break;
      }
      
      // repeated .quantmodel.OrderMessage order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order;
        if (input->ExpectTag(42)) goto parse_fix_engine_data;
        break;
      }
      
      // repeated .quantmodel.FixEngineData fix_engine_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_engine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_engine_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fix_engine_data;
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }
      
      // repeated .quantmodel.PositionOvernightData position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_position;
        if (input->ExpectTag(58)) goto parse_system_parameter;
        break;
      }
      
      // repeated .quantmodel.SystemParameterData system_parameter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_system_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_system_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealingEngineBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->broadcast_id(), output);
  }
  
  // optional .quantmodel.DealingEngineBroadcast.BroadcastType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // repeated .quantmodel.OrderMessage order = 4;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->order(i), output);
  }
  
  // repeated .quantmodel.FixEngineData fix_engine_data = 5;
  for (int i = 0; i < this->fix_engine_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fix_engine_data(i), output);
  }
  
  // repeated .quantmodel.PositionOvernightData position = 6;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position(i), output);
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 7;
  for (int i = 0; i < this->system_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->system_parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealingEngineBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broadcast_id(), target);
  }
  
  // optional .quantmodel.DealingEngineBroadcast.BroadcastType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // repeated .quantmodel.OrderMessage order = 4;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->order(i), target);
  }
  
  // repeated .quantmodel.FixEngineData fix_engine_data = 5;
  for (int i = 0; i < this->fix_engine_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fix_engine_data(i), target);
  }
  
  // repeated .quantmodel.PositionOvernightData position = 6;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->position(i), target);
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 7;
  for (int i = 0; i < this->system_parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->system_parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealingEngineBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast_id());
    }
    
    // optional .quantmodel.DealingEngineBroadcast.BroadcastType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .quantmodel.OrderMessage order = 4;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }
  
  // repeated .quantmodel.FixEngineData fix_engine_data = 5;
  total_size += 1 * this->fix_engine_data_size();
  for (int i = 0; i < this->fix_engine_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_engine_data(i));
  }
  
  // repeated .quantmodel.PositionOvernightData position = 6;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }
  
  // repeated .quantmodel.SystemParameterData system_parameter = 7;
  total_size += 1 * this->system_parameter_size();
  for (int i = 0; i < this->system_parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->system_parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealingEngineBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealingEngineBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealingEngineBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealingEngineBroadcast::MergeFrom(const DealingEngineBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_.MergeFrom(from.order_);
  fix_engine_data_.MergeFrom(from.fix_engine_data_);
  position_.MergeFrom(from.position_);
  system_parameter_.MergeFrom(from.system_parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealingEngineBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealingEngineBroadcast::CopyFrom(const DealingEngineBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealingEngineBroadcast::IsInitialized() const {
  
  return true;
}

void DealingEngineBroadcast::Swap(DealingEngineBroadcast* other) {
  if (other != this) {
    std::swap(broadcast_id_, other->broadcast_id_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    order_.Swap(&other->order_);
    fix_engine_data_.Swap(&other->fix_engine_data_);
    position_.Swap(&other->position_);
    system_parameter_.Swap(&other->system_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealingEngineBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealingEngineBroadcast_descriptor_;
  metadata.reflection = DealingEngineBroadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FixEngineRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineRequest_RequestType_descriptor_;
}
bool FixEngineRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FixEngineRequest_RequestType FixEngineRequest::CREATE_RELEASE;
const FixEngineRequest_RequestType FixEngineRequest::CANCEL_RELEASE;
const FixEngineRequest_RequestType FixEngineRequest::REPLACE_RELEASE;
const FixEngineRequest_RequestType FixEngineRequest::DEFINE_SECURITY;
const FixEngineRequest_RequestType FixEngineRequest::MARKETDATA_SUBSCRIBE;
const FixEngineRequest_RequestType FixEngineRequest::FIXENGINE_LOGOUT;
const FixEngineRequest_RequestType FixEngineRequest::FIXENGINE_LOGIN;
const FixEngineRequest_RequestType FixEngineRequest::SEQUENCE_RESET;
const FixEngineRequest_RequestType FixEngineRequest::RESEND_REQUEST;
const FixEngineRequest_RequestType FixEngineRequest::TEST_REQUEST;
const FixEngineRequest_RequestType FixEngineRequest::SHUTDOWN;
const FixEngineRequest_RequestType FixEngineRequest::RequestType_MIN;
const FixEngineRequest_RequestType FixEngineRequest::RequestType_MAX;
const int FixEngineRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FixEngineRequest::kRequestIdFieldNumber;
const int FixEngineRequest::kTimestampFieldNumber;
const int FixEngineRequest::kTypeFieldNumber;
const int FixEngineRequest::kSessionIdFieldNumber;
const int FixEngineRequest::kReleaseDataFieldNumber;
const int FixEngineRequest::kInstrumentDataFieldNumber;
const int FixEngineRequest::kAccountDataFieldNumber;
#endif  // !_MSC_VER

FixEngineRequest::FixEngineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixEngineRequest::InitAsDefaultInstance() {
  release_data_ = const_cast< ::quantmodel::ReleaseData*>(&::quantmodel::ReleaseData::default_instance());
  instrument_data_ = const_cast< ::quantmodel::InstrumentData*>(&::quantmodel::InstrumentData::default_instance());
  account_data_ = const_cast< ::quantmodel::AccountData*>(&::quantmodel::AccountData::default_instance());
}

FixEngineRequest::FixEngineRequest(const FixEngineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixEngineRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_data_ = NULL;
  instrument_data_ = NULL;
  account_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixEngineRequest::~FixEngineRequest() {
  SharedDtor();
}

void FixEngineRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
    delete release_data_;
    delete instrument_data_;
    delete account_data_;
  }
}

void FixEngineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixEngineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineRequest_descriptor_;
}

const FixEngineRequest& FixEngineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FixEngineRequest* FixEngineRequest::default_instance_ = NULL;

FixEngineRequest* FixEngineRequest::New() const {
  return new FixEngineRequest;
}

void FixEngineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_release_data()) {
      if (release_data_ != NULL) release_data_->::quantmodel::ReleaseData::Clear();
    }
    if (has_instrument_data()) {
      if (instrument_data_ != NULL) instrument_data_->::quantmodel::InstrumentData::Clear();
    }
    if (has_account_data()) {
      if (account_data_ != NULL) account_data_->::quantmodel::AccountData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixEngineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.FixEngineRequest.RequestType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::FixEngineRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::FixEngineRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_release_data;
        break;
      }
      
      // optional .quantmodel.ReleaseData release_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrument_data;
        break;
      }
      
      // optional .quantmodel.InstrumentData instrument_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_account_data;
        break;
      }
      
      // optional .quantmodel.AccountData account_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixEngineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .quantmodel.FixEngineRequest.RequestType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session_id(), output);
  }
  
  // optional .quantmodel.ReleaseData release_data = 5;
  if (has_release_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->release_data(), output);
  }
  
  // optional .quantmodel.InstrumentData instrument_data = 6;
  if (has_instrument_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->instrument_data(), output);
  }
  
  // optional .quantmodel.AccountData account_data = 7;
  if (has_account_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->account_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixEngineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .quantmodel.FixEngineRequest.RequestType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }
  
  // optional .quantmodel.ReleaseData release_data = 5;
  if (has_release_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->release_data(), target);
  }
  
  // optional .quantmodel.InstrumentData instrument_data = 6;
  if (has_instrument_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->instrument_data(), target);
  }
  
  // optional .quantmodel.AccountData account_data = 7;
  if (has_account_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->account_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixEngineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.FixEngineRequest.RequestType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional .quantmodel.ReleaseData release_data = 5;
    if (has_release_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_data());
    }
    
    // optional .quantmodel.InstrumentData instrument_data = 6;
    if (has_instrument_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_data());
    }
    
    // optional .quantmodel.AccountData account_data = 7;
    if (has_account_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixEngineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixEngineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixEngineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixEngineRequest::MergeFrom(const FixEngineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_release_data()) {
      mutable_release_data()->::quantmodel::ReleaseData::MergeFrom(from.release_data());
    }
    if (from.has_instrument_data()) {
      mutable_instrument_data()->::quantmodel::InstrumentData::MergeFrom(from.instrument_data());
    }
    if (from.has_account_data()) {
      mutable_account_data()->::quantmodel::AccountData::MergeFrom(from.account_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixEngineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixEngineRequest::CopyFrom(const FixEngineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixEngineRequest::IsInitialized() const {
  
  return true;
}

void FixEngineRequest::Swap(FixEngineRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(session_id_, other->session_id_);
    std::swap(release_data_, other->release_data_);
    std::swap(instrument_data_, other->instrument_data_);
    std::swap(account_data_, other->account_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixEngineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixEngineRequest_descriptor_;
  metadata.reflection = FixEngineRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FixEngineResponse_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineResponse_ResponseType_descriptor_;
}
bool FixEngineResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FixEngineResponse_ResponseType FixEngineResponse::ACKNOWLEDGEMENT;
const FixEngineResponse_ResponseType FixEngineResponse::REJECT;
const FixEngineResponse_ResponseType FixEngineResponse::ERROR;
const FixEngineResponse_ResponseType FixEngineResponse::ResponseType_MIN;
const FixEngineResponse_ResponseType FixEngineResponse::ResponseType_MAX;
const int FixEngineResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FixEngineResponse::kResponseIdFieldNumber;
const int FixEngineResponse::kRequestIdFieldNumber;
const int FixEngineResponse::kTimestampFieldNumber;
const int FixEngineResponse::kTypeFieldNumber;
const int FixEngineResponse::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

FixEngineResponse::FixEngineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixEngineResponse::InitAsDefaultInstance() {
}

FixEngineResponse::FixEngineResponse(const FixEngineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixEngineResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixEngineResponse::~FixEngineResponse() {
  SharedDtor();
}

void FixEngineResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void FixEngineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixEngineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEngineResponse_descriptor_;
}

const FixEngineResponse& FixEngineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

FixEngineResponse* FixEngineResponse::default_instance_ = NULL;

FixEngineResponse* FixEngineResponse::New() const {
  return new FixEngineResponse;
}

void FixEngineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixEngineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.FixEngineResponse.ResponseType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::FixEngineResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::FixEngineResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixEngineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .quantmodel.FixEngineResponse.ResponseType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixEngineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .quantmodel.FixEngineResponse.ResponseType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixEngineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.FixEngineResponse.ResponseType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string error_msg = 5;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixEngineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixEngineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixEngineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixEngineResponse::MergeFrom(const FixEngineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixEngineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixEngineResponse::CopyFrom(const FixEngineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixEngineResponse::IsInitialized() const {
  
  return true;
}

void FixEngineResponse::Swap(FixEngineResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixEngineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixEngineResponse_descriptor_;
  metadata.reflection = FixEngineResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientAdapterRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterRequest_RequestType_descriptor_;
}
bool ClientAdapterRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientAdapterRequest_RequestType ClientAdapterRequest::HEARTBEAT;
const ClientAdapterRequest_RequestType ClientAdapterRequest::DATABASE;
const ClientAdapterRequest_RequestType ClientAdapterRequest::DEALING;
const ClientAdapterRequest_RequestType ClientAdapterRequest::SHUTDOWN;
const ClientAdapterRequest_RequestType ClientAdapterRequest::RequestType_MIN;
const ClientAdapterRequest_RequestType ClientAdapterRequest::RequestType_MAX;
const int ClientAdapterRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientAdapterRequest::kRequestIdFieldNumber;
const int ClientAdapterRequest::kSessionIdFieldNumber;
const int ClientAdapterRequest::kTimestampFieldNumber;
const int ClientAdapterRequest::kTypeFieldNumber;
const int ClientAdapterRequest::kDealingRequestFieldNumber;
const int ClientAdapterRequest::kDatabaseRequestFieldNumber;
#endif  // !_MSC_VER

ClientAdapterRequest::ClientAdapterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAdapterRequest::InitAsDefaultInstance() {
  dealing_request_ = const_cast< ::quantmodel::DealingEngineRequest*>(&::quantmodel::DealingEngineRequest::default_instance());
  database_request_ = const_cast< ::quantmodel::DatabaseEngineRequest*>(&::quantmodel::DatabaseEngineRequest::default_instance());
}

ClientAdapterRequest::ClientAdapterRequest(const ClientAdapterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAdapterRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  dealing_request_ = NULL;
  database_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAdapterRequest::~ClientAdapterRequest() {
  SharedDtor();
}

void ClientAdapterRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete dealing_request_;
    delete database_request_;
  }
}

void ClientAdapterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAdapterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterRequest_descriptor_;
}

const ClientAdapterRequest& ClientAdapterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ClientAdapterRequest* ClientAdapterRequest::default_instance_ = NULL;

ClientAdapterRequest* ClientAdapterRequest::New() const {
  return new ClientAdapterRequest;
}

void ClientAdapterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_dealing_request()) {
      if (dealing_request_ != NULL) dealing_request_->::quantmodel::DealingEngineRequest::Clear();
    }
    if (has_database_request()) {
      if (database_request_ != NULL) database_request_->::quantmodel::DatabaseEngineRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAdapterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.ClientAdapterRequest.RequestType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::ClientAdapterRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::ClientAdapterRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dealing_request;
        break;
      }
      
      // optional .quantmodel.DealingEngineRequest dealing_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealing_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealing_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_database_request;
        break;
      }
      
      // optional .quantmodel.DatabaseEngineRequest database_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAdapterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .quantmodel.ClientAdapterRequest.RequestType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional .quantmodel.DealingEngineRequest dealing_request = 5;
  if (has_dealing_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dealing_request(), output);
  }
  
  // optional .quantmodel.DatabaseEngineRequest database_request = 6;
  if (has_database_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->database_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAdapterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .quantmodel.ClientAdapterRequest.RequestType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional .quantmodel.DealingEngineRequest dealing_request = 5;
  if (has_dealing_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dealing_request(), target);
  }
  
  // optional .quantmodel.DatabaseEngineRequest database_request = 6;
  if (has_database_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->database_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAdapterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.ClientAdapterRequest.RequestType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .quantmodel.DealingEngineRequest dealing_request = 5;
    if (has_dealing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealing_request());
    }
    
    // optional .quantmodel.DatabaseEngineRequest database_request = 6;
    if (has_database_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAdapterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAdapterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAdapterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAdapterRequest::MergeFrom(const ClientAdapterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dealing_request()) {
      mutable_dealing_request()->::quantmodel::DealingEngineRequest::MergeFrom(from.dealing_request());
    }
    if (from.has_database_request()) {
      mutable_database_request()->::quantmodel::DatabaseEngineRequest::MergeFrom(from.database_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAdapterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAdapterRequest::CopyFrom(const ClientAdapterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAdapterRequest::IsInitialized() const {
  
  return true;
}

void ClientAdapterRequest::Swap(ClientAdapterRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(dealing_request_, other->dealing_request_);
    std::swap(database_request_, other->database_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAdapterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAdapterRequest_descriptor_;
  metadata.reflection = ClientAdapterRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientAdapterResponse_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterResponse_ResponseType_descriptor_;
}
bool ClientAdapterResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientAdapterResponse_ResponseType ClientAdapterResponse::ACKNOWLEDGEMENT;
const ClientAdapterResponse_ResponseType ClientAdapterResponse::REJECT;
const ClientAdapterResponse_ResponseType ClientAdapterResponse::ERROR;
const ClientAdapterResponse_ResponseType ClientAdapterResponse::ResponseType_MIN;
const ClientAdapterResponse_ResponseType ClientAdapterResponse::ResponseType_MAX;
const int ClientAdapterResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientAdapterResponse::kResponseIdFieldNumber;
const int ClientAdapterResponse::kRequestIdFieldNumber;
const int ClientAdapterResponse::kSessionIdFieldNumber;
const int ClientAdapterResponse::kTimestampFieldNumber;
const int ClientAdapterResponse::kTypeFieldNumber;
const int ClientAdapterResponse::kErrorMsgFieldNumber;
const int ClientAdapterResponse::kDealingResponseFieldNumber;
const int ClientAdapterResponse::kDatabaseResponseFieldNumber;
#endif  // !_MSC_VER

ClientAdapterResponse::ClientAdapterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAdapterResponse::InitAsDefaultInstance() {
  dealing_response_ = const_cast< ::quantmodel::DealingEngineResponse*>(&::quantmodel::DealingEngineResponse::default_instance());
  database_response_ = const_cast< ::quantmodel::DatabaseEngineResponse*>(&::quantmodel::DatabaseEngineResponse::default_instance());
}

ClientAdapterResponse::ClientAdapterResponse(const ClientAdapterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAdapterResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealing_response_ = NULL;
  database_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAdapterResponse::~ClientAdapterResponse() {
  SharedDtor();
}

void ClientAdapterResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
    delete dealing_response_;
    delete database_response_;
  }
}

void ClientAdapterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAdapterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterResponse_descriptor_;
}

const ClientAdapterResponse& ClientAdapterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ClientAdapterResponse* ClientAdapterResponse::default_instance_ = NULL;

ClientAdapterResponse* ClientAdapterResponse::New() const {
  return new ClientAdapterResponse;
}

void ClientAdapterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_dealing_response()) {
      if (dealing_response_ != NULL) dealing_response_->::quantmodel::DealingEngineResponse::Clear();
    }
    if (has_database_response()) {
      if (database_response_ != NULL) database_response_->::quantmodel::DatabaseEngineResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAdapterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.ClientAdapterResponse.ResponseType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::ClientAdapterResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::ClientAdapterResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dealing_response;
        break;
      }
      
      // optional .quantmodel.DealingEngineResponse dealing_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealing_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealing_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_database_response;
        break;
      }
      
      // optional .quantmodel.DatabaseEngineResponse database_response = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAdapterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_id(), output);
  }
  
  // optional string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->timestamp(), output);
  }
  
  // optional .quantmodel.ClientAdapterResponse.ResponseType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }
  
  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error_msg(), output);
  }
  
  // optional .quantmodel.DealingEngineResponse dealing_response = 7;
  if (has_dealing_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dealing_response(), output);
  }
  
  // optional .quantmodel.DatabaseEngineResponse database_response = 8;
  if (has_database_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->database_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAdapterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }
  
  // optional string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }
  
  // optional .quantmodel.ClientAdapterResponse.ResponseType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }
  
  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }
  
  // optional .quantmodel.DealingEngineResponse dealing_response = 7;
  if (has_dealing_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dealing_response(), target);
  }
  
  // optional .quantmodel.DatabaseEngineResponse database_response = 8;
  if (has_database_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->database_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAdapterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.ClientAdapterResponse.ResponseType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string error_msg = 6;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
    // optional .quantmodel.DealingEngineResponse dealing_response = 7;
    if (has_dealing_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealing_response());
    }
    
    // optional .quantmodel.DatabaseEngineResponse database_response = 8;
    if (has_database_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAdapterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAdapterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAdapterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAdapterResponse::MergeFrom(const ClientAdapterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_dealing_response()) {
      mutable_dealing_response()->::quantmodel::DealingEngineResponse::MergeFrom(from.dealing_response());
    }
    if (from.has_database_response()) {
      mutable_database_response()->::quantmodel::DatabaseEngineResponse::MergeFrom(from.database_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAdapterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAdapterResponse::CopyFrom(const ClientAdapterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAdapterResponse::IsInitialized() const {
  
  return true;
}

void ClientAdapterResponse::Swap(ClientAdapterResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(dealing_response_, other->dealing_response_);
    std::swap(database_response_, other->database_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAdapterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAdapterResponse_descriptor_;
  metadata.reflection = ClientAdapterResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientAdapterBroadcast_BroadcastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterBroadcast_BroadcastType_descriptor_;
}
bool ClientAdapterBroadcast_BroadcastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::HEARTBEAT;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::DATABASE;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::DEALING;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::MARKETDATA;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::SHUTDOWN;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::BroadcastType_MIN;
const ClientAdapterBroadcast_BroadcastType ClientAdapterBroadcast::BroadcastType_MAX;
const int ClientAdapterBroadcast::BroadcastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientAdapterBroadcast::kBroadcastIdFieldNumber;
const int ClientAdapterBroadcast::kTimestampFieldNumber;
const int ClientAdapterBroadcast::kTypeFieldNumber;
const int ClientAdapterBroadcast::kDealingBroadcastFieldNumber;
const int ClientAdapterBroadcast::kMarketdataBroadcastFieldNumber;
const int ClientAdapterBroadcast::kHeartbeatDataFieldNumber;
#endif  // !_MSC_VER

ClientAdapterBroadcast::ClientAdapterBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAdapterBroadcast::InitAsDefaultInstance() {
  dealing_broadcast_ = const_cast< ::quantmodel::DealingEngineBroadcast*>(&::quantmodel::DealingEngineBroadcast::default_instance());
  marketdata_broadcast_ = const_cast< ::quantmodel::MarketDataBroadcast*>(&::quantmodel::MarketDataBroadcast::default_instance());
  heartbeat_data_ = const_cast< ::quantmodel::HeartbeatData*>(&::quantmodel::HeartbeatData::default_instance());
}

ClientAdapterBroadcast::ClientAdapterBroadcast(const ClientAdapterBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAdapterBroadcast::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  dealing_broadcast_ = NULL;
  marketdata_broadcast_ = NULL;
  heartbeat_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAdapterBroadcast::~ClientAdapterBroadcast() {
  SharedDtor();
}

void ClientAdapterBroadcast::SharedDtor() {
  if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete dealing_broadcast_;
    delete marketdata_broadcast_;
    delete heartbeat_data_;
  }
}

void ClientAdapterBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAdapterBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAdapterBroadcast_descriptor_;
}

const ClientAdapterBroadcast& ClientAdapterBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

ClientAdapterBroadcast* ClientAdapterBroadcast::default_instance_ = NULL;

ClientAdapterBroadcast* ClientAdapterBroadcast::New() const {
  return new ClientAdapterBroadcast;
}

void ClientAdapterBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_broadcast_id()) {
      if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_dealing_broadcast()) {
      if (dealing_broadcast_ != NULL) dealing_broadcast_->::quantmodel::DealingEngineBroadcast::Clear();
    }
    if (has_marketdata_broadcast()) {
      if (marketdata_broadcast_ != NULL) marketdata_broadcast_->::quantmodel::MarketDataBroadcast::Clear();
    }
    if (has_heartbeat_data()) {
      if (heartbeat_data_ != NULL) heartbeat_data_->::quantmodel::HeartbeatData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAdapterBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string broadcast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broadcast_id().data(), this->broadcast_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.ClientAdapterBroadcast.BroadcastType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::ClientAdapterBroadcast_BroadcastType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::ClientAdapterBroadcast_BroadcastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dealing_broadcast;
        break;
      }
      
      // optional .quantmodel.DealingEngineBroadcast dealing_broadcast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealing_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealing_broadcast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_marketdata_broadcast;
        break;
      }
      
      // optional .quantmodel.MarketDataBroadcast marketdata_broadcast = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marketdata_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marketdata_broadcast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heartbeat_data;
        break;
      }
      
      // optional .quantmodel.HeartbeatData heartbeat_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heartbeat_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAdapterBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->broadcast_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .quantmodel.ClientAdapterBroadcast.BroadcastType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional .quantmodel.DealingEngineBroadcast dealing_broadcast = 4;
  if (has_dealing_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dealing_broadcast(), output);
  }
  
  // optional .quantmodel.MarketDataBroadcast marketdata_broadcast = 5;
  if (has_marketdata_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->marketdata_broadcast(), output);
  }
  
  // optional .quantmodel.HeartbeatData heartbeat_data = 6;
  if (has_heartbeat_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heartbeat_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAdapterBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broadcast_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .quantmodel.ClientAdapterBroadcast.BroadcastType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional .quantmodel.DealingEngineBroadcast dealing_broadcast = 4;
  if (has_dealing_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dealing_broadcast(), target);
  }
  
  // optional .quantmodel.MarketDataBroadcast marketdata_broadcast = 5;
  if (has_marketdata_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->marketdata_broadcast(), target);
  }
  
  // optional .quantmodel.HeartbeatData heartbeat_data = 6;
  if (has_heartbeat_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heartbeat_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAdapterBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.ClientAdapterBroadcast.BroadcastType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .quantmodel.DealingEngineBroadcast dealing_broadcast = 4;
    if (has_dealing_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealing_broadcast());
    }
    
    // optional .quantmodel.MarketDataBroadcast marketdata_broadcast = 5;
    if (has_marketdata_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marketdata_broadcast());
    }
    
    // optional .quantmodel.HeartbeatData heartbeat_data = 6;
    if (has_heartbeat_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAdapterBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAdapterBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAdapterBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAdapterBroadcast::MergeFrom(const ClientAdapterBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dealing_broadcast()) {
      mutable_dealing_broadcast()->::quantmodel::DealingEngineBroadcast::MergeFrom(from.dealing_broadcast());
    }
    if (from.has_marketdata_broadcast()) {
      mutable_marketdata_broadcast()->::quantmodel::MarketDataBroadcast::MergeFrom(from.marketdata_broadcast());
    }
    if (from.has_heartbeat_data()) {
      mutable_heartbeat_data()->::quantmodel::HeartbeatData::MergeFrom(from.heartbeat_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAdapterBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAdapterBroadcast::CopyFrom(const ClientAdapterBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAdapterBroadcast::IsInitialized() const {
  
  return true;
}

void ClientAdapterBroadcast::Swap(ClientAdapterBroadcast* other) {
  if (other != this) {
    std::swap(broadcast_id_, other->broadcast_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(dealing_broadcast_, other->dealing_broadcast_);
    std::swap(marketdata_broadcast_, other->marketdata_broadcast_);
    std::swap(heartbeat_data_, other->heartbeat_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAdapterBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAdapterBroadcast_descriptor_;
  metadata.reflection = ClientAdapterBroadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemRequest_RequestType_descriptor_;
}
bool InvestmentSystemRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemRequest_RequestType InvestmentSystemRequest::HEARTBEAT;
const InvestmentSystemRequest_RequestType InvestmentSystemRequest::COMMAND;
const InvestmentSystemRequest_RequestType InvestmentSystemRequest::RequestType_MIN;
const InvestmentSystemRequest_RequestType InvestmentSystemRequest::RequestType_MAX;
const int InvestmentSystemRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemRequest::kRequestIdFieldNumber;
const int InvestmentSystemRequest::kSessionIdFieldNumber;
const int InvestmentSystemRequest::kTimestampFieldNumber;
const int InvestmentSystemRequest::kTypeFieldNumber;
const int InvestmentSystemRequest::kDelegateFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemRequest::InvestmentSystemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemRequest::InitAsDefaultInstance() {
}

InvestmentSystemRequest::InvestmentSystemRequest(const InvestmentSystemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  delegate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemRequest::~InvestmentSystemRequest() {
  SharedDtor();
}

void InvestmentSystemRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (delegate_ != &::google::protobuf::internal::kEmptyString) {
    delete delegate_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemRequest_descriptor_;
}

const InvestmentSystemRequest& InvestmentSystemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

InvestmentSystemRequest* InvestmentSystemRequest::default_instance_ = NULL;

InvestmentSystemRequest* InvestmentSystemRequest::New() const {
  return new InvestmentSystemRequest;
}

void InvestmentSystemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_delegate()) {
      if (delegate_ != &::google::protobuf::internal::kEmptyString) {
        delegate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.InvestmentSystemRequest.RequestType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::InvestmentSystemRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::InvestmentSystemRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_delegate;
        break;
      }
      
      // optional string delegate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delegate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delegate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delegate().data(), this->delegate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .quantmodel.InvestmentSystemRequest.RequestType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string delegate = 5;
  if (has_delegate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delegate().data(), this->delegate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->delegate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .quantmodel.InvestmentSystemRequest.RequestType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string delegate = 5;
  if (has_delegate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delegate().data(), this->delegate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->delegate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.InvestmentSystemRequest.RequestType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string delegate = 5;
    if (has_delegate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delegate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemRequest::MergeFrom(const InvestmentSystemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delegate()) {
      set_delegate(from.delegate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemRequest::CopyFrom(const InvestmentSystemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemRequest::IsInitialized() const {
  
  return true;
}

void InvestmentSystemRequest::Swap(InvestmentSystemRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(delegate_, other->delegate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemRequest_descriptor_;
  metadata.reflection = InvestmentSystemRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemResponse_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemResponse_ResponseType_descriptor_;
}
bool InvestmentSystemResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemResponse_ResponseType InvestmentSystemResponse::ACKNOWLEDGEMENT;
const InvestmentSystemResponse_ResponseType InvestmentSystemResponse::REJECT;
const InvestmentSystemResponse_ResponseType InvestmentSystemResponse::ERROR;
const InvestmentSystemResponse_ResponseType InvestmentSystemResponse::ResponseType_MIN;
const InvestmentSystemResponse_ResponseType InvestmentSystemResponse::ResponseType_MAX;
const int InvestmentSystemResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemResponse::kResponseIdFieldNumber;
const int InvestmentSystemResponse::kRequestIdFieldNumber;
const int InvestmentSystemResponse::kTimestampFieldNumber;
const int InvestmentSystemResponse::kTypeFieldNumber;
const int InvestmentSystemResponse::kErrorMsgFieldNumber;
const int InvestmentSystemResponse::kSessionIdFieldNumber;
const int InvestmentSystemResponse::kDelegateFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemResponse::InvestmentSystemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemResponse::InitAsDefaultInstance() {
}

InvestmentSystemResponse::InvestmentSystemResponse(const InvestmentSystemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemResponse::SharedCtor() {
  _cached_size_ = 0;
  response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delegate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemResponse::~InvestmentSystemResponse() {
  SharedDtor();
}

void InvestmentSystemResponse::SharedDtor() {
  if (response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete response_id_;
  }
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (delegate_ != &::google::protobuf::internal::kEmptyString) {
    delete delegate_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemResponse_descriptor_;
}

const InvestmentSystemResponse& InvestmentSystemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

InvestmentSystemResponse* InvestmentSystemResponse::default_instance_ = NULL;

InvestmentSystemResponse* InvestmentSystemResponse::New() const {
  return new InvestmentSystemResponse;
}

void InvestmentSystemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_id()) {
      if (response_id_ != &::google::protobuf::internal::kEmptyString) {
        response_id_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_delegate()) {
      if (delegate_ != &::google::protobuf::internal::kEmptyString) {
        delegate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_id().data(), this->response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_id;
        break;
      }
      
      // optional string request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.InvestmentSystemResponse.ResponseType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::InvestmentSystemResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::InvestmentSystemResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_delegate;
        break;
      }
      
      // optional bytes delegate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delegate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delegate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_id(), output);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_id(), output);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }
  
  // optional .quantmodel.InvestmentSystemResponse.ResponseType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_msg(), output);
  }
  
  // optional string session_id = 6;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->session_id(), output);
  }
  
  // optional bytes delegate = 7;
  if (has_delegate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->delegate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response_id = 1;
  if (has_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_id().data(), this->response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_id(), target);
  }
  
  // optional string request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }
  
  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }
  
  // optional .quantmodel.InvestmentSystemResponse.ResponseType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }
  
  // optional string session_id = 6;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->session_id(), target);
  }
  
  // optional bytes delegate = 7;
  if (has_delegate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->delegate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response_id = 1;
    if (has_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_id());
    }
    
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }
    
    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.InvestmentSystemResponse.ResponseType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string error_msg = 5;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
    // optional string session_id = 6;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional bytes delegate = 7;
    if (has_delegate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->delegate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemResponse::MergeFrom(const InvestmentSystemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_id()) {
      set_response_id(from.response_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_delegate()) {
      set_delegate(from.delegate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemResponse::CopyFrom(const InvestmentSystemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemResponse::IsInitialized() const {
  
  return true;
}

void InvestmentSystemResponse::Swap(InvestmentSystemResponse* other) {
  if (other != this) {
    std::swap(response_id_, other->response_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(session_id_, other->session_id_);
    std::swap(delegate_, other->delegate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemResponse_descriptor_;
  metadata.reflection = InvestmentSystemResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InvestmentSystemBroadcast_BroadcastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemBroadcast_BroadcastType_descriptor_;
}
bool InvestmentSystemBroadcast_BroadcastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::PRICE;
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::TRADE;
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::DATA;
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::HEARTBEAT;
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::BroadcastType_MIN;
const InvestmentSystemBroadcast_BroadcastType InvestmentSystemBroadcast::BroadcastType_MAX;
const int InvestmentSystemBroadcast::BroadcastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InvestmentSystemBroadcast::kBroadcastIdFieldNumber;
const int InvestmentSystemBroadcast::kTimestampFieldNumber;
const int InvestmentSystemBroadcast::kTypeFieldNumber;
const int InvestmentSystemBroadcast::kDelegateFieldNumber;
#endif  // !_MSC_VER

InvestmentSystemBroadcast::InvestmentSystemBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestmentSystemBroadcast::InitAsDefaultInstance() {
}

InvestmentSystemBroadcast::InvestmentSystemBroadcast(const InvestmentSystemBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestmentSystemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  delegate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestmentSystemBroadcast::~InvestmentSystemBroadcast() {
  SharedDtor();
}

void InvestmentSystemBroadcast::SharedDtor() {
  if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_id_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (delegate_ != &::google::protobuf::internal::kEmptyString) {
    delete delegate_;
  }
  if (this != default_instance_) {
  }
}

void InvestmentSystemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestmentSystemBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestmentSystemBroadcast_descriptor_;
}

const InvestmentSystemBroadcast& InvestmentSystemBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantmodel_2eproto();  return *default_instance_;
}

InvestmentSystemBroadcast* InvestmentSystemBroadcast::default_instance_ = NULL;

InvestmentSystemBroadcast* InvestmentSystemBroadcast::New() const {
  return new InvestmentSystemBroadcast;
}

void InvestmentSystemBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_broadcast_id()) {
      if (broadcast_id_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_id_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    type_ = 1;
    if (has_delegate()) {
      if (delegate_ != &::google::protobuf::internal::kEmptyString) {
        delegate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestmentSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string broadcast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broadcast_id().data(), this->broadcast_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .quantmodel.InvestmentSystemBroadcast.BroadcastType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quantmodel::InvestmentSystemBroadcast_BroadcastType_IsValid(value)) {
            set_type(static_cast< ::quantmodel::InvestmentSystemBroadcast_BroadcastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_delegate;
        break;
      }
      
      // optional bytes delegate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delegate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delegate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestmentSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->broadcast_id(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .quantmodel.InvestmentSystemBroadcast.BroadcastType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional bytes delegate = 4;
  if (has_delegate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->delegate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestmentSystemBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string broadcast_id = 1;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast_id().data(), this->broadcast_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broadcast_id(), target);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .quantmodel.InvestmentSystemBroadcast.BroadcastType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional bytes delegate = 4;
  if (has_delegate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->delegate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestmentSystemBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast_id());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .quantmodel.InvestmentSystemBroadcast.BroadcastType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bytes delegate = 4;
    if (has_delegate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->delegate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestmentSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestmentSystemBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestmentSystemBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestmentSystemBroadcast::MergeFrom(const InvestmentSystemBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delegate()) {
      set_delegate(from.delegate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestmentSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentSystemBroadcast::CopyFrom(const InvestmentSystemBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentSystemBroadcast::IsInitialized() const {
  
  return true;
}

void InvestmentSystemBroadcast::Swap(InvestmentSystemBroadcast* other) {
  if (other != this) {
    std::swap(broadcast_id_, other->broadcast_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(delegate_, other->delegate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestmentSystemBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestmentSystemBroadcast_descriptor_;
  metadata.reflection = InvestmentSystemBroadcast_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quantmodel

// @@protoc_insertion_point(global_scope)
