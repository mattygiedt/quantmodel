// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace quantmodel {
  
  public static partial class Quantmodel {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_quantmodel_FixMarketData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixMarketData, global::quantmodel.FixMarketData.Builder> internal__static_quantmodel_FixMarketData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_CMEMarketData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.CMEMarketData, global::quantmodel.CMEMarketData.Builder> internal__static_quantmodel_CMEMarketData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_FastEngineBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FastEngineBroadcast, global::quantmodel.FastEngineBroadcast.Builder> internal__static_quantmodel_FastEngineBroadcast__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_FixEngineBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineBroadcast, global::quantmodel.FixEngineBroadcast.Builder> internal__static_quantmodel_FixEngineBroadcast__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_MarketDataPriceData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataPriceData, global::quantmodel.MarketDataPriceData.Builder> internal__static_quantmodel_MarketDataPriceData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_MarketDataTradeData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataTradeData, global::quantmodel.MarketDataTradeData.Builder> internal__static_quantmodel_MarketDataTradeData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_MarketDataQuoteData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataQuoteData, global::quantmodel.MarketDataQuoteData.Builder> internal__static_quantmodel_MarketDataQuoteData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_MarketDataBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataBroadcast, global::quantmodel.MarketDataBroadcast.Builder> internal__static_quantmodel_MarketDataBroadcast__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_HeartbeatData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.HeartbeatData, global::quantmodel.HeartbeatData.Builder> internal__static_quantmodel_HeartbeatData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_FixEngineData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineData, global::quantmodel.FixEngineData.Builder> internal__static_quantmodel_FixEngineData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_SystemParameterData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.SystemParameterData, global::quantmodel.SystemParameterData.Builder> internal__static_quantmodel_SystemParameterData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_PositionOvernightData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.PositionOvernightData, global::quantmodel.PositionOvernightData.Builder> internal__static_quantmodel_PositionOvernightData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_AccountLimitData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountLimitData, global::quantmodel.AccountLimitData.Builder> internal__static_quantmodel_AccountLimitData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DraftOrderData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftOrderData, global::quantmodel.DraftOrderData.Builder> internal__static_quantmodel_DraftOrderData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DraftAllocationData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftAllocationData, global::quantmodel.DraftAllocationData.Builder> internal__static_quantmodel_DraftAllocationData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_AccountData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountData, global::quantmodel.AccountData.Builder> internal__static_quantmodel_AccountData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_OrderData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.OrderData, global::quantmodel.OrderData.Builder> internal__static_quantmodel_OrderData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_AllocationData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.AllocationData, global::quantmodel.AllocationData.Builder> internal__static_quantmodel_AllocationData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ReleaseData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ReleaseData, global::quantmodel.ReleaseData.Builder> internal__static_quantmodel_ReleaseData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ExecutionData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ExecutionData, global::quantmodel.ExecutionData.Builder> internal__static_quantmodel_ExecutionData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_InstrumentData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.InstrumentData, global::quantmodel.InstrumentData.Builder> internal__static_quantmodel_InstrumentData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_SignalData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.SignalData, global::quantmodel.SignalData.Builder> internal__static_quantmodel_SignalData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_InvestmentSystemData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemData, global::quantmodel.InvestmentSystemData.Builder> internal__static_quantmodel_InvestmentSystemData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_StrategyData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.StrategyData, global::quantmodel.StrategyData.Builder> internal__static_quantmodel_StrategyData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_AccountStrategyData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountStrategyData, global::quantmodel.AccountStrategyData.Builder> internal__static_quantmodel_AccountStrategyData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ExecutionReportData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ExecutionReportData, global::quantmodel.ExecutionReportData.Builder> internal__static_quantmodel_ExecutionReportData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DraftOrderMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftOrderMessage, global::quantmodel.DraftOrderMessage.Builder> internal__static_quantmodel_DraftOrderMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_OrderMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.OrderMessage, global::quantmodel.OrderMessage.Builder> internal__static_quantmodel_OrderMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineRequest, global::quantmodel.DatabaseEngineRequest.Builder> internal__static_quantmodel_DatabaseEngineRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineRequest_Query__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineRequest.Types.Query, global::quantmodel.DatabaseEngineRequest.Types.Query.Builder> internal__static_quantmodel_DatabaseEngineRequest_Query__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse, global::quantmodel.DatabaseEngineResponse.Builder> internal__static_quantmodel_DatabaseEngineResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineResponse_ResultSet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Builder> internal__static_quantmodel_DatabaseEngineResponse_ResultSet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Builder> internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Builder> internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DealingEngineRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineRequest, global::quantmodel.DealingEngineRequest.Builder> internal__static_quantmodel_DealingEngineRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DealingEngineResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineResponse, global::quantmodel.DealingEngineResponse.Builder> internal__static_quantmodel_DealingEngineResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_DealingEngineBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineBroadcast, global::quantmodel.DealingEngineBroadcast.Builder> internal__static_quantmodel_DealingEngineBroadcast__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_FixEngineRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineRequest, global::quantmodel.FixEngineRequest.Builder> internal__static_quantmodel_FixEngineRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_FixEngineResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineResponse, global::quantmodel.FixEngineResponse.Builder> internal__static_quantmodel_FixEngineResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ClientAdapterRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterRequest, global::quantmodel.ClientAdapterRequest.Builder> internal__static_quantmodel_ClientAdapterRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ClientAdapterResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterResponse, global::quantmodel.ClientAdapterResponse.Builder> internal__static_quantmodel_ClientAdapterResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_ClientAdapterBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterBroadcast, global::quantmodel.ClientAdapterBroadcast.Builder> internal__static_quantmodel_ClientAdapterBroadcast__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_InvestmentSystemRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemRequest, global::quantmodel.InvestmentSystemRequest.Builder> internal__static_quantmodel_InvestmentSystemRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_InvestmentSystemResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemResponse, global::quantmodel.InvestmentSystemResponse.Builder> internal__static_quantmodel_InvestmentSystemResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_quantmodel_InvestmentSystemBroadcast__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemBroadcast, global::quantmodel.InvestmentSystemBroadcast.Builder> internal__static_quantmodel_InvestmentSystemBroadcast__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Quantmodel() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBxdWFudG1vZGVsLnByb3RvEgpxdWFudG1vZGVsIu0BCg1GaXhNYXJrZXRE" + 
          "YXRhEhUKDWluc3RydW1lbnRfaWQYASABKAkSEgoKc2VuZGluZ190bRgCIAEo" + 
          "CRI3CgplbnRyeV90eXBlGAMgASgOMiMucXVhbnRtb2RlbC5GaXhNYXJrZXRE" + 
          "YXRhLkVudHJ5VHlwZRIVCg11cGRhdGVfYWN0aW9uGAQgASgJEhMKCGVudHJ5" + 
          "X3B4GAUgASgJOgEwEhUKCmVudHJ5X3NpemUYBiABKAk6ATAiNQoJRW50cnlU" + 
          "eXBlEgcKA0JJRBABEgcKA0FTSxACEgkKBVRSQURFEAMSCwoHVU5LTk9XThAE" + 
          "Iq4GCg1DTUVNYXJrZXREYXRhEhIKCnNlbmRpbmdfdG0YASACKAQSEwoLc2Vj" + 
          "dXJpdHlfaWQYAiACKA0SPQoNdXBkYXRlX2FjdGlvbhgDIAIoDjImLnF1YW50" + 
          "bW9kZWwuQ01FTWFya2V0RGF0YS5VcGRhdGVBY3Rpb24SNwoKZW50cnlfdHlw" + 
          "ZRgEIAIoDjIjLnF1YW50bW9kZWwuQ01FTWFya2V0RGF0YS5FbnRyeVR5cGUS" + 
          "EgoKaXNfaW1wbGllZBgFIAIoCBIVCgplbnRyeV9zaXplGAYgASgFOgEwEhUK" + 
          "CGVudHJ5X3B4GAcgASgJOgMwLjASEQoGb3JkZXJzGAggASgNOgEwEhYKC3By" + 
          "aWNlX2xldmVsGAkgASgNOgEwEhMKCGVudHJ5X3RtGAogASgNOgEwEkMKCWFn" + 
          "Z3Jlc3NvchgLIAEoDjInLnF1YW50bW9kZWwuQ01FTWFya2V0RGF0YS5BZ2dy" + 
          "ZXNzb3JUeXBlOgdVTktOT1dOIsUCCglFbnRyeVR5cGUSBwoDQklEEAASBwoD" + 
          "QVNLEAESCQoFVFJBREUQAhIRCg1PUEVOSU5HX1BSSUNFEAQSFAoQU0VUVExF" + 
          "TUVOVF9QUklDRRAGEh4KGlRSQURJTkdfU0VTU0lPTl9ISUdIX1BSSUNFEAcS" + 
          "HQoZVFJBRElOR19TRVNTSU9OX0xPV19QUklDRRAIEhAKDFRSQURFX1ZPTFVN" + 
          "RRAJEhEKDU9QRU5fSU5URVJFU1QQChISCg5TSU1VTEFURURfU0VMTBALEhEK" + 
          "DVNJTVVMQVRFRF9CVVkQDBIOCgpFTVBUWV9CT09LEA0SCQoFUFJJT1IQDhIU" + 
          "ChBTRVNTSU9OX0hJR0hfQklEEA8SFQoRU0VTU0lPTl9MT1dfT0ZGRVIQEBIQ" + 
          "CgxGSVhJTkdfUFJJQ0UQERINCglDQVNIX05PVEUQEiI8CgxVcGRhdGVBY3Rp" + 
          "b24SBwoDQUREEAASCgoGQ0hBTkdFEAESCgoGREVMRVRFEAISCwoHT1ZFUkxB" + 
          "WRAFIi8KDUFnZ3Jlc3NvclR5cGUSCwoHVU5LTk9XThAAEgcKA0JVWRABEggK" + 
          "BFNFTEwQAiLQAQoTRmFzdEVuZ2luZUJyb2FkY2FzdBIRCgl0aW1lc3RhbXAY" + 
          "ASACKAkSRQoOYnJvYWRjYXN0X3R5cGUYAiACKA4yLS5xdWFudG1vZGVsLkZh" + 
          "c3RFbmdpbmVCcm9hZGNhc3QuQnJvYWRjYXN0VHlwZRIyCg9jbWVfbWFya2V0" + 
          "X2RhdGEYAyADKAsyGS5xdWFudG1vZGVsLkNNRU1hcmtldERhdGEiKwoNQnJv" + 
          "YWRjYXN0VHlwZRIHCgNDTUUQARIHCgNJQ0UQAhIICgRDQk9FEAMicgoSRml4" + 
          "RW5naW5lQnJvYWRjYXN0EhEKCXRpbWVzdGFtcBgBIAEoCRIVCg1pbnN0cnVt" + 
          "ZW50X2lkGAIgASgJEjIKD2ZpeF9tYXJrZXRfZGF0YRgDIAMoCzIZLnF1YW50" + 
          "bW9kZWwuRml4TWFya2V0RGF0YSJDChNNYXJrZXREYXRhUHJpY2VEYXRhEhUK" + 
          "DWluc3RydW1lbnRfaWQYASABKAkSFQoIbGFzdF9wcmMYAiABKAk6AzAuMCLo" + 
          "AQoTTWFya2V0RGF0YVRyYWRlRGF0YRIVCg1pbnN0cnVtZW50X2lkGAEgASgJ" + 
          "EkkKCWFnZ3Jlc3NvchgCIAEoDjItLnF1YW50bW9kZWwuTWFya2V0RGF0YVRy" + 
          "YWRlRGF0YS5BZ2dyZXNzb3JUeXBlOgdVTktOT1dOEhYKCXRyYWRlX3ByYxgD" + 
          "IAEoCToDMC4wEhQKCXRyYWRlX3F0eRgEIAEoBToBMBIQCghlbnRyeV90bRgF" + 
          "IAEoDSIvCg1BZ2dyZXNzb3JUeXBlEgsKB1VOS05PV04QABIHCgNCVVkQARII" + 
          "CgRTRUxMEAIixAEKE01hcmtldERhdGFRdW90ZURhdGESFQoNaW5zdHJ1bWVu" + 
          "dF9pZBgBIAEoCRI3CgR0eXBlGAIgASgOMikucXVhbnRtb2RlbC5NYXJrZXRE" + 
          "YXRhUXVvdGVEYXRhLlF1b3RlVHlwZRIWCglxdW90ZV9wcmMYAyABKAk6AzAu" + 
          "MBIUCglxdW90ZV9xdHkYBCABKAU6ATASEAoFbGV2ZWwYBSABKAU6ATAiHQoJ" + 
          "UXVvdGVUeXBlEgcKA0JJRBABEgcKA0FTSxACIswCChNNYXJrZXREYXRhQnJv" + 
          "YWRjYXN0EhQKDGJyb2FkY2FzdF9pZBgBIAEoCRIRCgl0aW1lc3RhbXAYAiAB" + 
          "KAkSOwoEdHlwZRgDIAEoDjItLnF1YW50bW9kZWwuTWFya2V0RGF0YUJyb2Fk" + 
          "Y2FzdC5Ccm9hZGNhc3RUeXBlEjMKCnByaWNlX2RhdGEYBSADKAsyHy5xdWFu" + 
          "dG1vZGVsLk1hcmtldERhdGFQcmljZURhdGESMwoKdHJhZGVfZGF0YRgGIAMo" + 
          "CzIfLnF1YW50bW9kZWwuTWFya2V0RGF0YVRyYWRlRGF0YRIzCgpxdW90ZV9k" + 
          "YXRhGAcgAygLMh8ucXVhbnRtb2RlbC5NYXJrZXREYXRhUXVvdGVEYXRhIjAK" + 
          "DUJyb2FkY2FzdFR5cGUSCQoFUFJJQ0UQARIJCgVUUkFERRACEgkKBVFVT1RF" + 
          "EAMiOAoNSGVhcnRiZWF0RGF0YRIUCgxoZWFydGJlYXRfaWQYASABKAkSEQoJ" + 
          "dGltZXN0YW1wGAIgASgJIjoKDUZpeEVuZ2luZURhdGESFQoNZml4X2VuZ2lu" + 
          "ZV9pZBgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJIloKE1N5c3RlbVBhcmFt" + 
          "ZXRlckRhdGESFAoMcGFyYW1ldGVyX2lkGAEgASgJEhAKCGNhdGVnb3J5GAIg" + 
          "ASgJEgwKBG5hbWUYAyABKAkSDQoFdmFsdWUYBCABKAkijAMKFVBvc2l0aW9u" + 
          "T3Zlcm5pZ2h0RGF0YRIdChVwb3NpdGlvbl9vdmVybmlnaHRfaWQYASABKAkS" + 
          "EgoKYWNjb3VudF9pZBgCIAEoCRIVCg1pbnN0cnVtZW50X2lkGAMgASgJEhwK" + 
          "FGludmVzdG1lbnRfc3lzdGVtX2lkGAQgASgJEkUKDXBvc2l0aW9uX3R5cGUY" + 
          "BSABKA4yLi5xdWFudG1vZGVsLlBvc2l0aW9uT3Zlcm5pZ2h0RGF0YS5Qb3Np" + 
          "dGlvblR5cGUSEwoIb3Blbl9wb3MYBiABKAk6ATASEwoIb3Blbl9wcmMYByAB" + 
          "KAk6ATASEQoJaXNfYWN0aXZlGAggASgJEhYKDmFkZGVkX2RhdGV0aW1lGAkg" + 
          "ASgJEhAKCGFkZGVkX2J5GAogASgJEhgKEHVwZGF0ZWRfZGF0ZXRpbWUYCyAB" + 
          "KAkSEgoKdXBkYXRlZF9ieRgMIAEoCSIvCgxQb3NpdGlvblR5cGUSCgoGQ0xP" + 
          "U0VEEAASCAoETE9ORxABEgkKBVNIT1JUEAIirAIKEEFjY291bnRMaW1pdERh" + 
          "dGESEgoKYWNjb3VudF9pZBgBIAEoCRIOCgZzeW1ib2wYAiABKAkSGQoRc2Vj" + 
          "dXJpdHlfZXhjaGFuZ2UYAyABKAkSEgoKc2Vzc2lvbl9pZBgEIAEoCRIcChFt" + 
          "YXhfb3Blbl9sb25nX3F0eRgFIAEoCToBMBIdChJtYXhfb3Blbl9zaG9ydF9x" + 
          "dHkYBiABKAk6ATASGgoPbWF4X3JlbGVhc2VfcXR5GAcgASgJOgEwEhQKCWlz" + 
          "X2FjdGl2ZRgIIAEoCToBMBIWCg5hZGRlZF9kYXRldGltZRgJIAEoCRIQCghh" + 
          "ZGRlZF9ieRgKIAEoCRIYChB1cGRhdGVkX2RhdGV0aW1lGAsgASgJEhIKCnVw" + 
          "ZGF0ZWRfYnkYDCABKAkimgQKDkRyYWZ0T3JkZXJEYXRhEhkKEWV4dGVybmFs" + 
          "X29yZGVyX2lkGAEgASgJEhwKFGludmVzdG1lbnRfc3lzdGVtX2lkGAIgASgJ" + 
          "EhUKDWluc3RydW1lbnRfaWQYAyABKAkSNgoJc2lkZV9jb2RlGAQgASgOMiMu" + 
          "cXVhbnRtb2RlbC5EcmFmdE9yZGVyRGF0YS5TaWRlQ29kZRIzCgN0aWYYBSAB" + 
          "KA4yJi5xdWFudG1vZGVsLkRyYWZ0T3JkZXJEYXRhLlRpbWVJbkZvcmNlEjgK" + 
          "Cm9yZGVyX3R5cGUYBiABKA4yJC5xdWFudG1vZGVsLkRyYWZ0T3JkZXJEYXRh" + 
          "Lk9yZGVyVHlwZRIUCglvcmRlcl9xdHkYByABKAk6ATASFAoJbGltaXRfcHJj" + 
          "GAggASgJOgEwEhMKCHN0b3BfcHJjGAkgASgJOgEwIh0KCFNpZGVDb2RlEgcK" + 
          "A0JVWRABEggKBFNFTEwQAiJjCglPcmRlclR5cGUSCgoGTUFSS0VUEAESCQoF" + 
          "TElNSVQQAhIICgRTVE9QEAMSDgoKU1RPUF9MSU1JVBAEEhMKD01BUktFVF9P" + 
          "Tl9DTE9TRRAFEhAKDE1BUktFVF9MSU1JVBAGIkwKC1RpbWVJbkZvcmNlEgcK" + 
          "A0RBWRAAEgcKA0dUQxABEgcKA09QRxACEgcKA0lPQxADEgcKA0ZPSxAEEgcK" + 
          "A0dURBAGEgcKA0dJUxAIIkQKE0RyYWZ0QWxsb2NhdGlvbkRhdGESEgoKYWNj" + 
          "b3VudF9pZBgBIAEoCRIZCg5hbGxvY2F0aW9uX3F0eRgCIAEoCToBMCKkBAoL" + 
          "QWNjb3VudERhdGESEgoKYWNjb3VudF9pZBgBIAEoCRIZChFwYXJlbnRfYWNj" + 
          "b3VudF9pZBgCIAEoCRIMCgRuYW1lGAMgASgJEhkKEW1hcmtldF9hY2NvdW50" + 
          "X2lkGAQgASgJEhoKEmN1c3RvZHlfYWNjb3VudF9pZBgFIAEoCRIZChFnaXZl" + 
          "dXBfYWNjb3VudF9pZBgGIAEoCRIWCg5naXZldXBfZmlybV9pZBgHIAEoCRIU" + 
          "Cgxub3Rpb25hbF92YWwYCCABKAkSFQoNcHJvZml0X3RhcmdldBgJIAEoCRIR" + 
          "CglzdG9wX2xvc3MYCiABKAkSFQoNc2lnbmFsX3dlaWdodBgLIAEoCRIVCg1p" + 
          "c19zdXBwcmVzc2VkGAwgASgJEhEKCWlzX2FjdGl2ZRgNIAEoCRIUCgxjb250" + 
          "YWN0X25hbWUYDiABKAkSFQoNY29udGFjdF9lbWFpbBgPIAEoCRIVCg1jb250" + 
          "YWN0X3Bob25lGBAgASgJEhkKEXRyYWRpbmdfZmlybV9uYW1lGBEgASgJEhoK" + 
          "EnRyYWRpbmdfZmlybV9lbWFpbBgSIAEoCRIaChJ0cmFkaW5nX2Zpcm1fcGhv" + 
          "bmUYEyABKAkSFgoOYWRkZWRfZGF0ZXRpbWUYFCABKAkSEAoIYWRkZWRfYnkY" + 
          "FSABKAkSGAoQdXBkYXRlZF9kYXRldGltZRgWIAEoCRISCgp1cGRhdGVkX2J5" + 
          "GBcgASgJIogHCglPcmRlckRhdGESEAoIb3JkZXJfaWQYASABKAkSGQoRZXh0" + 
          "ZXJuYWxfb3JkZXJfaWQYAiABKAkSHAoUaW52ZXN0bWVudF9zeXN0ZW1faWQY" + 
          "AyABKAkSEgoKb3JkZXJfdHlwZRgEIAEoCRIUCgxvcmRlcl9zdGF0dXMYBSAB" + 
          "KAkSFQoNaW5zdHJ1bWVudF9pZBgGIAEoCRIOCgZzeW1ib2wYByABKAkSCwoD" + 
          "dGlmGAggASgJEhEKCXNpZGVfY29kZRgJIAEoCRIQCghiYXNlX2NjeRgKIAEo" + 
          "CRIUCglvcmRlcl9xdHkYCyABKAk6ATASEwoIb3Blbl9xdHkYDCABKAk6ATAS" + 
          "FwoMcmVsZWFzZWRfcXR5GA0gASgJOgEwEhcKDGV4ZWN1dGVkX3F0eRgOIAEo" + 
          "CToBMBIUCglsaW1pdF9wcmMYDyABKAk6ATASEwoIc3RvcF9wcmMYECABKAk6" + 
          "ATASEwoIbWFya19wcmMYESABKAk6ATASFgoLYXZlcmFnZV9wcmMYEiABKAk6" + 
          "ATASFAoJZW50cnlfcHJjGBMgASgJOgEwEhcKDHJlbGVhc2VkX3ZhbBgUIAEo" + 
          "CToBMBIXCgxleGVjdXRlZF92YWwYFSABKAk6ATASFgoOYWRkZWRfZGF0ZXRp" + 
          "bWUYFiABKAkSEAoIYWRkZWRfYnkYFyABKAkSGAoQdXBkYXRlZF9kYXRldGlt" + 
          "ZRgYIAEoCRISCgp1cGRhdGVkX2J5GBkgASgJIh0KCFNpZGVDb2RlEgcKA0JV" + 
          "WRABEggKBFNFTEwQAiJjCglPcmRlclR5cGUSCgoGTUFSS0VUEAESCQoFTElN" + 
          "SVQQAhIICgRTVE9QEAMSDgoKU1RPUF9MSU1JVBAEEhMKD01BUktFVF9PTl9D" + 
          "TE9TRRAFEhAKDE1BUktFVF9MSU1JVBAGIoUBCgtPcmRlclN0YXR1cxIOCgpT" + 
          "VVBQUkVTU0VEEAASBwoDTkVXEAESEwoPUEVORElOR19SRUxFQVNFEAISDAoI" + 
          "UkVMRUFTRUQQAxIUChBQQVJUSUFMTFlfRklMTEVEEAQSCgoGRklMTEVEEAUS" + 
          "DAoIQ0FOQ0VMRUQQBhIKCgZDTE9TRUQQByJMCgtUaW1lSW5Gb3JjZRIHCgNE" + 
          "QVkQABIHCgNHVEMQARIHCgNPUEcQAhIHCgNJT0MQAxIHCgNGT0sQBBIHCgNH" + 
          "VEQQBhIHCgNHSVMQCCLNAgoOQWxsb2NhdGlvbkRhdGESFQoNYWxsb2NhdGlv" + 
          "bl9pZBgBIAEoCRIQCghvcmRlcl9pZBgCIAEoCRISCgphY2NvdW50X2lkGAMg" + 
          "ASgJEhUKDWluc3RydW1lbnRfaWQYBCABKAkSEQoJc2lkZV9jb2RlGAUgASgJ" + 
          "EhkKDmFsbG9jYXRpb25fcXR5GAYgASgJOgEwEhcKDHJlbGVhc2VkX3F0eRgH" + 
          "IAEoCToBMBIXCgxleGVjdXRlZF9xdHkYCCABKAk6ATASFwoMZXhlY3V0ZWRf" + 
          "dmFsGAkgASgJOgEwEhYKC2F2ZXJhZ2VfcHJjGAogASgJOgEwEhYKDmFkZGVk" + 
          "X2RhdGV0aW1lGAsgASgJEhAKCGFkZGVkX2J5GAwgASgJEhgKEHVwZGF0ZWRf" + 
          "ZGF0ZXRpbWUYDSABKAkSEgoKdXBkYXRlZF9ieRgOIAEoCSKvBAoLUmVsZWFz" + 
          "ZURhdGESEgoKcmVsZWFzZV9pZBgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJ" + 
          "EhIKCmFjY291bnRfaWQYAyABKAkSEAoIb3JkZXJfaWQYBCABKAkSFQoNYWxs" + 
          "b2NhdGlvbl9pZBgFIAEoCRIcChRpbnZlc3RtZW50X3N5c3RlbV9pZBgGIAEo" + 
          "CRIVCg1pbnN0cnVtZW50X2lkGAcgASgJEhsKE2NvbXBsaWFuY2VfYXVkaXRf" + 
          "aWQYCCABKAkSFwoPY2xpZW50X29yZGVyX2lkGAkgASgJEh0KFWNvdW50ZXJw" + 
          "YXJ0eV9vcmRlcl9pZBgKIAEoCRIWCg5yZWxlYXNlX3N0YXR1cxgLIAEoCRIU" + 
          "CgxyZWxlYXNlX3R5cGUYDCABKAkSCwoDdGlmGA0gASgJEhEKCXNpZGVfY29k" + 
          "ZRgOIAEoCRIWCgtyZWxlYXNlX3F0eRgPIAEoCToBMBIUCglsaW1pdF9wcmMY" + 
          "ECABKAk6ATASEwoIc3RvcF9wcmMYESABKAk6ATASFgoLYXZlcmFnZV9wcmMY" + 
          "EiABKAk6ATASFwoMZXhlY3V0ZWRfdmFsGBMgASgJOgEwEhcKDGV4ZWN1dGVk" + 
          "X3F0eRgUIAEoCToBMBIWCg5hZGRlZF9kYXRldGltZRgVIAEoCRIQCghhZGRl" + 
          "ZF9ieRgWIAEoCRIYChB1cGRhdGVkX2RhdGV0aW1lGBcgASgJEhIKCnVwZGF0" + 
          "ZWRfYnkYGCABKAkikgQKDUV4ZWN1dGlvbkRhdGESFAoMZXhlY3V0aW9uX2lk" + 
          "GAEgASgJEhIKCnNlc3Npb25faWQYAiABKAkSEgoKYWNjb3VudF9pZBgDIAEo" + 
          "CRIQCghvcmRlcl9pZBgEIAEoCRISCgpyZWxlYXNlX2lkGAUgASgJEhwKFGlu" + 
          "dmVzdG1lbnRfc3lzdGVtX2lkGAYgASgJEhUKDWluc3RydW1lbnRfaWQYByAB" + 
          "KAkSFwoPY2xpZW50X29yZGVyX2lkGAggASgJEiEKGWNvdW50ZXJwYXJ0eV9l" + 
          "eGVjdXRpb25faWQYCSABKAkSEQoJc2lkZV9jb2RlGAogASgJEhUKDWV4ZWN1" + 
          "dGlvbl9jY3kYCyABKAkSGAoQZXhlY3V0aW9uX3N0YXR1cxgMIAEoCRIYCg1l" + 
          "eGVjdXRpb25fcHJjGA0gASgJOgEwEhgKDWV4ZWN1dGlvbl9xdHkYDiABKAk6" + 
          "ATASGAoNZXhlY3V0aW9uX3ZhbBgPIAEoCToBMBIVCgpsZWF2ZXNfcXR5GBAg" + 
          "ASgJOgEwEhYKC2F2ZXJhZ2VfcHJjGBEgASgJOgEwEhMKCGxlZ190eXBlGBIg" + 
          "ASgJOgExEhYKDmFkZGVkX2RhdGV0aW1lGBMgASgJEhAKCGFkZGVkX2J5GBQg" + 
          "ASgJEhgKEHVwZGF0ZWRfZGF0ZXRpbWUYFSABKAkSEgoKdXBkYXRlZF9ieRgW" + 
          "IAEoCSKwBAoOSW5zdHJ1bWVudERhdGESFQoNaW5zdHJ1bWVudF9pZBgBIAEo" + 
          "CRIXCg9pbnN0cnVtZW50X3R5cGUYAiABKAkSDAoEbmFtZRgDIAEoCRIOCgZz" + 
          "eW1ib2wYBCABKAkSDQoFY3VzaXAYBSABKAkSDQoFc2Vkb2wYBiABKAkSDAoE" + 
          "aXNpbhgHIAEoCRILCgNyaWMYCCABKAkSEAoIY2ZpX2NvZGUYCSABKAkSEwoL" + 
          "c2VjdXJpdHlfaWQYCiABKAkSFQoNc2VjdXJpdHlfdHlwZRgLIAEoCRIVCg1z" + 
          "ZWN1cml0eV9kZXNjGAwgASgJEhkKEXNlY3VyaXR5X2V4Y2hhbmdlGA0gASgJ" + 
          "EhsKE21hdHVyaXR5X21vbnRoX3llYXIYDiABKAkSEAoIYmFzZV9jY3kYDyAB" + 
          "KAkSEwoIbGFzdF9wcmMYECABKAk6ATASEwoIbWFya19wcmMYESABKAk6ATAS" + 
          "FQoNbWFya19kYXRldGltZRgSIAEoCRISCgptdWx0aXBsaWVyGBMgASgJEh0K" + 
          "FWV4Y2hhbmdlX3ByaWNlX2ZhY3RvchgUIAEoCRIZChFyb2xsb3Zlcl9kYXRl" + 
          "dGltZRgVIAEoCRIRCglpc19hY3RpdmUYFiABKAkSFgoOYWRkZWRfZGF0ZXRp" + 
          "bWUYFyABKAkSEAoIYWRkZWRfYnkYGCABKAkSGAoQdXBkYXRlZF9kYXRldGlt" + 
          "ZRgZIAEoCRISCgp1cGRhdGVkX2J5GBogASgJItUBCgpTaWduYWxEYXRhEhkK" + 
          "EWV4dGVybmFsX29yZGVyX2lkGAEgASgJEhwKFGludmVzdG1lbnRfc3lzdGVt" + 
          "X2lkGAIgASgJEhEKCXNpZ25hbF9pZBgDIAEoCRIVCg1pbnN0cnVtZW50X2lk" + 
          "GAQgASgJEhEKCXNpZGVfY29kZRgFIAEoCRISCgpzaWduYWxfcXR5GAYgASgJ" + 
          "EhIKCm9yZGVyX3R5cGUYByABKAkSFAoJbGltaXRfcHJjGAggASgJOgEwEhMK" + 
          "CHN0b3BfcHJjGAkgASgJOgEwIlUKFEludmVzdG1lbnRTeXN0ZW1EYXRhEhwK" + 
          "FGludmVzdG1lbnRfc3lzdGVtX2lkGAEgASgJEgwKBG5hbWUYAiABKAkSEQoJ" + 
          "aXNfYWN0aXZlGAMgASgJIo0BCgxTdHJhdGVneURhdGESEwoLc3RyYXRlZ3lf" + 
          "aWQYASABKAkSHAoUaW52ZXN0bWVudF9zeXN0ZW1faWQYAiABKAkSEQoJc2ln" + 
          "bmFsX2lkGAMgASgJEgwKBG5hbWUYBCABKAkSFgoOZGVmYXVsdF93ZWlnaHQY" + 
          "BSABKAkSEQoJaXNfYWN0aXZlGAYgASgJImIKE0FjY291bnRTdHJhdGVneURh" + 
          "dGESEgoKYWNjb3VudF9pZBgBIAEoCRITCgtzdHJhdGVneV9pZBgCIAEoCRIO" + 
          "CgZ3ZWlnaHQYAyABKAkSEgoKaXNfZW5hYmxlZBgEIAEoCSL4BAoTRXhlY3V0" + 
          "aW9uUmVwb3J0RGF0YRISCgpyZWxlYXNlX2lkGAEgASgJEhIKCnNlc3Npb25f" + 
          "aWQYAiABKAkSEgoKc2VuZGluZ190bRgDIAEoCRIOCgZFeGVjSUQYBCABKAkS" + 
          "DwoHT3JkZXJJRBgFIAEoCRIPCgdDbE9yZElEGAYgASgJEhMKC09yaWdDbE9y" + 
          "ZElEGAcgASgJEhEKCUV4ZWNSZWZJRBgIIAEoCRIPCgdPcmRUeXBlGAkgASgJ" + 
          "EhAKCEV4ZWNUeXBlGAogASgJEhUKDUV4ZWNUcmFuc1R5cGUYCyABKAkSIAoV" + 
          "TXVsdGlMZWdSZXBvcnRpbmdUeXBlGAwgASgJOgExEhIKClNlY3VyaXR5SUQY" + 
          "DSABKAkSFAoMU2VjdXJpdHlUeXBlGA4gASgJEhAKCElEU291cmNlGA8gASgJ" + 
          "Eg8KB0FjY291bnQYECABKAkSEQoJT3JkU3RhdHVzGBEgASgJEg4KBlN5bWJv" + 
          "bBgSIAEoCRIMCgRTaWRlGBMgASgJEhMKC1RpbWVJbkZvcmNlGBQgASgJEhkK" + 
          "EU1hdHVyaXR5TW9udGhZZWFyGBUgASgJEhQKDFRyYW5zYWN0VGltZRgWIAEo" + 
          "CRIMCgRUZXh0GBcgASgJEhEKBkN1bVF0eRgYIAEoCToBMBITCghPcmRlclF0" + 
          "eRgZIAEoCToBMBIUCglMZWF2ZXNRdHkYGiABKAk6ATASFQoKTGFzdFNoYXJl" + 
          "cxgbIAEoCToBMBIQCgVQcmljZRgcIAEoCToBMBIQCgVBdmdQeBgdIAEoCToB" + 
          "MBIRCgZMYXN0UHgYHiABKAk6ATASEQoGU3RvcFB4GB8gASgJOgEwIokBChFE" + 
          "cmFmdE9yZGVyTWVzc2FnZRI0ChBkcmFmdF9vcmRlcl9kYXRhGAEgASgLMhou" + 
          "cXVhbnRtb2RlbC5EcmFmdE9yZGVyRGF0YRI+ChVkcmFmdF9hbGxvY2F0aW9u" + 
          "X2RhdGEYAiADKAsyHy5xdWFudG1vZGVsLkRyYWZ0QWxsb2NhdGlvbkRhdGEi" + 
          "0AEKDE9yZGVyTWVzc2FnZRIpCgpvcmRlcl9kYXRhGAEgASgLMhUucXVhbnRt" + 
          "b2RlbC5PcmRlckRhdGESMwoPYWxsb2NhdGlvbl9kYXRhGAIgAygLMhoucXVh" + 
          "bnRtb2RlbC5BbGxvY2F0aW9uRGF0YRItCgxyZWxlYXNlX2RhdGEYAyADKAsy" + 
          "Fy5xdWFudG1vZGVsLlJlbGVhc2VEYXRhEjEKDmV4ZWN1dGlvbl9kYXRhGAQg" + 
          "AygLMhkucXVhbnRtb2RlbC5FeGVjdXRpb25EYXRhIoQCChVEYXRhYmFzZUVu" + 
          "Z2luZVJlcXVlc3QSEgoKcmVxdWVzdF9pZBgBIAEoCRIRCgl0aW1lc3RhbXAY" + 
          "AiABKAkSNgoFcXVlcnkYAyADKAsyJy5xdWFudG1vZGVsLkRhdGFiYXNlRW5n" + 
          "aW5lUmVxdWVzdC5RdWVyeRpnCgVRdWVyeRI5CgR0eXBlGAEgASgOMisucXVh" + 
          "bnRtb2RlbC5EYXRhYmFzZUVuZ2luZVJlcXVlc3QuUXVlcnlUeXBlEhAKCHF1" + 
          "ZXJ5X2lkGAIgASgJEhEKCXF1ZXJ5X3N0chgDIAEoCSIjCglRdWVyeVR5cGUS" + 
          "CgoGU0VMRUNUEAESCgoGVVBEQVRFEAIikAMKFkRhdGFiYXNlRW5naW5lUmVz" + 
          "cG9uc2USEwoLcmVzcG9uc2VfaWQYASABKAkSEgoKcmVxdWVzdF9pZBgCIAEo" + 
          "CRIRCgl0aW1lc3RhbXAYAyABKAkSQAoKcmVzdWx0X3NldBgEIAMoCzIsLnF1" + 
          "YW50bW9kZWwuRGF0YWJhc2VFbmdpbmVSZXNwb25zZS5SZXN1bHRTZXQa9wEK" + 
          "CVJlc3VsdFNldBIQCghxdWVyeV9pZBgBIAEoCRI9CgNyb3cYAiADKAsyMC5x" + 
          "dWFudG1vZGVsLkRhdGFiYXNlRW5naW5lUmVzcG9uc2UuUmVzdWx0U2V0LlJv" + 
          "dxqYAQoDUm93Eg4KBnJvd19pZBgBIAEoBRJHCgZjb2x1bW4YAiADKAsyNy5x" + 
          "dWFudG1vZGVsLkRhdGFiYXNlRW5naW5lUmVzcG9uc2UuUmVzdWx0U2V0LlJv" + 
          "dy5Db2x1bW4aOAoGQ29sdW1uEhEKCWNvbHVtbl9pZBgBIAEoBRIMCgRuYW1l" + 
          "GAIgASgJEg0KBXZhbHVlGAMgASgJIq0KChREZWFsaW5nRW5naW5lUmVxdWVz" + 
          "dBISCgpyZXF1ZXN0X2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoCRI6CgR0" + 
          "eXBlGAMgASgOMiwucXVhbnRtb2RlbC5EZWFsaW5nRW5naW5lUmVxdWVzdC5S" + 
          "ZXF1ZXN0VHlwZRIyCgtkcmFmdF9vcmRlchgEIAEoCzIdLnF1YW50bW9kZWwu" + 
          "RHJhZnRPcmRlck1lc3NhZ2USJwoFb3JkZXIYBSABKAsyGC5xdWFudG1vZGVs" + 
          "Lk9yZGVyTWVzc2FnZRI+ChVleGVjdXRpb25fcmVwb3J0X2RhdGEYBiABKAsy" + 
          "Hy5xdWFudG1vZGVsLkV4ZWN1dGlvblJlcG9ydERhdGESMgoPZml4X2VuZ2lu" + 
          "ZV9kYXRhGAcgASgLMhkucXVhbnRtb2RlbC5GaXhFbmdpbmVEYXRhEjMKD2lu" + 
          "c3RydW1lbnRfZGF0YRgIIAMoCzIaLnF1YW50bW9kZWwuSW5zdHJ1bWVudERh" + 
          "dGESLQoMYWNjb3VudF9kYXRhGAkgAygLMhcucXVhbnRtb2RlbC5BY2NvdW50" + 
          "RGF0YRJAChZpbnZlc3RtZW50X3N5c3RlbV9kYXRhGAogAygLMiAucXVhbnRt" + 
          "b2RlbC5JbnZlc3RtZW50U3lzdGVtRGF0YRIrCgtzaWduYWxfZGF0YRgLIAMo" + 
          "CzIWLnF1YW50bW9kZWwuU2lnbmFsRGF0YRI+ChVzeXN0ZW1fcGFyYW1ldGVy" + 
          "X2RhdGEYDCABKAsyHy5xdWFudG1vZGVsLlN5c3RlbVBhcmFtZXRlckRhdGEi" + 
          "zQUKC1JlcXVlc3RUeXBlEhIKDkVYRUNVVEVfU0lHTkFMEAESFwoTRVhFQ1VU" + 
          "RV9EUkFGVF9PUkRFUhACEhYKEkNSRUFURV9EUkFGVF9PUkRFUhADEhAKDENS" + 
          "RUFURV9PUkRFUhAEEhAKDFVQREFURV9PUkRFUhAFEhAKDENBTkNFTF9PUkRF" + 
          "UhAGEhEKDVJFTEVBU0VfT1JERVIQBxISCg5DUkVBVEVfUkVMRUFTRRAIEhQK" + 
          "EFZBTElEQVRFX1JFTEVBU0UQCRISCg5DQU5DRUxfUkVMRUFTRRAKEhMKD1JF" + 
          "UExBQ0VfUkVMRUFTRRALEhQKEFJFTEVBU0VfUkVKRUNURUQQDBITCg9DQU5D" + 
          "RUxfUkVKRUNURUQQDRIUChBSRUxFQVNFX1JFU1RBVEVEEA4SFAoQUkVMRUFT" + 
          "RV9DQU5DRUxFRBAPEhQKEFJFTEVBU0VfUkVQTEFDRUQQEBIUChBDUkVBVEVf" + 
          "RVhFQ1VUSU9OEBESFgoSRVhFQ1VUSU9OX0NBTkNFTEVEEBISEgoOQlJPQURD" + 
          "QVNUX0RBVEEQExIOCgpBQ1RJVkVfU0VUEBQSDwoLUVVFUllfT1JERVIQFRIR" + 
          "Cg1RVUVSWV9SRUxFQVNFEBYSEwoPUVVFUllfRVhFQ1VUSU9OEBcSDAoIUk9M" + 
          "TE9WRVIQGBISCg5DVVJSRU5UX1NUQVRVUxAZEhEKDVVQREFURV9TVEFUVVMQ" + 
          "GhIYChRNQVJLRVREQVRBX1NVQlNDUklCRRAbEhoKFk1BUktFVERBVEFfVU5T" + 
          "VUJTQ1JJQkUQHBITCg9GSVhFTkdJTkVfTE9HSU4QHRIUChBGSVhFTkdJTkVf" + 
          "TE9HT1VUEB4SFAoQTE9HT1VUX0ZJWEVOR0lORRAfEhMKD0xPR0lOX0ZJWEVO" + 
          "R0lORRAgEhYKElJFTE9BRF9TVEFUSUNfREFUQRAhEgwKCFNIVVRET1dOECIi" + 
          "4gMKFURlYWxpbmdFbmdpbmVSZXNwb25zZRITCgtyZXNwb25zZV9pZBgBIAEo" + 
          "CRISCgpyZXF1ZXN0X2lkGAIgASgJEhEKCXRpbWVzdGFtcBgDIAEoCRI8CgR0" + 
          "eXBlGAQgASgOMi4ucXVhbnRtb2RlbC5EZWFsaW5nRW5naW5lUmVzcG9uc2Uu" + 
          "UmVzcG9uc2VUeXBlEhEKCWVycm9yX21zZxgFIAEoCRIyCgtkcmFmdF9vcmRl" + 
          "chgGIAMoCzIdLnF1YW50bW9kZWwuRHJhZnRPcmRlck1lc3NhZ2USJwoFb3Jk" + 
          "ZXIYByADKAsyGC5xdWFudG1vZGVsLk9yZGVyTWVzc2FnZRIzCghwb3NpdGlv" + 
          "bhgIIAMoCzIhLnF1YW50bW9kZWwuUG9zaXRpb25PdmVybmlnaHREYXRhEjkK" + 
          "EHN5c3RlbV9wYXJhbWV0ZXIYCSADKAsyHy5xdWFudG1vZGVsLlN5c3RlbVBh" + 
          "cmFtZXRlckRhdGESMwoNYWNjb3VudF9saW1pdBgKIAEoCzIcLnF1YW50bW9k" + 
          "ZWwuQWNjb3VudExpbWl0RGF0YSI6CgxSZXNwb25zZVR5cGUSEwoPQUNLTk9X" + 
          "TEVER0VNRU5UEAESCgoGUkVKRUNUEAISCQoFRVJST1IQAyKgCAoWRGVhbGlu" + 
          "Z0VuZ2luZUJyb2FkY2FzdBIUCgxicm9hZGNhc3RfaWQYASABKAkSPgoEdHlw" + 
          "ZRgCIAEoDjIwLnF1YW50bW9kZWwuRGVhbGluZ0VuZ2luZUJyb2FkY2FzdC5C" + 
          "cm9hZGNhc3RUeXBlEhEKCXRpbWVzdGFtcBgDIAEoCRInCgVvcmRlchgEIAMo" + 
          "CzIYLnF1YW50bW9kZWwuT3JkZXJNZXNzYWdlEjIKD2ZpeF9lbmdpbmVfZGF0" + 
          "YRgFIAMoCzIZLnF1YW50bW9kZWwuRml4RW5naW5lRGF0YRIzCghwb3NpdGlv" + 
          "bhgGIAMoCzIhLnF1YW50bW9kZWwuUG9zaXRpb25PdmVybmlnaHREYXRhEjkK" + 
          "EHN5c3RlbV9wYXJhbWV0ZXIYByADKAsyHy5xdWFudG1vZGVsLlN5c3RlbVBh" + 
          "cmFtZXRlckRhdGEizwUKDUJyb2FkY2FzdFR5cGUSEgoORVhFQ1VURV9TSUdO" + 
          "QUwQARIXChNFWEVDVVRFX0RSQUZUX09SREVSEAISFgoSQ1JFQVRFX0RSQUZU" + 
          "X09SREVSEAMSEAoMQ1JFQVRFX09SREVSEAQSEAoMVVBEQVRFX09SREVSEAUS" + 
          "EAoMQ0FOQ0VMX09SREVSEAYSEQoNUkVMRUFTRV9PUkRFUhAHEhIKDkNSRUFU" + 
          "RV9SRUxFQVNFEAgSFAoQVkFMSURBVEVfUkVMRUFTRRAJEhIKDkNBTkNFTF9S" + 
          "RUxFQVNFEAoSEwoPUkVQTEFDRV9SRUxFQVNFEAsSFAoQUkVMRUFTRV9SRUpF" + 
          "Q1RFRBAMEhMKD0NBTkNFTF9SRUpFQ1RFRBANEhQKEFJFTEVBU0VfUkVTVEFU" + 
          "RUQQDhIUChBSRUxFQVNFX0NBTkNFTEVEEA8SFAoQUkVMRUFTRV9SRVBMQUNF" + 
          "RBAQEhQKEENSRUFURV9FWEVDVVRJT04QERIWChJFWEVDVVRJT05fQ0FOQ0VM" + 
          "RUQQEhISCg5CUk9BRENBU1RfREFUQRATEg4KCkFDVElWRV9TRVQQFBIPCgtR" + 
          "VUVSWV9PUkRFUhAVEhEKDVFVRVJZX1JFTEVBU0UQFhITCg9RVUVSWV9FWEVD" + 
          "VVRJT04QFxIMCghST0xMT1ZFUhAYEhIKDkNVUlJFTlRfU1RBVFVTEBkSEQoN" + 
          "VVBEQVRFX1NUQVRVUxAaEhgKFE1BUktFVERBVEFfU1VCU0NSSUJFEBsSGgoW" + 
          "TUFSS0VUREFUQV9VTlNVQlNDUklCRRAcEhMKD0ZJWEVOR0lORV9MT0dJThAd" + 
          "EhQKEEZJWEVOR0lORV9MT0dPVVQQHhIUChBMT0dPVVRfRklYRU5HSU5FEB8S" + 
          "EwoPTE9HSU5fRklYRU5HSU5FECASFgoSUkVMT0FEX1NUQVRJQ19EQVRBECES" + 
          "DAoIU0hVVERPV04QIiKHBAoQRml4RW5naW5lUmVxdWVzdBISCgpyZXF1ZXN0" + 
          "X2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoCRI2CgR0eXBlGAMgASgOMigu" + 
          "cXVhbnRtb2RlbC5GaXhFbmdpbmVSZXF1ZXN0LlJlcXVlc3RUeXBlEhIKCnNl" + 
          "c3Npb25faWQYBCABKAkSLQoMcmVsZWFzZV9kYXRhGAUgASgLMhcucXVhbnRt" + 
          "b2RlbC5SZWxlYXNlRGF0YRIzCg9pbnN0cnVtZW50X2RhdGEYBiABKAsyGi5x" + 
          "dWFudG1vZGVsLkluc3RydW1lbnREYXRhEi0KDGFjY291bnRfZGF0YRgHIAEo" + 
          "CzIXLnF1YW50bW9kZWwuQWNjb3VudERhdGEi7AEKC1JlcXVlc3RUeXBlEhIK" + 
          "DkNSRUFURV9SRUxFQVNFEAESEgoOQ0FOQ0VMX1JFTEVBU0UQAhITCg9SRVBM" + 
          "QUNFX1JFTEVBU0UQAxITCg9ERUZJTkVfU0VDVVJJVFkQBBIYChRNQVJLRVRE" + 
          "QVRBX1NVQlNDUklCRRAFEhQKEEZJWEVOR0lORV9MT0dPVVQQBhITCg9GSVhF" + 
          "TkdJTkVfTE9HSU4QBxISCg5TRVFVRU5DRV9SRVNFVBAIEhIKDlJFU0VORF9S" + 
          "RVFVRVNUEAkSEAoMVEVTVF9SRVFVRVNUEAoSDAoIU0hVVERPV04QCyLYAQoR" + 
          "Rml4RW5naW5lUmVzcG9uc2USEwoLcmVzcG9uc2VfaWQYASABKAkSEgoKcmVx" + 
          "dWVzdF9pZBgCIAEoCRIRCgl0aW1lc3RhbXAYAyABKAkSOAoEdHlwZRgEIAEo" + 
          "DjIqLnF1YW50bW9kZWwuRml4RW5naW5lUmVzcG9uc2UuUmVzcG9uc2VUeXBl" + 
          "EhEKCWVycm9yX21zZxgFIAEoCSI6CgxSZXNwb25zZVR5cGUSEwoPQUNLTk9X" + 
          "TEVER0VNRU5UEAESCgoGUkVKRUNUEAISCQoFRVJST1IQAyLMAgoUQ2xpZW50" + 
          "QWRhcHRlclJlcXVlc3QSEgoKcmVxdWVzdF9pZBgBIAEoCRISCgpzZXNzaW9u" + 
          "X2lkGAIgASgJEhEKCXRpbWVzdGFtcBgDIAEoCRI6CgR0eXBlGAQgASgOMiwu" + 
          "cXVhbnRtb2RlbC5DbGllbnRBZGFwdGVyUmVxdWVzdC5SZXF1ZXN0VHlwZRI5" + 
          "Cg9kZWFsaW5nX3JlcXVlc3QYBSABKAsyIC5xdWFudG1vZGVsLkRlYWxpbmdF" + 
          "bmdpbmVSZXF1ZXN0EjsKEGRhdGFiYXNlX3JlcXVlc3QYBiABKAsyIS5xdWFu" + 
          "dG1vZGVsLkRhdGFiYXNlRW5naW5lUmVxdWVzdCJFCgtSZXF1ZXN0VHlwZRIN" + 
          "CglIRUFSVEJFQVQQARIMCghEQVRBQkFTRRACEgsKB0RFQUxJTkcQAxIMCghT" + 
          "SFVURE9XThAEIvACChVDbGllbnRBZGFwdGVyUmVzcG9uc2USEwoLcmVzcG9u" + 
          "c2VfaWQYASABKAkSEgoKcmVxdWVzdF9pZBgCIAEoCRISCgpzZXNzaW9uX2lk" + 
          "GAMgASgJEhEKCXRpbWVzdGFtcBgEIAEoCRI8CgR0eXBlGAUgASgOMi4ucXVh" + 
          "bnRtb2RlbC5DbGllbnRBZGFwdGVyUmVzcG9uc2UuUmVzcG9uc2VUeXBlEhEK" + 
          "CWVycm9yX21zZxgGIAEoCRI7ChBkZWFsaW5nX3Jlc3BvbnNlGAcgASgLMiEu" + 
          "cXVhbnRtb2RlbC5EZWFsaW5nRW5naW5lUmVzcG9uc2USPQoRZGF0YWJhc2Vf" + 
          "cmVzcG9uc2UYCCABKAsyIi5xdWFudG1vZGVsLkRhdGFiYXNlRW5naW5lUmVz" + 
          "cG9uc2UiOgoMUmVzcG9uc2VUeXBlEhMKD0FDS05PV0xFREdFTUVOVBABEgoK" + 
          "BlJFSkVDVBACEgkKBUVSUk9SEAMiiwMKFkNsaWVudEFkYXB0ZXJCcm9hZGNh" + 
          "c3QSFAoMYnJvYWRjYXN0X2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoCRI+" + 
          "CgR0eXBlGAMgASgOMjAucXVhbnRtb2RlbC5DbGllbnRBZGFwdGVyQnJvYWRj" + 
          "YXN0LkJyb2FkY2FzdFR5cGUSPQoRZGVhbGluZ19icm9hZGNhc3QYBCABKAsy" + 
          "Ii5xdWFudG1vZGVsLkRlYWxpbmdFbmdpbmVCcm9hZGNhc3QSPQoUbWFya2V0" + 
          "ZGF0YV9icm9hZGNhc3QYBSABKAsyHy5xdWFudG1vZGVsLk1hcmtldERhdGFC" + 
          "cm9hZGNhc3QSMQoOaGVhcnRiZWF0X2RhdGEYBiABKAsyGS5xdWFudG1vZGVs" + 
          "LkhlYXJ0YmVhdERhdGEiVwoNQnJvYWRjYXN0VHlwZRINCglIRUFSVEJFQVQQ" + 
          "ARIMCghEQVRBQkFTRRACEgsKB0RFQUxJTkcQAxIOCgpNQVJLRVREQVRBEAQS" + 
          "DAoIU0hVVERPV04QBSLQAQoXSW52ZXN0bWVudFN5c3RlbVJlcXVlc3QSEgoK" + 
          "cmVxdWVzdF9pZBgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJEhEKCXRpbWVz" + 
          "dGFtcBgDIAEoCRI9CgR0eXBlGAQgASgOMi8ucXVhbnRtb2RlbC5JbnZlc3Rt" + 
          "ZW50U3lzdGVtUmVxdWVzdC5SZXF1ZXN0VHlwZRIQCghkZWxlZ2F0ZRgFIAEo" + 
          "CSIpCgtSZXF1ZXN0VHlwZRINCglIRUFSVEJFQVQQARILCgdDT01NQU5EEAIi" + 
          "jAIKGEludmVzdG1lbnRTeXN0ZW1SZXNwb25zZRITCgtyZXNwb25zZV9pZBgB" + 
          "IAEoCRISCgpyZXF1ZXN0X2lkGAIgASgJEhEKCXRpbWVzdGFtcBgDIAEoCRI/" + 
          "CgR0eXBlGAQgASgOMjEucXVhbnRtb2RlbC5JbnZlc3RtZW50U3lzdGVtUmVz" + 
          "cG9uc2UuUmVzcG9uc2VUeXBlEhEKCWVycm9yX21zZxgFIAEoCRISCgpzZXNz" + 
          "aW9uX2lkGAYgASgJEhAKCGRlbGVnYXRlGAcgASgMIjoKDFJlc3BvbnNlVHlw" + 
          "ZRITCg9BQ0tOT1dMRURHRU1FTlQQARIKCgZSRUpFQ1QQAhIJCgVFUlJPUhAD" + 
          "ItkBChlJbnZlc3RtZW50U3lzdGVtQnJvYWRjYXN0EhQKDGJyb2FkY2FzdF9p" + 
          "ZBgBIAEoCRIRCgl0aW1lc3RhbXAYAiABKAkSQQoEdHlwZRgDIAEoDjIzLnF1" + 
          "YW50bW9kZWwuSW52ZXN0bWVudFN5c3RlbUJyb2FkY2FzdC5Ccm9hZGNhc3RU" + 
          "eXBlEhAKCGRlbGVnYXRlGAQgASgMIj4KDUJyb2FkY2FzdFR5cGUSCQoFUFJJ" + 
          "Q0UQARIJCgVUUkFERRACEggKBERBVEEQAxINCglIRUFSVEJFQVQQBEIFSAGA" + 
          "AQA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_quantmodel_FixMarketData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_quantmodel_FixMarketData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixMarketData, global::quantmodel.FixMarketData.Builder>(internal__static_quantmodel_FixMarketData__Descriptor,
                new string[] { "InstrumentId", "SendingTm", "EntryType", "UpdateAction", "EntryPx", "EntrySize", });
        internal__static_quantmodel_CMEMarketData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_quantmodel_CMEMarketData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.CMEMarketData, global::quantmodel.CMEMarketData.Builder>(internal__static_quantmodel_CMEMarketData__Descriptor,
                new string[] { "SendingTm", "SecurityId", "UpdateAction", "EntryType", "IsImplied", "EntrySize", "EntryPx", "Orders", "PriceLevel", "EntryTm", "Aggressor", });
        internal__static_quantmodel_FastEngineBroadcast__Descriptor = Descriptor.MessageTypes[2];
        internal__static_quantmodel_FastEngineBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FastEngineBroadcast, global::quantmodel.FastEngineBroadcast.Builder>(internal__static_quantmodel_FastEngineBroadcast__Descriptor,
                new string[] { "Timestamp", "BroadcastType", "CmeMarketData", });
        internal__static_quantmodel_FixEngineBroadcast__Descriptor = Descriptor.MessageTypes[3];
        internal__static_quantmodel_FixEngineBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineBroadcast, global::quantmodel.FixEngineBroadcast.Builder>(internal__static_quantmodel_FixEngineBroadcast__Descriptor,
                new string[] { "Timestamp", "InstrumentId", "FixMarketData", });
        internal__static_quantmodel_MarketDataPriceData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_quantmodel_MarketDataPriceData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataPriceData, global::quantmodel.MarketDataPriceData.Builder>(internal__static_quantmodel_MarketDataPriceData__Descriptor,
                new string[] { "InstrumentId", "LastPrc", });
        internal__static_quantmodel_MarketDataTradeData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_quantmodel_MarketDataTradeData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataTradeData, global::quantmodel.MarketDataTradeData.Builder>(internal__static_quantmodel_MarketDataTradeData__Descriptor,
                new string[] { "InstrumentId", "Aggressor", "TradePrc", "TradeQty", "EntryTm", });
        internal__static_quantmodel_MarketDataQuoteData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_quantmodel_MarketDataQuoteData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataQuoteData, global::quantmodel.MarketDataQuoteData.Builder>(internal__static_quantmodel_MarketDataQuoteData__Descriptor,
                new string[] { "InstrumentId", "Type", "QuotePrc", "QuoteQty", "Level", });
        internal__static_quantmodel_MarketDataBroadcast__Descriptor = Descriptor.MessageTypes[7];
        internal__static_quantmodel_MarketDataBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.MarketDataBroadcast, global::quantmodel.MarketDataBroadcast.Builder>(internal__static_quantmodel_MarketDataBroadcast__Descriptor,
                new string[] { "BroadcastId", "Timestamp", "Type", "PriceData", "TradeData", "QuoteData", });
        internal__static_quantmodel_HeartbeatData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_quantmodel_HeartbeatData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.HeartbeatData, global::quantmodel.HeartbeatData.Builder>(internal__static_quantmodel_HeartbeatData__Descriptor,
                new string[] { "HeartbeatId", "Timestamp", });
        internal__static_quantmodel_FixEngineData__Descriptor = Descriptor.MessageTypes[9];
        internal__static_quantmodel_FixEngineData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineData, global::quantmodel.FixEngineData.Builder>(internal__static_quantmodel_FixEngineData__Descriptor,
                new string[] { "FixEngineId", "SessionId", });
        internal__static_quantmodel_SystemParameterData__Descriptor = Descriptor.MessageTypes[10];
        internal__static_quantmodel_SystemParameterData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.SystemParameterData, global::quantmodel.SystemParameterData.Builder>(internal__static_quantmodel_SystemParameterData__Descriptor,
                new string[] { "ParameterId", "Category", "Name", "Value", });
        internal__static_quantmodel_PositionOvernightData__Descriptor = Descriptor.MessageTypes[11];
        internal__static_quantmodel_PositionOvernightData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.PositionOvernightData, global::quantmodel.PositionOvernightData.Builder>(internal__static_quantmodel_PositionOvernightData__Descriptor,
                new string[] { "PositionOvernightId", "AccountId", "InstrumentId", "InvestmentSystemId", "PositionType", "OpenPos", "OpenPrc", "IsActive", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_AccountLimitData__Descriptor = Descriptor.MessageTypes[12];
        internal__static_quantmodel_AccountLimitData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountLimitData, global::quantmodel.AccountLimitData.Builder>(internal__static_quantmodel_AccountLimitData__Descriptor,
                new string[] { "AccountId", "Symbol", "SecurityExchange", "SessionId", "MaxOpenLongQty", "MaxOpenShortQty", "MaxReleaseQty", "IsActive", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_DraftOrderData__Descriptor = Descriptor.MessageTypes[13];
        internal__static_quantmodel_DraftOrderData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftOrderData, global::quantmodel.DraftOrderData.Builder>(internal__static_quantmodel_DraftOrderData__Descriptor,
                new string[] { "ExternalOrderId", "InvestmentSystemId", "InstrumentId", "SideCode", "Tif", "OrderType", "OrderQty", "LimitPrc", "StopPrc", });
        internal__static_quantmodel_DraftAllocationData__Descriptor = Descriptor.MessageTypes[14];
        internal__static_quantmodel_DraftAllocationData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftAllocationData, global::quantmodel.DraftAllocationData.Builder>(internal__static_quantmodel_DraftAllocationData__Descriptor,
                new string[] { "AccountId", "AllocationQty", });
        internal__static_quantmodel_AccountData__Descriptor = Descriptor.MessageTypes[15];
        internal__static_quantmodel_AccountData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountData, global::quantmodel.AccountData.Builder>(internal__static_quantmodel_AccountData__Descriptor,
                new string[] { "AccountId", "ParentAccountId", "Name", "MarketAccountId", "CustodyAccountId", "GiveupAccountId", "GiveupFirmId", "NotionalVal", "ProfitTarget", "StopLoss", "SignalWeight", "IsSuppressed", "IsActive", "ContactName", "ContactEmail", "ContactPhone", "TradingFirmName", "TradingFirmEmail", "TradingFirmPhone", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_OrderData__Descriptor = Descriptor.MessageTypes[16];
        internal__static_quantmodel_OrderData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.OrderData, global::quantmodel.OrderData.Builder>(internal__static_quantmodel_OrderData__Descriptor,
                new string[] { "OrderId", "ExternalOrderId", "InvestmentSystemId", "OrderType", "OrderStatus", "InstrumentId", "Symbol", "Tif", "SideCode", "BaseCcy", "OrderQty", "OpenQty", "ReleasedQty", "ExecutedQty", "LimitPrc", "StopPrc", "MarkPrc", "AveragePrc", "EntryPrc", "ReleasedVal", "ExecutedVal", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_AllocationData__Descriptor = Descriptor.MessageTypes[17];
        internal__static_quantmodel_AllocationData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.AllocationData, global::quantmodel.AllocationData.Builder>(internal__static_quantmodel_AllocationData__Descriptor,
                new string[] { "AllocationId", "OrderId", "AccountId", "InstrumentId", "SideCode", "AllocationQty", "ReleasedQty", "ExecutedQty", "ExecutedVal", "AveragePrc", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_ReleaseData__Descriptor = Descriptor.MessageTypes[18];
        internal__static_quantmodel_ReleaseData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ReleaseData, global::quantmodel.ReleaseData.Builder>(internal__static_quantmodel_ReleaseData__Descriptor,
                new string[] { "ReleaseId", "SessionId", "AccountId", "OrderId", "AllocationId", "InvestmentSystemId", "InstrumentId", "ComplianceAuditId", "ClientOrderId", "CounterpartyOrderId", "ReleaseStatus", "ReleaseType", "Tif", "SideCode", "ReleaseQty", "LimitPrc", "StopPrc", "AveragePrc", "ExecutedVal", "ExecutedQty", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_ExecutionData__Descriptor = Descriptor.MessageTypes[19];
        internal__static_quantmodel_ExecutionData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ExecutionData, global::quantmodel.ExecutionData.Builder>(internal__static_quantmodel_ExecutionData__Descriptor,
                new string[] { "ExecutionId", "SessionId", "AccountId", "OrderId", "ReleaseId", "InvestmentSystemId", "InstrumentId", "ClientOrderId", "CounterpartyExecutionId", "SideCode", "ExecutionCcy", "ExecutionStatus", "ExecutionPrc", "ExecutionQty", "ExecutionVal", "LeavesQty", "AveragePrc", "LegType", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_InstrumentData__Descriptor = Descriptor.MessageTypes[20];
        internal__static_quantmodel_InstrumentData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.InstrumentData, global::quantmodel.InstrumentData.Builder>(internal__static_quantmodel_InstrumentData__Descriptor,
                new string[] { "InstrumentId", "InstrumentType", "Name", "Symbol", "Cusip", "Sedol", "Isin", "Ric", "CfiCode", "SecurityId", "SecurityType", "SecurityDesc", "SecurityExchange", "MaturityMonthYear", "BaseCcy", "LastPrc", "MarkPrc", "MarkDatetime", "Multiplier", "ExchangePriceFactor", "RolloverDatetime", "IsActive", "AddedDatetime", "AddedBy", "UpdatedDatetime", "UpdatedBy", });
        internal__static_quantmodel_SignalData__Descriptor = Descriptor.MessageTypes[21];
        internal__static_quantmodel_SignalData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.SignalData, global::quantmodel.SignalData.Builder>(internal__static_quantmodel_SignalData__Descriptor,
                new string[] { "ExternalOrderId", "InvestmentSystemId", "SignalId", "InstrumentId", "SideCode", "SignalQty", "OrderType", "LimitPrc", "StopPrc", });
        internal__static_quantmodel_InvestmentSystemData__Descriptor = Descriptor.MessageTypes[22];
        internal__static_quantmodel_InvestmentSystemData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemData, global::quantmodel.InvestmentSystemData.Builder>(internal__static_quantmodel_InvestmentSystemData__Descriptor,
                new string[] { "InvestmentSystemId", "Name", "IsActive", });
        internal__static_quantmodel_StrategyData__Descriptor = Descriptor.MessageTypes[23];
        internal__static_quantmodel_StrategyData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.StrategyData, global::quantmodel.StrategyData.Builder>(internal__static_quantmodel_StrategyData__Descriptor,
                new string[] { "StrategyId", "InvestmentSystemId", "SignalId", "Name", "DefaultWeight", "IsActive", });
        internal__static_quantmodel_AccountStrategyData__Descriptor = Descriptor.MessageTypes[24];
        internal__static_quantmodel_AccountStrategyData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.AccountStrategyData, global::quantmodel.AccountStrategyData.Builder>(internal__static_quantmodel_AccountStrategyData__Descriptor,
                new string[] { "AccountId", "StrategyId", "Weight", "IsEnabled", });
        internal__static_quantmodel_ExecutionReportData__Descriptor = Descriptor.MessageTypes[25];
        internal__static_quantmodel_ExecutionReportData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ExecutionReportData, global::quantmodel.ExecutionReportData.Builder>(internal__static_quantmodel_ExecutionReportData__Descriptor,
                new string[] { "ReleaseId", "SessionId", "SendingTm", "ExecID", "OrderID", "ClOrdID", "OrigClOrdID", "ExecRefID", "OrdType", "ExecType", "ExecTransType", "MultiLegReportingType", "SecurityID", "SecurityType", "IDSource", "Account", "OrdStatus", "Symbol", "Side", "TimeInForce", "MaturityMonthYear", "TransactTime", "Text", "CumQty", "OrderQty", "LeavesQty", "LastShares", "Price", "AvgPx", "LastPx", "StopPx", });
        internal__static_quantmodel_DraftOrderMessage__Descriptor = Descriptor.MessageTypes[26];
        internal__static_quantmodel_DraftOrderMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DraftOrderMessage, global::quantmodel.DraftOrderMessage.Builder>(internal__static_quantmodel_DraftOrderMessage__Descriptor,
                new string[] { "DraftOrderData", "DraftAllocationData", });
        internal__static_quantmodel_OrderMessage__Descriptor = Descriptor.MessageTypes[27];
        internal__static_quantmodel_OrderMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.OrderMessage, global::quantmodel.OrderMessage.Builder>(internal__static_quantmodel_OrderMessage__Descriptor,
                new string[] { "OrderData", "AllocationData", "ReleaseData", "ExecutionData", });
        internal__static_quantmodel_DatabaseEngineRequest__Descriptor = Descriptor.MessageTypes[28];
        internal__static_quantmodel_DatabaseEngineRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineRequest, global::quantmodel.DatabaseEngineRequest.Builder>(internal__static_quantmodel_DatabaseEngineRequest__Descriptor,
                new string[] { "RequestId", "Timestamp", "Query", });
        internal__static_quantmodel_DatabaseEngineRequest_Query__Descriptor = internal__static_quantmodel_DatabaseEngineRequest__Descriptor.NestedTypes[0];
        internal__static_quantmodel_DatabaseEngineRequest_Query__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineRequest.Types.Query, global::quantmodel.DatabaseEngineRequest.Types.Query.Builder>(internal__static_quantmodel_DatabaseEngineRequest_Query__Descriptor,
                new string[] { "Type", "QueryId", "QueryStr", });
        internal__static_quantmodel_DatabaseEngineResponse__Descriptor = Descriptor.MessageTypes[29];
        internal__static_quantmodel_DatabaseEngineResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse, global::quantmodel.DatabaseEngineResponse.Builder>(internal__static_quantmodel_DatabaseEngineResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "Timestamp", "ResultSet", });
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet__Descriptor = internal__static_quantmodel_DatabaseEngineResponse__Descriptor.NestedTypes[0];
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Builder>(internal__static_quantmodel_DatabaseEngineResponse_ResultSet__Descriptor,
                new string[] { "QueryId", "Row", });
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__Descriptor = internal__static_quantmodel_DatabaseEngineResponse_ResultSet__Descriptor.NestedTypes[0];
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Builder>(internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__Descriptor,
                new string[] { "RowId", "Column", });
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__Descriptor = internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__Descriptor.NestedTypes[0];
        internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Builder>(internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__Descriptor,
                new string[] { "ColumnId", "Name", "Value", });
        internal__static_quantmodel_DealingEngineRequest__Descriptor = Descriptor.MessageTypes[30];
        internal__static_quantmodel_DealingEngineRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineRequest, global::quantmodel.DealingEngineRequest.Builder>(internal__static_quantmodel_DealingEngineRequest__Descriptor,
                new string[] { "RequestId", "Timestamp", "Type", "DraftOrder", "Order", "ExecutionReportData", "FixEngineData", "InstrumentData", "AccountData", "InvestmentSystemData", "SignalData", "SystemParameterData", });
        internal__static_quantmodel_DealingEngineResponse__Descriptor = Descriptor.MessageTypes[31];
        internal__static_quantmodel_DealingEngineResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineResponse, global::quantmodel.DealingEngineResponse.Builder>(internal__static_quantmodel_DealingEngineResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "Timestamp", "Type", "ErrorMsg", "DraftOrder", "Order", "Position", "SystemParameter", "AccountLimit", });
        internal__static_quantmodel_DealingEngineBroadcast__Descriptor = Descriptor.MessageTypes[32];
        internal__static_quantmodel_DealingEngineBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.DealingEngineBroadcast, global::quantmodel.DealingEngineBroadcast.Builder>(internal__static_quantmodel_DealingEngineBroadcast__Descriptor,
                new string[] { "BroadcastId", "Type", "Timestamp", "Order", "FixEngineData", "Position", "SystemParameter", });
        internal__static_quantmodel_FixEngineRequest__Descriptor = Descriptor.MessageTypes[33];
        internal__static_quantmodel_FixEngineRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineRequest, global::quantmodel.FixEngineRequest.Builder>(internal__static_quantmodel_FixEngineRequest__Descriptor,
                new string[] { "RequestId", "Timestamp", "Type", "SessionId", "ReleaseData", "InstrumentData", "AccountData", });
        internal__static_quantmodel_FixEngineResponse__Descriptor = Descriptor.MessageTypes[34];
        internal__static_quantmodel_FixEngineResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.FixEngineResponse, global::quantmodel.FixEngineResponse.Builder>(internal__static_quantmodel_FixEngineResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "Timestamp", "Type", "ErrorMsg", });
        internal__static_quantmodel_ClientAdapterRequest__Descriptor = Descriptor.MessageTypes[35];
        internal__static_quantmodel_ClientAdapterRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterRequest, global::quantmodel.ClientAdapterRequest.Builder>(internal__static_quantmodel_ClientAdapterRequest__Descriptor,
                new string[] { "RequestId", "SessionId", "Timestamp", "Type", "DealingRequest", "DatabaseRequest", });
        internal__static_quantmodel_ClientAdapterResponse__Descriptor = Descriptor.MessageTypes[36];
        internal__static_quantmodel_ClientAdapterResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterResponse, global::quantmodel.ClientAdapterResponse.Builder>(internal__static_quantmodel_ClientAdapterResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "SessionId", "Timestamp", "Type", "ErrorMsg", "DealingResponse", "DatabaseResponse", });
        internal__static_quantmodel_ClientAdapterBroadcast__Descriptor = Descriptor.MessageTypes[37];
        internal__static_quantmodel_ClientAdapterBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.ClientAdapterBroadcast, global::quantmodel.ClientAdapterBroadcast.Builder>(internal__static_quantmodel_ClientAdapterBroadcast__Descriptor,
                new string[] { "BroadcastId", "Timestamp", "Type", "DealingBroadcast", "MarketdataBroadcast", "HeartbeatData", });
        internal__static_quantmodel_InvestmentSystemRequest__Descriptor = Descriptor.MessageTypes[38];
        internal__static_quantmodel_InvestmentSystemRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemRequest, global::quantmodel.InvestmentSystemRequest.Builder>(internal__static_quantmodel_InvestmentSystemRequest__Descriptor,
                new string[] { "RequestId", "SessionId", "Timestamp", "Type", "Delegate", });
        internal__static_quantmodel_InvestmentSystemResponse__Descriptor = Descriptor.MessageTypes[39];
        internal__static_quantmodel_InvestmentSystemResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemResponse, global::quantmodel.InvestmentSystemResponse.Builder>(internal__static_quantmodel_InvestmentSystemResponse__Descriptor,
                new string[] { "ResponseId", "RequestId", "Timestamp", "Type", "ErrorMsg", "SessionId", "Delegate", });
        internal__static_quantmodel_InvestmentSystemBroadcast__Descriptor = Descriptor.MessageTypes[40];
        internal__static_quantmodel_InvestmentSystemBroadcast__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::quantmodel.InvestmentSystemBroadcast, global::quantmodel.InvestmentSystemBroadcast.Builder>(internal__static_quantmodel_InvestmentSystemBroadcast__Descriptor,
                new string[] { "BroadcastId", "Timestamp", "Type", "Delegate", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class FixMarketData : pb::GeneratedMessage<FixMarketData, FixMarketData.Builder> {
    private static readonly FixMarketData defaultInstance = new Builder().BuildPartial();
    public static FixMarketData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FixMarketData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FixMarketData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixMarketData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FixMarketData, FixMarketData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixMarketData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum EntryType {
        BID = 1,
        ASK = 2,
        TRADE = 3,
        UNKNOWN = 4,
      }
      
    }
    #endregion
    
    public const int InstrumentIdFieldNumber = 1;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int SendingTmFieldNumber = 2;
    private bool hasSendingTm;
    private string sendingTm_ = "";
    public bool HasSendingTm {
      get { return hasSendingTm; }
    }
    public string SendingTm {
      get { return sendingTm_; }
    }
    
    public const int EntryTypeFieldNumber = 3;
    private bool hasEntryType;
    private global::quantmodel.FixMarketData.Types.EntryType entryType_ = global::quantmodel.FixMarketData.Types.EntryType.BID;
    public bool HasEntryType {
      get { return hasEntryType; }
    }
    public global::quantmodel.FixMarketData.Types.EntryType EntryType {
      get { return entryType_; }
    }
    
    public const int UpdateActionFieldNumber = 4;
    private bool hasUpdateAction;
    private string updateAction_ = "";
    public bool HasUpdateAction {
      get { return hasUpdateAction; }
    }
    public string UpdateAction {
      get { return updateAction_; }
    }
    
    public const int EntryPxFieldNumber = 5;
    private bool hasEntryPx;
    private string entryPx_ = "0";
    public bool HasEntryPx {
      get { return hasEntryPx; }
    }
    public string EntryPx {
      get { return entryPx_; }
    }
    
    public const int EntrySizeFieldNumber = 6;
    private bool hasEntrySize;
    private string entrySize_ = "0";
    public bool HasEntrySize {
      get { return hasEntrySize; }
    }
    public string EntrySize {
      get { return entrySize_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInstrumentId) {
        output.WriteString(1, InstrumentId);
      }
      if (HasSendingTm) {
        output.WriteString(2, SendingTm);
      }
      if (HasEntryType) {
        output.WriteEnum(3, (int) EntryType);
      }
      if (HasUpdateAction) {
        output.WriteString(4, UpdateAction);
      }
      if (HasEntryPx) {
        output.WriteString(5, EntryPx);
      }
      if (HasEntrySize) {
        output.WriteString(6, EntrySize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstrumentId);
        }
        if (HasSendingTm) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SendingTm);
        }
        if (HasEntryType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) EntryType);
        }
        if (HasUpdateAction) {
          size += pb::CodedOutputStream.ComputeStringSize(4, UpdateAction);
        }
        if (HasEntryPx) {
          size += pb::CodedOutputStream.ComputeStringSize(5, EntryPx);
        }
        if (HasEntrySize) {
          size += pb::CodedOutputStream.ComputeStringSize(6, EntrySize);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FixMarketData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixMarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixMarketData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixMarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixMarketData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixMarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FixMarketData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FixMarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FixMarketData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixMarketData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FixMarketData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FixMarketData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FixMarketData result = new FixMarketData();
      
      protected override FixMarketData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FixMarketData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FixMarketData.Descriptor; }
      }
      
      public override FixMarketData DefaultInstanceForType {
        get { return global::quantmodel.FixMarketData.DefaultInstance; }
      }
      
      public override FixMarketData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        FixMarketData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FixMarketData) {
          return MergeFrom((FixMarketData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FixMarketData other) {
        if (other == global::quantmodel.FixMarketData.DefaultInstance) return this;
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasSendingTm) {
          SendingTm = other.SendingTm;
        }
        if (other.HasEntryType) {
          EntryType = other.EntryType;
        }
        if (other.HasUpdateAction) {
          UpdateAction = other.UpdateAction;
        }
        if (other.HasEntryPx) {
          EntryPx = other.EntryPx;
        }
        if (other.HasEntrySize) {
          EntrySize = other.EntrySize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InstrumentId = input.ReadString();
              break;
            }
            case 18: {
              SendingTm = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.FixMarketData.Types.EntryType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                EntryType = (global::quantmodel.FixMarketData.Types.EntryType) rawValue;
              }
              break;
            }
            case 34: {
              UpdateAction = input.ReadString();
              break;
            }
            case 42: {
              EntryPx = input.ReadString();
              break;
            }
            case 50: {
              EntrySize = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasSendingTm {
        get { return result.HasSendingTm; }
      }
      public string SendingTm {
        get { return result.SendingTm; }
        set { SetSendingTm(value); }
      }
      public Builder SetSendingTm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSendingTm = true;
        result.sendingTm_ = value;
        return this;
      }
      public Builder ClearSendingTm() {
        result.hasSendingTm = false;
        result.sendingTm_ = "";
        return this;
      }
      
      public bool HasEntryType {
       get { return result.HasEntryType; }
      }
      public global::quantmodel.FixMarketData.Types.EntryType EntryType {
        get { return result.EntryType; }
        set { SetEntryType(value); }
      }
      public Builder SetEntryType(global::quantmodel.FixMarketData.Types.EntryType value) {
        result.hasEntryType = true;
        result.entryType_ = value;
        return this;
      }
      public Builder ClearEntryType() {
        result.hasEntryType = false;
        result.entryType_ = global::quantmodel.FixMarketData.Types.EntryType.BID;
        return this;
      }
      
      public bool HasUpdateAction {
        get { return result.HasUpdateAction; }
      }
      public string UpdateAction {
        get { return result.UpdateAction; }
        set { SetUpdateAction(value); }
      }
      public Builder SetUpdateAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdateAction = true;
        result.updateAction_ = value;
        return this;
      }
      public Builder ClearUpdateAction() {
        result.hasUpdateAction = false;
        result.updateAction_ = "";
        return this;
      }
      
      public bool HasEntryPx {
        get { return result.HasEntryPx; }
      }
      public string EntryPx {
        get { return result.EntryPx; }
        set { SetEntryPx(value); }
      }
      public Builder SetEntryPx(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEntryPx = true;
        result.entryPx_ = value;
        return this;
      }
      public Builder ClearEntryPx() {
        result.hasEntryPx = false;
        result.entryPx_ = "0";
        return this;
      }
      
      public bool HasEntrySize {
        get { return result.HasEntrySize; }
      }
      public string EntrySize {
        get { return result.EntrySize; }
        set { SetEntrySize(value); }
      }
      public Builder SetEntrySize(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEntrySize = true;
        result.entrySize_ = value;
        return this;
      }
      public Builder ClearEntrySize() {
        result.hasEntrySize = false;
        result.entrySize_ = "0";
        return this;
      }
    }
    static FixMarketData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class CMEMarketData : pb::GeneratedMessage<CMEMarketData, CMEMarketData.Builder> {
    private static readonly CMEMarketData defaultInstance = new Builder().BuildPartial();
    public static CMEMarketData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CMEMarketData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CMEMarketData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_CMEMarketData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CMEMarketData, CMEMarketData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_CMEMarketData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum EntryType {
        BID = 0,
        ASK = 1,
        TRADE = 2,
        OPENING_PRICE = 4,
        SETTLEMENT_PRICE = 6,
        TRADING_SESSION_HIGH_PRICE = 7,
        TRADING_SESSION_LOW_PRICE = 8,
        TRADE_VOLUME = 9,
        OPEN_INTEREST = 10,
        SIMULATED_SELL = 11,
        SIMULATED_BUY = 12,
        EMPTY_BOOK = 13,
        PRIOR = 14,
        SESSION_HIGH_BID = 15,
        SESSION_LOW_OFFER = 16,
        FIXING_PRICE = 17,
        CASH_NOTE = 18,
      }
      
      public enum UpdateAction {
        ADD = 0,
        CHANGE = 1,
        DELETE = 2,
        OVERLAY = 5,
      }
      
      public enum AggressorType {
        UNKNOWN = 0,
        BUY = 1,
        SELL = 2,
      }
      
    }
    #endregion
    
    public const int SendingTmFieldNumber = 1;
    private bool hasSendingTm;
    private ulong sendingTm_ = 0UL;
    public bool HasSendingTm {
      get { return hasSendingTm; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SendingTm {
      get { return sendingTm_; }
    }
    
    public const int SecurityIdFieldNumber = 2;
    private bool hasSecurityId;
    private uint securityId_ = 0;
    public bool HasSecurityId {
      get { return hasSecurityId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SecurityId {
      get { return securityId_; }
    }
    
    public const int UpdateActionFieldNumber = 3;
    private bool hasUpdateAction;
    private global::quantmodel.CMEMarketData.Types.UpdateAction updateAction_ = global::quantmodel.CMEMarketData.Types.UpdateAction.ADD;
    public bool HasUpdateAction {
      get { return hasUpdateAction; }
    }
    public global::quantmodel.CMEMarketData.Types.UpdateAction UpdateAction {
      get { return updateAction_; }
    }
    
    public const int EntryTypeFieldNumber = 4;
    private bool hasEntryType;
    private global::quantmodel.CMEMarketData.Types.EntryType entryType_ = global::quantmodel.CMEMarketData.Types.EntryType.BID;
    public bool HasEntryType {
      get { return hasEntryType; }
    }
    public global::quantmodel.CMEMarketData.Types.EntryType EntryType {
      get { return entryType_; }
    }
    
    public const int IsImpliedFieldNumber = 5;
    private bool hasIsImplied;
    private bool isImplied_ = false;
    public bool HasIsImplied {
      get { return hasIsImplied; }
    }
    public bool IsImplied {
      get { return isImplied_; }
    }
    
    public const int EntrySizeFieldNumber = 6;
    private bool hasEntrySize;
    private int entrySize_ = 0;
    public bool HasEntrySize {
      get { return hasEntrySize; }
    }
    public int EntrySize {
      get { return entrySize_; }
    }
    
    public const int EntryPxFieldNumber = 7;
    private bool hasEntryPx;
    private string entryPx_ = "0.0";
    public bool HasEntryPx {
      get { return hasEntryPx; }
    }
    public string EntryPx {
      get { return entryPx_; }
    }
    
    public const int OrdersFieldNumber = 8;
    private bool hasOrders;
    private uint orders_ = 0;
    public bool HasOrders {
      get { return hasOrders; }
    }
    [global::System.CLSCompliant(false)]
    public uint Orders {
      get { return orders_; }
    }
    
    public const int PriceLevelFieldNumber = 9;
    private bool hasPriceLevel;
    private uint priceLevel_ = 0;
    public bool HasPriceLevel {
      get { return hasPriceLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint PriceLevel {
      get { return priceLevel_; }
    }
    
    public const int EntryTmFieldNumber = 10;
    private bool hasEntryTm;
    private uint entryTm_ = 0;
    public bool HasEntryTm {
      get { return hasEntryTm; }
    }
    [global::System.CLSCompliant(false)]
    public uint EntryTm {
      get { return entryTm_; }
    }
    
    public const int AggressorFieldNumber = 11;
    private bool hasAggressor;
    private global::quantmodel.CMEMarketData.Types.AggressorType aggressor_ = global::quantmodel.CMEMarketData.Types.AggressorType.UNKNOWN;
    public bool HasAggressor {
      get { return hasAggressor; }
    }
    public global::quantmodel.CMEMarketData.Types.AggressorType Aggressor {
      get { return aggressor_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSendingTm) return false;
        if (!hasSecurityId) return false;
        if (!hasUpdateAction) return false;
        if (!hasEntryType) return false;
        if (!hasIsImplied) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSendingTm) {
        output.WriteUInt64(1, SendingTm);
      }
      if (HasSecurityId) {
        output.WriteUInt32(2, SecurityId);
      }
      if (HasUpdateAction) {
        output.WriteEnum(3, (int) UpdateAction);
      }
      if (HasEntryType) {
        output.WriteEnum(4, (int) EntryType);
      }
      if (HasIsImplied) {
        output.WriteBool(5, IsImplied);
      }
      if (HasEntrySize) {
        output.WriteInt32(6, EntrySize);
      }
      if (HasEntryPx) {
        output.WriteString(7, EntryPx);
      }
      if (HasOrders) {
        output.WriteUInt32(8, Orders);
      }
      if (HasPriceLevel) {
        output.WriteUInt32(9, PriceLevel);
      }
      if (HasEntryTm) {
        output.WriteUInt32(10, EntryTm);
      }
      if (HasAggressor) {
        output.WriteEnum(11, (int) Aggressor);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSendingTm) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, SendingTm);
        }
        if (HasSecurityId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SecurityId);
        }
        if (HasUpdateAction) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) UpdateAction);
        }
        if (HasEntryType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) EntryType);
        }
        if (HasIsImplied) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsImplied);
        }
        if (HasEntrySize) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, EntrySize);
        }
        if (HasEntryPx) {
          size += pb::CodedOutputStream.ComputeStringSize(7, EntryPx);
        }
        if (HasOrders) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Orders);
        }
        if (HasPriceLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, PriceLevel);
        }
        if (HasEntryTm) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, EntryTm);
        }
        if (HasAggressor) {
          size += pb::CodedOutputStream.ComputeEnumSize(11, (int) Aggressor);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CMEMarketData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CMEMarketData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CMEMarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CMEMarketData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMEMarketData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CMEMarketData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CMEMarketData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CMEMarketData result = new CMEMarketData();
      
      protected override CMEMarketData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CMEMarketData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.CMEMarketData.Descriptor; }
      }
      
      public override CMEMarketData DefaultInstanceForType {
        get { return global::quantmodel.CMEMarketData.DefaultInstance; }
      }
      
      public override CMEMarketData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CMEMarketData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CMEMarketData) {
          return MergeFrom((CMEMarketData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CMEMarketData other) {
        if (other == global::quantmodel.CMEMarketData.DefaultInstance) return this;
        if (other.HasSendingTm) {
          SendingTm = other.SendingTm;
        }
        if (other.HasSecurityId) {
          SecurityId = other.SecurityId;
        }
        if (other.HasUpdateAction) {
          UpdateAction = other.UpdateAction;
        }
        if (other.HasEntryType) {
          EntryType = other.EntryType;
        }
        if (other.HasIsImplied) {
          IsImplied = other.IsImplied;
        }
        if (other.HasEntrySize) {
          EntrySize = other.EntrySize;
        }
        if (other.HasEntryPx) {
          EntryPx = other.EntryPx;
        }
        if (other.HasOrders) {
          Orders = other.Orders;
        }
        if (other.HasPriceLevel) {
          PriceLevel = other.PriceLevel;
        }
        if (other.HasEntryTm) {
          EntryTm = other.EntryTm;
        }
        if (other.HasAggressor) {
          Aggressor = other.Aggressor;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              SendingTm = input.ReadUInt64();
              break;
            }
            case 16: {
              SecurityId = input.ReadUInt32();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.CMEMarketData.Types.UpdateAction), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                UpdateAction = (global::quantmodel.CMEMarketData.Types.UpdateAction) rawValue;
              }
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.CMEMarketData.Types.EntryType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                EntryType = (global::quantmodel.CMEMarketData.Types.EntryType) rawValue;
              }
              break;
            }
            case 40: {
              IsImplied = input.ReadBool();
              break;
            }
            case 48: {
              EntrySize = input.ReadInt32();
              break;
            }
            case 58: {
              EntryPx = input.ReadString();
              break;
            }
            case 64: {
              Orders = input.ReadUInt32();
              break;
            }
            case 72: {
              PriceLevel = input.ReadUInt32();
              break;
            }
            case 80: {
              EntryTm = input.ReadUInt32();
              break;
            }
            case 88: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.CMEMarketData.Types.AggressorType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong) rawValue);
              } else {
                Aggressor = (global::quantmodel.CMEMarketData.Types.AggressorType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasSendingTm {
        get { return result.HasSendingTm; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SendingTm {
        get { return result.SendingTm; }
        set { SetSendingTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendingTm(ulong value) {
        result.hasSendingTm = true;
        result.sendingTm_ = value;
        return this;
      }
      public Builder ClearSendingTm() {
        result.hasSendingTm = false;
        result.sendingTm_ = 0UL;
        return this;
      }
      
      public bool HasSecurityId {
        get { return result.HasSecurityId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SecurityId {
        get { return result.SecurityId; }
        set { SetSecurityId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSecurityId(uint value) {
        result.hasSecurityId = true;
        result.securityId_ = value;
        return this;
      }
      public Builder ClearSecurityId() {
        result.hasSecurityId = false;
        result.securityId_ = 0;
        return this;
      }
      
      public bool HasUpdateAction {
       get { return result.HasUpdateAction; }
      }
      public global::quantmodel.CMEMarketData.Types.UpdateAction UpdateAction {
        get { return result.UpdateAction; }
        set { SetUpdateAction(value); }
      }
      public Builder SetUpdateAction(global::quantmodel.CMEMarketData.Types.UpdateAction value) {
        result.hasUpdateAction = true;
        result.updateAction_ = value;
        return this;
      }
      public Builder ClearUpdateAction() {
        result.hasUpdateAction = false;
        result.updateAction_ = global::quantmodel.CMEMarketData.Types.UpdateAction.ADD;
        return this;
      }
      
      public bool HasEntryType {
       get { return result.HasEntryType; }
      }
      public global::quantmodel.CMEMarketData.Types.EntryType EntryType {
        get { return result.EntryType; }
        set { SetEntryType(value); }
      }
      public Builder SetEntryType(global::quantmodel.CMEMarketData.Types.EntryType value) {
        result.hasEntryType = true;
        result.entryType_ = value;
        return this;
      }
      public Builder ClearEntryType() {
        result.hasEntryType = false;
        result.entryType_ = global::quantmodel.CMEMarketData.Types.EntryType.BID;
        return this;
      }
      
      public bool HasIsImplied {
        get { return result.HasIsImplied; }
      }
      public bool IsImplied {
        get { return result.IsImplied; }
        set { SetIsImplied(value); }
      }
      public Builder SetIsImplied(bool value) {
        result.hasIsImplied = true;
        result.isImplied_ = value;
        return this;
      }
      public Builder ClearIsImplied() {
        result.hasIsImplied = false;
        result.isImplied_ = false;
        return this;
      }
      
      public bool HasEntrySize {
        get { return result.HasEntrySize; }
      }
      public int EntrySize {
        get { return result.EntrySize; }
        set { SetEntrySize(value); }
      }
      public Builder SetEntrySize(int value) {
        result.hasEntrySize = true;
        result.entrySize_ = value;
        return this;
      }
      public Builder ClearEntrySize() {
        result.hasEntrySize = false;
        result.entrySize_ = 0;
        return this;
      }
      
      public bool HasEntryPx {
        get { return result.HasEntryPx; }
      }
      public string EntryPx {
        get { return result.EntryPx; }
        set { SetEntryPx(value); }
      }
      public Builder SetEntryPx(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEntryPx = true;
        result.entryPx_ = value;
        return this;
      }
      public Builder ClearEntryPx() {
        result.hasEntryPx = false;
        result.entryPx_ = "0.0";
        return this;
      }
      
      public bool HasOrders {
        get { return result.HasOrders; }
      }
      [global::System.CLSCompliant(false)]
      public uint Orders {
        get { return result.Orders; }
        set { SetOrders(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOrders(uint value) {
        result.hasOrders = true;
        result.orders_ = value;
        return this;
      }
      public Builder ClearOrders() {
        result.hasOrders = false;
        result.orders_ = 0;
        return this;
      }
      
      public bool HasPriceLevel {
        get { return result.HasPriceLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint PriceLevel {
        get { return result.PriceLevel; }
        set { SetPriceLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPriceLevel(uint value) {
        result.hasPriceLevel = true;
        result.priceLevel_ = value;
        return this;
      }
      public Builder ClearPriceLevel() {
        result.hasPriceLevel = false;
        result.priceLevel_ = 0;
        return this;
      }
      
      public bool HasEntryTm {
        get { return result.HasEntryTm; }
      }
      [global::System.CLSCompliant(false)]
      public uint EntryTm {
        get { return result.EntryTm; }
        set { SetEntryTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntryTm(uint value) {
        result.hasEntryTm = true;
        result.entryTm_ = value;
        return this;
      }
      public Builder ClearEntryTm() {
        result.hasEntryTm = false;
        result.entryTm_ = 0;
        return this;
      }
      
      public bool HasAggressor {
       get { return result.HasAggressor; }
      }
      public global::quantmodel.CMEMarketData.Types.AggressorType Aggressor {
        get { return result.Aggressor; }
        set { SetAggressor(value); }
      }
      public Builder SetAggressor(global::quantmodel.CMEMarketData.Types.AggressorType value) {
        result.hasAggressor = true;
        result.aggressor_ = value;
        return this;
      }
      public Builder ClearAggressor() {
        result.hasAggressor = false;
        result.aggressor_ = global::quantmodel.CMEMarketData.Types.AggressorType.UNKNOWN;
        return this;
      }
    }
    static CMEMarketData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class FastEngineBroadcast : pb::GeneratedMessage<FastEngineBroadcast, FastEngineBroadcast.Builder> {
    private static readonly FastEngineBroadcast defaultInstance = new Builder().BuildPartial();
    public static FastEngineBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FastEngineBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FastEngineBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FastEngineBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FastEngineBroadcast, FastEngineBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FastEngineBroadcast__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum BroadcastType {
        CME = 1,
        ICE = 2,
        CBOE = 3,
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int BroadcastTypeFieldNumber = 2;
    private bool hasBroadcastType;
    private global::quantmodel.FastEngineBroadcast.Types.BroadcastType broadcastType_ = global::quantmodel.FastEngineBroadcast.Types.BroadcastType.CME;
    public bool HasBroadcastType {
      get { return hasBroadcastType; }
    }
    public global::quantmodel.FastEngineBroadcast.Types.BroadcastType BroadcastType {
      get { return broadcastType_; }
    }
    
    public const int CmeMarketDataFieldNumber = 3;
    private pbc::PopsicleList<global::quantmodel.CMEMarketData> cmeMarketData_ = new pbc::PopsicleList<global::quantmodel.CMEMarketData>();
    public scg::IList<global::quantmodel.CMEMarketData> CmeMarketDataList {
      get { return cmeMarketData_; }
    }
    public int CmeMarketDataCount {
      get { return cmeMarketData_.Count; }
    }
    public global::quantmodel.CMEMarketData GetCmeMarketData(int index) {
      return cmeMarketData_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestamp) return false;
        if (!hasBroadcastType) return false;
        foreach (global::quantmodel.CMEMarketData element in CmeMarketDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteString(1, Timestamp);
      }
      if (HasBroadcastType) {
        output.WriteEnum(2, (int) BroadcastType);
      }
      foreach (global::quantmodel.CMEMarketData element in CmeMarketDataList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Timestamp);
        }
        if (HasBroadcastType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) BroadcastType);
        }
        foreach (global::quantmodel.CMEMarketData element in CmeMarketDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FastEngineBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FastEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FastEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FastEngineBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FastEngineBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FastEngineBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FastEngineBroadcast result = new FastEngineBroadcast();
      
      protected override FastEngineBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FastEngineBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FastEngineBroadcast.Descriptor; }
      }
      
      public override FastEngineBroadcast DefaultInstanceForType {
        get { return global::quantmodel.FastEngineBroadcast.DefaultInstance; }
      }
      
      public override FastEngineBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.cmeMarketData_.MakeReadOnly();
        FastEngineBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FastEngineBroadcast) {
          return MergeFrom((FastEngineBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FastEngineBroadcast other) {
        if (other == global::quantmodel.FastEngineBroadcast.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasBroadcastType) {
          BroadcastType = other.BroadcastType;
        }
        if (other.cmeMarketData_.Count != 0) {
          base.AddRange(other.cmeMarketData_, result.cmeMarketData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Timestamp = input.ReadString();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.FastEngineBroadcast.Types.BroadcastType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                BroadcastType = (global::quantmodel.FastEngineBroadcast.Types.BroadcastType) rawValue;
              }
              break;
            }
            case 26: {
              global::quantmodel.CMEMarketData.Builder subBuilder = global::quantmodel.CMEMarketData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddCmeMarketData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasBroadcastType {
       get { return result.HasBroadcastType; }
      }
      public global::quantmodel.FastEngineBroadcast.Types.BroadcastType BroadcastType {
        get { return result.BroadcastType; }
        set { SetBroadcastType(value); }
      }
      public Builder SetBroadcastType(global::quantmodel.FastEngineBroadcast.Types.BroadcastType value) {
        result.hasBroadcastType = true;
        result.broadcastType_ = value;
        return this;
      }
      public Builder ClearBroadcastType() {
        result.hasBroadcastType = false;
        result.broadcastType_ = global::quantmodel.FastEngineBroadcast.Types.BroadcastType.CME;
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.CMEMarketData> CmeMarketDataList {
        get { return result.cmeMarketData_; }
      }
      public int CmeMarketDataCount {
        get { return result.CmeMarketDataCount; }
      }
      public global::quantmodel.CMEMarketData GetCmeMarketData(int index) {
        return result.GetCmeMarketData(index);
      }
      public Builder SetCmeMarketData(int index, global::quantmodel.CMEMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.cmeMarketData_[index] = value;
        return this;
      }
      public Builder SetCmeMarketData(int index, global::quantmodel.CMEMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.cmeMarketData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCmeMarketData(global::quantmodel.CMEMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.cmeMarketData_.Add(value);
        return this;
      }
      public Builder AddCmeMarketData(global::quantmodel.CMEMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.cmeMarketData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCmeMarketData(scg::IEnumerable<global::quantmodel.CMEMarketData> values) {
        base.AddRange(values, result.cmeMarketData_);
        return this;
      }
      public Builder ClearCmeMarketData() {
        result.cmeMarketData_.Clear();
        return this;
      }
    }
    static FastEngineBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class FixEngineBroadcast : pb::GeneratedMessage<FixEngineBroadcast, FixEngineBroadcast.Builder> {
    private static readonly FixEngineBroadcast defaultInstance = new Builder().BuildPartial();
    public static FixEngineBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FixEngineBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FixEngineBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FixEngineBroadcast, FixEngineBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineBroadcast__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int InstrumentIdFieldNumber = 2;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int FixMarketDataFieldNumber = 3;
    private pbc::PopsicleList<global::quantmodel.FixMarketData> fixMarketData_ = new pbc::PopsicleList<global::quantmodel.FixMarketData>();
    public scg::IList<global::quantmodel.FixMarketData> FixMarketDataList {
      get { return fixMarketData_; }
    }
    public int FixMarketDataCount {
      get { return fixMarketData_.Count; }
    }
    public global::quantmodel.FixMarketData GetFixMarketData(int index) {
      return fixMarketData_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTimestamp) {
        output.WriteString(1, Timestamp);
      }
      if (HasInstrumentId) {
        output.WriteString(2, InstrumentId);
      }
      foreach (global::quantmodel.FixMarketData element in FixMarketDataList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Timestamp);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentId);
        }
        foreach (global::quantmodel.FixMarketData element in FixMarketDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FixEngineBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FixEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FixEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FixEngineBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FixEngineBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FixEngineBroadcast result = new FixEngineBroadcast();
      
      protected override FixEngineBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FixEngineBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FixEngineBroadcast.Descriptor; }
      }
      
      public override FixEngineBroadcast DefaultInstanceForType {
        get { return global::quantmodel.FixEngineBroadcast.DefaultInstance; }
      }
      
      public override FixEngineBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.fixMarketData_.MakeReadOnly();
        FixEngineBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FixEngineBroadcast) {
          return MergeFrom((FixEngineBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FixEngineBroadcast other) {
        if (other == global::quantmodel.FixEngineBroadcast.DefaultInstance) return this;
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.fixMarketData_.Count != 0) {
          base.AddRange(other.fixMarketData_, result.fixMarketData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Timestamp = input.ReadString();
              break;
            }
            case 18: {
              InstrumentId = input.ReadString();
              break;
            }
            case 26: {
              global::quantmodel.FixMarketData.Builder subBuilder = global::quantmodel.FixMarketData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddFixMarketData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.FixMarketData> FixMarketDataList {
        get { return result.fixMarketData_; }
      }
      public int FixMarketDataCount {
        get { return result.FixMarketDataCount; }
      }
      public global::quantmodel.FixMarketData GetFixMarketData(int index) {
        return result.GetFixMarketData(index);
      }
      public Builder SetFixMarketData(int index, global::quantmodel.FixMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fixMarketData_[index] = value;
        return this;
      }
      public Builder SetFixMarketData(int index, global::quantmodel.FixMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fixMarketData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFixMarketData(global::quantmodel.FixMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fixMarketData_.Add(value);
        return this;
      }
      public Builder AddFixMarketData(global::quantmodel.FixMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fixMarketData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFixMarketData(scg::IEnumerable<global::quantmodel.FixMarketData> values) {
        base.AddRange(values, result.fixMarketData_);
        return this;
      }
      public Builder ClearFixMarketData() {
        result.fixMarketData_.Clear();
        return this;
      }
    }
    static FixEngineBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class MarketDataPriceData : pb::GeneratedMessage<MarketDataPriceData, MarketDataPriceData.Builder> {
    private static readonly MarketDataPriceData defaultInstance = new Builder().BuildPartial();
    public static MarketDataPriceData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataPriceData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MarketDataPriceData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataPriceData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataPriceData, MarketDataPriceData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataPriceData__FieldAccessorTable; }
    }
    
    public const int InstrumentIdFieldNumber = 1;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int LastPrcFieldNumber = 2;
    private bool hasLastPrc;
    private string lastPrc_ = "0.0";
    public bool HasLastPrc {
      get { return hasLastPrc; }
    }
    public string LastPrc {
      get { return lastPrc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInstrumentId) {
        output.WriteString(1, InstrumentId);
      }
      if (HasLastPrc) {
        output.WriteString(2, LastPrc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstrumentId);
        }
        if (HasLastPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(2, LastPrc);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarketDataPriceData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataPriceData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataPriceData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataPriceData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataPriceData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataPriceData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MarketDataPriceData result = new MarketDataPriceData();
      
      protected override MarketDataPriceData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MarketDataPriceData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.MarketDataPriceData.Descriptor; }
      }
      
      public override MarketDataPriceData DefaultInstanceForType {
        get { return global::quantmodel.MarketDataPriceData.DefaultInstance; }
      }
      
      public override MarketDataPriceData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        MarketDataPriceData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataPriceData) {
          return MergeFrom((MarketDataPriceData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataPriceData other) {
        if (other == global::quantmodel.MarketDataPriceData.DefaultInstance) return this;
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasLastPrc) {
          LastPrc = other.LastPrc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InstrumentId = input.ReadString();
              break;
            }
            case 18: {
              LastPrc = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasLastPrc {
        get { return result.HasLastPrc; }
      }
      public string LastPrc {
        get { return result.LastPrc; }
        set { SetLastPrc(value); }
      }
      public Builder SetLastPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLastPrc = true;
        result.lastPrc_ = value;
        return this;
      }
      public Builder ClearLastPrc() {
        result.hasLastPrc = false;
        result.lastPrc_ = "0.0";
        return this;
      }
    }
    static MarketDataPriceData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class MarketDataTradeData : pb::GeneratedMessage<MarketDataTradeData, MarketDataTradeData.Builder> {
    private static readonly MarketDataTradeData defaultInstance = new Builder().BuildPartial();
    public static MarketDataTradeData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataTradeData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MarketDataTradeData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataTradeData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataTradeData, MarketDataTradeData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataTradeData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum AggressorType {
        UNKNOWN = 0,
        BUY = 1,
        SELL = 2,
      }
      
    }
    #endregion
    
    public const int InstrumentIdFieldNumber = 1;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int AggressorFieldNumber = 2;
    private bool hasAggressor;
    private global::quantmodel.MarketDataTradeData.Types.AggressorType aggressor_ = global::quantmodel.MarketDataTradeData.Types.AggressorType.UNKNOWN;
    public bool HasAggressor {
      get { return hasAggressor; }
    }
    public global::quantmodel.MarketDataTradeData.Types.AggressorType Aggressor {
      get { return aggressor_; }
    }
    
    public const int TradePrcFieldNumber = 3;
    private bool hasTradePrc;
    private string tradePrc_ = "0.0";
    public bool HasTradePrc {
      get { return hasTradePrc; }
    }
    public string TradePrc {
      get { return tradePrc_; }
    }
    
    public const int TradeQtyFieldNumber = 4;
    private bool hasTradeQty;
    private int tradeQty_ = 0;
    public bool HasTradeQty {
      get { return hasTradeQty; }
    }
    public int TradeQty {
      get { return tradeQty_; }
    }
    
    public const int EntryTmFieldNumber = 5;
    private bool hasEntryTm;
    private uint entryTm_ = 0;
    public bool HasEntryTm {
      get { return hasEntryTm; }
    }
    [global::System.CLSCompliant(false)]
    public uint EntryTm {
      get { return entryTm_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInstrumentId) {
        output.WriteString(1, InstrumentId);
      }
      if (HasAggressor) {
        output.WriteEnum(2, (int) Aggressor);
      }
      if (HasTradePrc) {
        output.WriteString(3, TradePrc);
      }
      if (HasTradeQty) {
        output.WriteInt32(4, TradeQty);
      }
      if (HasEntryTm) {
        output.WriteUInt32(5, EntryTm);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstrumentId);
        }
        if (HasAggressor) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Aggressor);
        }
        if (HasTradePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, TradePrc);
        }
        if (HasTradeQty) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, TradeQty);
        }
        if (HasEntryTm) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, EntryTm);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarketDataTradeData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataTradeData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataTradeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataTradeData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataTradeData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataTradeData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MarketDataTradeData result = new MarketDataTradeData();
      
      protected override MarketDataTradeData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MarketDataTradeData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.MarketDataTradeData.Descriptor; }
      }
      
      public override MarketDataTradeData DefaultInstanceForType {
        get { return global::quantmodel.MarketDataTradeData.DefaultInstance; }
      }
      
      public override MarketDataTradeData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        MarketDataTradeData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataTradeData) {
          return MergeFrom((MarketDataTradeData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataTradeData other) {
        if (other == global::quantmodel.MarketDataTradeData.DefaultInstance) return this;
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasAggressor) {
          Aggressor = other.Aggressor;
        }
        if (other.HasTradePrc) {
          TradePrc = other.TradePrc;
        }
        if (other.HasTradeQty) {
          TradeQty = other.TradeQty;
        }
        if (other.HasEntryTm) {
          EntryTm = other.EntryTm;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InstrumentId = input.ReadString();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.MarketDataTradeData.Types.AggressorType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                Aggressor = (global::quantmodel.MarketDataTradeData.Types.AggressorType) rawValue;
              }
              break;
            }
            case 26: {
              TradePrc = input.ReadString();
              break;
            }
            case 32: {
              TradeQty = input.ReadInt32();
              break;
            }
            case 40: {
              EntryTm = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasAggressor {
       get { return result.HasAggressor; }
      }
      public global::quantmodel.MarketDataTradeData.Types.AggressorType Aggressor {
        get { return result.Aggressor; }
        set { SetAggressor(value); }
      }
      public Builder SetAggressor(global::quantmodel.MarketDataTradeData.Types.AggressorType value) {
        result.hasAggressor = true;
        result.aggressor_ = value;
        return this;
      }
      public Builder ClearAggressor() {
        result.hasAggressor = false;
        result.aggressor_ = global::quantmodel.MarketDataTradeData.Types.AggressorType.UNKNOWN;
        return this;
      }
      
      public bool HasTradePrc {
        get { return result.HasTradePrc; }
      }
      public string TradePrc {
        get { return result.TradePrc; }
        set { SetTradePrc(value); }
      }
      public Builder SetTradePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTradePrc = true;
        result.tradePrc_ = value;
        return this;
      }
      public Builder ClearTradePrc() {
        result.hasTradePrc = false;
        result.tradePrc_ = "0.0";
        return this;
      }
      
      public bool HasTradeQty {
        get { return result.HasTradeQty; }
      }
      public int TradeQty {
        get { return result.TradeQty; }
        set { SetTradeQty(value); }
      }
      public Builder SetTradeQty(int value) {
        result.hasTradeQty = true;
        result.tradeQty_ = value;
        return this;
      }
      public Builder ClearTradeQty() {
        result.hasTradeQty = false;
        result.tradeQty_ = 0;
        return this;
      }
      
      public bool HasEntryTm {
        get { return result.HasEntryTm; }
      }
      [global::System.CLSCompliant(false)]
      public uint EntryTm {
        get { return result.EntryTm; }
        set { SetEntryTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntryTm(uint value) {
        result.hasEntryTm = true;
        result.entryTm_ = value;
        return this;
      }
      public Builder ClearEntryTm() {
        result.hasEntryTm = false;
        result.entryTm_ = 0;
        return this;
      }
    }
    static MarketDataTradeData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class MarketDataQuoteData : pb::GeneratedMessage<MarketDataQuoteData, MarketDataQuoteData.Builder> {
    private static readonly MarketDataQuoteData defaultInstance = new Builder().BuildPartial();
    public static MarketDataQuoteData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataQuoteData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MarketDataQuoteData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataQuoteData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataQuoteData, MarketDataQuoteData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataQuoteData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum QuoteType {
        BID = 1,
        ASK = 2,
      }
      
    }
    #endregion
    
    public const int InstrumentIdFieldNumber = 1;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::quantmodel.MarketDataQuoteData.Types.QuoteType type_ = global::quantmodel.MarketDataQuoteData.Types.QuoteType.BID;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.MarketDataQuoteData.Types.QuoteType Type {
      get { return type_; }
    }
    
    public const int QuotePrcFieldNumber = 3;
    private bool hasQuotePrc;
    private string quotePrc_ = "0.0";
    public bool HasQuotePrc {
      get { return hasQuotePrc; }
    }
    public string QuotePrc {
      get { return quotePrc_; }
    }
    
    public const int QuoteQtyFieldNumber = 4;
    private bool hasQuoteQty;
    private int quoteQty_ = 0;
    public bool HasQuoteQty {
      get { return hasQuoteQty; }
    }
    public int QuoteQty {
      get { return quoteQty_; }
    }
    
    public const int LevelFieldNumber = 5;
    private bool hasLevel;
    private int level_ = 0;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInstrumentId) {
        output.WriteString(1, InstrumentId);
      }
      if (HasType) {
        output.WriteEnum(2, (int) Type);
      }
      if (HasQuotePrc) {
        output.WriteString(3, QuotePrc);
      }
      if (HasQuoteQty) {
        output.WriteInt32(4, QuoteQty);
      }
      if (HasLevel) {
        output.WriteInt32(5, Level);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstrumentId);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (HasQuotePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, QuotePrc);
        }
        if (HasQuoteQty) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, QuoteQty);
        }
        if (HasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Level);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarketDataQuoteData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataQuoteData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataQuoteData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataQuoteData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataQuoteData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataQuoteData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MarketDataQuoteData result = new MarketDataQuoteData();
      
      protected override MarketDataQuoteData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MarketDataQuoteData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.MarketDataQuoteData.Descriptor; }
      }
      
      public override MarketDataQuoteData DefaultInstanceForType {
        get { return global::quantmodel.MarketDataQuoteData.DefaultInstance; }
      }
      
      public override MarketDataQuoteData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        MarketDataQuoteData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataQuoteData) {
          return MergeFrom((MarketDataQuoteData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataQuoteData other) {
        if (other == global::quantmodel.MarketDataQuoteData.DefaultInstance) return this;
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasQuotePrc) {
          QuotePrc = other.QuotePrc;
        }
        if (other.HasQuoteQty) {
          QuoteQty = other.QuoteQty;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InstrumentId = input.ReadString();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.MarketDataQuoteData.Types.QuoteType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.MarketDataQuoteData.Types.QuoteType) rawValue;
              }
              break;
            }
            case 26: {
              QuotePrc = input.ReadString();
              break;
            }
            case 32: {
              QuoteQty = input.ReadInt32();
              break;
            }
            case 40: {
              Level = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.MarketDataQuoteData.Types.QuoteType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.MarketDataQuoteData.Types.QuoteType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.MarketDataQuoteData.Types.QuoteType.BID;
        return this;
      }
      
      public bool HasQuotePrc {
        get { return result.HasQuotePrc; }
      }
      public string QuotePrc {
        get { return result.QuotePrc; }
        set { SetQuotePrc(value); }
      }
      public Builder SetQuotePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasQuotePrc = true;
        result.quotePrc_ = value;
        return this;
      }
      public Builder ClearQuotePrc() {
        result.hasQuotePrc = false;
        result.quotePrc_ = "0.0";
        return this;
      }
      
      public bool HasQuoteQty {
        get { return result.HasQuoteQty; }
      }
      public int QuoteQty {
        get { return result.QuoteQty; }
        set { SetQuoteQty(value); }
      }
      public Builder SetQuoteQty(int value) {
        result.hasQuoteQty = true;
        result.quoteQty_ = value;
        return this;
      }
      public Builder ClearQuoteQty() {
        result.hasQuoteQty = false;
        result.quoteQty_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.HasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static MarketDataQuoteData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class MarketDataBroadcast : pb::GeneratedMessage<MarketDataBroadcast, MarketDataBroadcast.Builder> {
    private static readonly MarketDataBroadcast defaultInstance = new Builder().BuildPartial();
    public static MarketDataBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MarketDataBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataBroadcast, MarketDataBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_MarketDataBroadcast__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum BroadcastType {
        PRICE = 1,
        TRADE = 2,
        QUOTE = 3,
      }
      
    }
    #endregion
    
    public const int BroadcastIdFieldNumber = 1;
    private bool hasBroadcastId;
    private string broadcastId_ = "";
    public bool HasBroadcastId {
      get { return hasBroadcastId; }
    }
    public string BroadcastId {
      get { return broadcastId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::quantmodel.MarketDataBroadcast.Types.BroadcastType type_ = global::quantmodel.MarketDataBroadcast.Types.BroadcastType.PRICE;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.MarketDataBroadcast.Types.BroadcastType Type {
      get { return type_; }
    }
    
    public const int PriceDataFieldNumber = 5;
    private pbc::PopsicleList<global::quantmodel.MarketDataPriceData> priceData_ = new pbc::PopsicleList<global::quantmodel.MarketDataPriceData>();
    public scg::IList<global::quantmodel.MarketDataPriceData> PriceDataList {
      get { return priceData_; }
    }
    public int PriceDataCount {
      get { return priceData_.Count; }
    }
    public global::quantmodel.MarketDataPriceData GetPriceData(int index) {
      return priceData_[index];
    }
    
    public const int TradeDataFieldNumber = 6;
    private pbc::PopsicleList<global::quantmodel.MarketDataTradeData> tradeData_ = new pbc::PopsicleList<global::quantmodel.MarketDataTradeData>();
    public scg::IList<global::quantmodel.MarketDataTradeData> TradeDataList {
      get { return tradeData_; }
    }
    public int TradeDataCount {
      get { return tradeData_.Count; }
    }
    public global::quantmodel.MarketDataTradeData GetTradeData(int index) {
      return tradeData_[index];
    }
    
    public const int QuoteDataFieldNumber = 7;
    private pbc::PopsicleList<global::quantmodel.MarketDataQuoteData> quoteData_ = new pbc::PopsicleList<global::quantmodel.MarketDataQuoteData>();
    public scg::IList<global::quantmodel.MarketDataQuoteData> QuoteDataList {
      get { return quoteData_; }
    }
    public int QuoteDataCount {
      get { return quoteData_.Count; }
    }
    public global::quantmodel.MarketDataQuoteData GetQuoteData(int index) {
      return quoteData_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBroadcastId) {
        output.WriteString(1, BroadcastId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      foreach (global::quantmodel.MarketDataPriceData element in PriceDataList) {
        output.WriteMessage(5, element);
      }
      foreach (global::quantmodel.MarketDataTradeData element in TradeDataList) {
        output.WriteMessage(6, element);
      }
      foreach (global::quantmodel.MarketDataQuoteData element in QuoteDataList) {
        output.WriteMessage(7, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBroadcastId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BroadcastId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        foreach (global::quantmodel.MarketDataPriceData element in PriceDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::quantmodel.MarketDataTradeData element in TradeDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::quantmodel.MarketDataQuoteData element in QuoteDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarketDataBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MarketDataBroadcast result = new MarketDataBroadcast();
      
      protected override MarketDataBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MarketDataBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.MarketDataBroadcast.Descriptor; }
      }
      
      public override MarketDataBroadcast DefaultInstanceForType {
        get { return global::quantmodel.MarketDataBroadcast.DefaultInstance; }
      }
      
      public override MarketDataBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.priceData_.MakeReadOnly();
        result.tradeData_.MakeReadOnly();
        result.quoteData_.MakeReadOnly();
        MarketDataBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataBroadcast) {
          return MergeFrom((MarketDataBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataBroadcast other) {
        if (other == global::quantmodel.MarketDataBroadcast.DefaultInstance) return this;
        if (other.HasBroadcastId) {
          BroadcastId = other.BroadcastId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.priceData_.Count != 0) {
          base.AddRange(other.priceData_, result.priceData_);
        }
        if (other.tradeData_.Count != 0) {
          base.AddRange(other.tradeData_, result.tradeData_);
        }
        if (other.quoteData_.Count != 0) {
          base.AddRange(other.quoteData_, result.quoteData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              BroadcastId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.MarketDataBroadcast.Types.BroadcastType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.MarketDataBroadcast.Types.BroadcastType) rawValue;
              }
              break;
            }
            case 42: {
              global::quantmodel.MarketDataPriceData.Builder subBuilder = global::quantmodel.MarketDataPriceData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPriceData(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::quantmodel.MarketDataTradeData.Builder subBuilder = global::quantmodel.MarketDataTradeData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddTradeData(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              global::quantmodel.MarketDataQuoteData.Builder subBuilder = global::quantmodel.MarketDataQuoteData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddQuoteData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasBroadcastId {
        get { return result.HasBroadcastId; }
      }
      public string BroadcastId {
        get { return result.BroadcastId; }
        set { SetBroadcastId(value); }
      }
      public Builder SetBroadcastId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBroadcastId = true;
        result.broadcastId_ = value;
        return this;
      }
      public Builder ClearBroadcastId() {
        result.hasBroadcastId = false;
        result.broadcastId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.MarketDataBroadcast.Types.BroadcastType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.MarketDataBroadcast.Types.BroadcastType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.MarketDataBroadcast.Types.BroadcastType.PRICE;
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.MarketDataPriceData> PriceDataList {
        get { return result.priceData_; }
      }
      public int PriceDataCount {
        get { return result.PriceDataCount; }
      }
      public global::quantmodel.MarketDataPriceData GetPriceData(int index) {
        return result.GetPriceData(index);
      }
      public Builder SetPriceData(int index, global::quantmodel.MarketDataPriceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.priceData_[index] = value;
        return this;
      }
      public Builder SetPriceData(int index, global::quantmodel.MarketDataPriceData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.priceData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPriceData(global::quantmodel.MarketDataPriceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.priceData_.Add(value);
        return this;
      }
      public Builder AddPriceData(global::quantmodel.MarketDataPriceData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.priceData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePriceData(scg::IEnumerable<global::quantmodel.MarketDataPriceData> values) {
        base.AddRange(values, result.priceData_);
        return this;
      }
      public Builder ClearPriceData() {
        result.priceData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.MarketDataTradeData> TradeDataList {
        get { return result.tradeData_; }
      }
      public int TradeDataCount {
        get { return result.TradeDataCount; }
      }
      public global::quantmodel.MarketDataTradeData GetTradeData(int index) {
        return result.GetTradeData(index);
      }
      public Builder SetTradeData(int index, global::quantmodel.MarketDataTradeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.tradeData_[index] = value;
        return this;
      }
      public Builder SetTradeData(int index, global::quantmodel.MarketDataTradeData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.tradeData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTradeData(global::quantmodel.MarketDataTradeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.tradeData_.Add(value);
        return this;
      }
      public Builder AddTradeData(global::quantmodel.MarketDataTradeData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.tradeData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTradeData(scg::IEnumerable<global::quantmodel.MarketDataTradeData> values) {
        base.AddRange(values, result.tradeData_);
        return this;
      }
      public Builder ClearTradeData() {
        result.tradeData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.MarketDataQuoteData> QuoteDataList {
        get { return result.quoteData_; }
      }
      public int QuoteDataCount {
        get { return result.QuoteDataCount; }
      }
      public global::quantmodel.MarketDataQuoteData GetQuoteData(int index) {
        return result.GetQuoteData(index);
      }
      public Builder SetQuoteData(int index, global::quantmodel.MarketDataQuoteData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.quoteData_[index] = value;
        return this;
      }
      public Builder SetQuoteData(int index, global::quantmodel.MarketDataQuoteData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.quoteData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuoteData(global::quantmodel.MarketDataQuoteData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.quoteData_.Add(value);
        return this;
      }
      public Builder AddQuoteData(global::quantmodel.MarketDataQuoteData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.quoteData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuoteData(scg::IEnumerable<global::quantmodel.MarketDataQuoteData> values) {
        base.AddRange(values, result.quoteData_);
        return this;
      }
      public Builder ClearQuoteData() {
        result.quoteData_.Clear();
        return this;
      }
    }
    static MarketDataBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class HeartbeatData : pb::GeneratedMessage<HeartbeatData, HeartbeatData.Builder> {
    private static readonly HeartbeatData defaultInstance = new Builder().BuildPartial();
    public static HeartbeatData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeartbeatData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeartbeatData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_HeartbeatData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeartbeatData, HeartbeatData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_HeartbeatData__FieldAccessorTable; }
    }
    
    public const int HeartbeatIdFieldNumber = 1;
    private bool hasHeartbeatId;
    private string heartbeatId_ = "";
    public bool HasHeartbeatId {
      get { return hasHeartbeatId; }
    }
    public string HeartbeatId {
      get { return heartbeatId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHeartbeatId) {
        output.WriteString(1, HeartbeatId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHeartbeatId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, HeartbeatId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeartbeatData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeartbeatData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeartbeatData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeartbeatData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartbeatData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeartbeatData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeartbeatData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeartbeatData result = new HeartbeatData();
      
      protected override HeartbeatData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeartbeatData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.HeartbeatData.Descriptor; }
      }
      
      public override HeartbeatData DefaultInstanceForType {
        get { return global::quantmodel.HeartbeatData.DefaultInstance; }
      }
      
      public override HeartbeatData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        HeartbeatData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeartbeatData) {
          return MergeFrom((HeartbeatData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeartbeatData other) {
        if (other == global::quantmodel.HeartbeatData.DefaultInstance) return this;
        if (other.HasHeartbeatId) {
          HeartbeatId = other.HeartbeatId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              HeartbeatId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasHeartbeatId {
        get { return result.HasHeartbeatId; }
      }
      public string HeartbeatId {
        get { return result.HeartbeatId; }
        set { SetHeartbeatId(value); }
      }
      public Builder SetHeartbeatId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeartbeatId = true;
        result.heartbeatId_ = value;
        return this;
      }
      public Builder ClearHeartbeatId() {
        result.hasHeartbeatId = false;
        result.heartbeatId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
    }
    static HeartbeatData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class FixEngineData : pb::GeneratedMessage<FixEngineData, FixEngineData.Builder> {
    private static readonly FixEngineData defaultInstance = new Builder().BuildPartial();
    public static FixEngineData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FixEngineData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FixEngineData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FixEngineData, FixEngineData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineData__FieldAccessorTable; }
    }
    
    public const int FixEngineIdFieldNumber = 1;
    private bool hasFixEngineId;
    private string fixEngineId_ = "";
    public bool HasFixEngineId {
      get { return hasFixEngineId; }
    }
    public string FixEngineId {
      get { return fixEngineId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFixEngineId) {
        output.WriteString(1, FixEngineId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFixEngineId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FixEngineId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FixEngineData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FixEngineData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FixEngineData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FixEngineData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FixEngineData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FixEngineData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FixEngineData result = new FixEngineData();
      
      protected override FixEngineData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FixEngineData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FixEngineData.Descriptor; }
      }
      
      public override FixEngineData DefaultInstanceForType {
        get { return global::quantmodel.FixEngineData.DefaultInstance; }
      }
      
      public override FixEngineData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        FixEngineData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FixEngineData) {
          return MergeFrom((FixEngineData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FixEngineData other) {
        if (other == global::quantmodel.FixEngineData.DefaultInstance) return this;
        if (other.HasFixEngineId) {
          FixEngineId = other.FixEngineId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              FixEngineId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasFixEngineId {
        get { return result.HasFixEngineId; }
      }
      public string FixEngineId {
        get { return result.FixEngineId; }
        set { SetFixEngineId(value); }
      }
      public Builder SetFixEngineId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFixEngineId = true;
        result.fixEngineId_ = value;
        return this;
      }
      public Builder ClearFixEngineId() {
        result.hasFixEngineId = false;
        result.fixEngineId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static FixEngineData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class SystemParameterData : pb::GeneratedMessage<SystemParameterData, SystemParameterData.Builder> {
    private static readonly SystemParameterData defaultInstance = new Builder().BuildPartial();
    public static SystemParameterData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SystemParameterData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SystemParameterData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_SystemParameterData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SystemParameterData, SystemParameterData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_SystemParameterData__FieldAccessorTable; }
    }
    
    public const int ParameterIdFieldNumber = 1;
    private bool hasParameterId;
    private string parameterId_ = "";
    public bool HasParameterId {
      get { return hasParameterId; }
    }
    public string ParameterId {
      get { return parameterId_; }
    }
    
    public const int CategoryFieldNumber = 2;
    private bool hasCategory;
    private string category_ = "";
    public bool HasCategory {
      get { return hasCategory; }
    }
    public string Category {
      get { return category_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 4;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasParameterId) {
        output.WriteString(1, ParameterId);
      }
      if (HasCategory) {
        output.WriteString(2, Category);
      }
      if (HasName) {
        output.WriteString(3, Name);
      }
      if (HasValue) {
        output.WriteString(4, Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasParameterId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ParameterId);
        }
        if (HasCategory) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Category);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (HasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SystemParameterData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SystemParameterData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SystemParameterData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SystemParameterData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SystemParameterData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SystemParameterData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SystemParameterData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SystemParameterData result = new SystemParameterData();
      
      protected override SystemParameterData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SystemParameterData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.SystemParameterData.Descriptor; }
      }
      
      public override SystemParameterData DefaultInstanceForType {
        get { return global::quantmodel.SystemParameterData.DefaultInstance; }
      }
      
      public override SystemParameterData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SystemParameterData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SystemParameterData) {
          return MergeFrom((SystemParameterData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SystemParameterData other) {
        if (other == global::quantmodel.SystemParameterData.DefaultInstance) return this;
        if (other.HasParameterId) {
          ParameterId = other.ParameterId;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ParameterId = input.ReadString();
              break;
            }
            case 18: {
              Category = input.ReadString();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 34: {
              Value = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasParameterId {
        get { return result.HasParameterId; }
      }
      public string ParameterId {
        get { return result.ParameterId; }
        set { SetParameterId(value); }
      }
      public Builder SetParameterId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasParameterId = true;
        result.parameterId_ = value;
        return this;
      }
      public Builder ClearParameterId() {
        result.hasParameterId = false;
        result.parameterId_ = "";
        return this;
      }
      
      public bool HasCategory {
        get { return result.HasCategory; }
      }
      public string Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        result.hasCategory = false;
        result.category_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.HasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static SystemParameterData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class PositionOvernightData : pb::GeneratedMessage<PositionOvernightData, PositionOvernightData.Builder> {
    private static readonly PositionOvernightData defaultInstance = new Builder().BuildPartial();
    public static PositionOvernightData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PositionOvernightData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PositionOvernightData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_PositionOvernightData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PositionOvernightData, PositionOvernightData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_PositionOvernightData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum PositionType {
        CLOSED = 0,
        LONG = 1,
        SHORT = 2,
      }
      
    }
    #endregion
    
    public const int PositionOvernightIdFieldNumber = 1;
    private bool hasPositionOvernightId;
    private string positionOvernightId_ = "";
    public bool HasPositionOvernightId {
      get { return hasPositionOvernightId; }
    }
    public string PositionOvernightId {
      get { return positionOvernightId_; }
    }
    
    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int InstrumentIdFieldNumber = 3;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 4;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int PositionTypeFieldNumber = 5;
    private bool hasPositionType;
    private global::quantmodel.PositionOvernightData.Types.PositionType positionType_ = global::quantmodel.PositionOvernightData.Types.PositionType.CLOSED;
    public bool HasPositionType {
      get { return hasPositionType; }
    }
    public global::quantmodel.PositionOvernightData.Types.PositionType PositionType {
      get { return positionType_; }
    }
    
    public const int OpenPosFieldNumber = 6;
    private bool hasOpenPos;
    private string openPos_ = "0";
    public bool HasOpenPos {
      get { return hasOpenPos; }
    }
    public string OpenPos {
      get { return openPos_; }
    }
    
    public const int OpenPrcFieldNumber = 7;
    private bool hasOpenPrc;
    private string openPrc_ = "0";
    public bool HasOpenPrc {
      get { return hasOpenPrc; }
    }
    public string OpenPrc {
      get { return openPrc_; }
    }
    
    public const int IsActiveFieldNumber = 8;
    private bool hasIsActive;
    private string isActive_ = "";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public const int AddedDatetimeFieldNumber = 9;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 10;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 11;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 12;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasPositionOvernightId) {
        output.WriteString(1, PositionOvernightId);
      }
      if (HasAccountId) {
        output.WriteString(2, AccountId);
      }
      if (HasInstrumentId) {
        output.WriteString(3, InstrumentId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(4, InvestmentSystemId);
      }
      if (HasPositionType) {
        output.WriteEnum(5, (int) PositionType);
      }
      if (HasOpenPos) {
        output.WriteString(6, OpenPos);
      }
      if (HasOpenPrc) {
        output.WriteString(7, OpenPrc);
      }
      if (HasIsActive) {
        output.WriteString(8, IsActive);
      }
      if (HasAddedDatetime) {
        output.WriteString(9, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(10, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(11, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(12, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasPositionOvernightId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PositionOvernightId);
        }
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AccountId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InstrumentId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InvestmentSystemId);
        }
        if (HasPositionType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) PositionType);
        }
        if (HasOpenPos) {
          size += pb::CodedOutputStream.ComputeStringSize(6, OpenPos);
        }
        if (HasOpenPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OpenPrc);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(8, IsActive);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(9, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(10, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(12, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PositionOvernightData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PositionOvernightData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PositionOvernightData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PositionOvernightData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PositionOvernightData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PositionOvernightData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PositionOvernightData result = new PositionOvernightData();
      
      protected override PositionOvernightData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PositionOvernightData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.PositionOvernightData.Descriptor; }
      }
      
      public override PositionOvernightData DefaultInstanceForType {
        get { return global::quantmodel.PositionOvernightData.DefaultInstance; }
      }
      
      public override PositionOvernightData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PositionOvernightData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PositionOvernightData) {
          return MergeFrom((PositionOvernightData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PositionOvernightData other) {
        if (other == global::quantmodel.PositionOvernightData.DefaultInstance) return this;
        if (other.HasPositionOvernightId) {
          PositionOvernightId = other.PositionOvernightId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasPositionType) {
          PositionType = other.PositionType;
        }
        if (other.HasOpenPos) {
          OpenPos = other.OpenPos;
        }
        if (other.HasOpenPrc) {
          OpenPrc = other.OpenPrc;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              PositionOvernightId = input.ReadString();
              break;
            }
            case 18: {
              AccountId = input.ReadString();
              break;
            }
            case 26: {
              InstrumentId = input.ReadString();
              break;
            }
            case 34: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 40: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.PositionOvernightData.Types.PositionType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong) rawValue);
              } else {
                PositionType = (global::quantmodel.PositionOvernightData.Types.PositionType) rawValue;
              }
              break;
            }
            case 50: {
              OpenPos = input.ReadString();
              break;
            }
            case 58: {
              OpenPrc = input.ReadString();
              break;
            }
            case 66: {
              IsActive = input.ReadString();
              break;
            }
            case 74: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 82: {
              AddedBy = input.ReadString();
              break;
            }
            case 90: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 98: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasPositionOvernightId {
        get { return result.HasPositionOvernightId; }
      }
      public string PositionOvernightId {
        get { return result.PositionOvernightId; }
        set { SetPositionOvernightId(value); }
      }
      public Builder SetPositionOvernightId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPositionOvernightId = true;
        result.positionOvernightId_ = value;
        return this;
      }
      public Builder ClearPositionOvernightId() {
        result.hasPositionOvernightId = false;
        result.positionOvernightId_ = "";
        return this;
      }
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasPositionType {
       get { return result.HasPositionType; }
      }
      public global::quantmodel.PositionOvernightData.Types.PositionType PositionType {
        get { return result.PositionType; }
        set { SetPositionType(value); }
      }
      public Builder SetPositionType(global::quantmodel.PositionOvernightData.Types.PositionType value) {
        result.hasPositionType = true;
        result.positionType_ = value;
        return this;
      }
      public Builder ClearPositionType() {
        result.hasPositionType = false;
        result.positionType_ = global::quantmodel.PositionOvernightData.Types.PositionType.CLOSED;
        return this;
      }
      
      public bool HasOpenPos {
        get { return result.HasOpenPos; }
      }
      public string OpenPos {
        get { return result.OpenPos; }
        set { SetOpenPos(value); }
      }
      public Builder SetOpenPos(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpenPos = true;
        result.openPos_ = value;
        return this;
      }
      public Builder ClearOpenPos() {
        result.hasOpenPos = false;
        result.openPos_ = "0";
        return this;
      }
      
      public bool HasOpenPrc {
        get { return result.HasOpenPrc; }
      }
      public string OpenPrc {
        get { return result.OpenPrc; }
        set { SetOpenPrc(value); }
      }
      public Builder SetOpenPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpenPrc = true;
        result.openPrc_ = value;
        return this;
      }
      public Builder ClearOpenPrc() {
        result.hasOpenPrc = false;
        result.openPrc_ = "0";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static PositionOvernightData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class AccountLimitData : pb::GeneratedMessage<AccountLimitData, AccountLimitData.Builder> {
    private static readonly AccountLimitData defaultInstance = new Builder().BuildPartial();
    public static AccountLimitData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountLimitData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AccountLimitData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountLimitData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountLimitData, AccountLimitData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountLimitData__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int SymbolFieldNumber = 2;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int SecurityExchangeFieldNumber = 3;
    private bool hasSecurityExchange;
    private string securityExchange_ = "";
    public bool HasSecurityExchange {
      get { return hasSecurityExchange; }
    }
    public string SecurityExchange {
      get { return securityExchange_; }
    }
    
    public const int SessionIdFieldNumber = 4;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int MaxOpenLongQtyFieldNumber = 5;
    private bool hasMaxOpenLongQty;
    private string maxOpenLongQty_ = "0";
    public bool HasMaxOpenLongQty {
      get { return hasMaxOpenLongQty; }
    }
    public string MaxOpenLongQty {
      get { return maxOpenLongQty_; }
    }
    
    public const int MaxOpenShortQtyFieldNumber = 6;
    private bool hasMaxOpenShortQty;
    private string maxOpenShortQty_ = "0";
    public bool HasMaxOpenShortQty {
      get { return hasMaxOpenShortQty; }
    }
    public string MaxOpenShortQty {
      get { return maxOpenShortQty_; }
    }
    
    public const int MaxReleaseQtyFieldNumber = 7;
    private bool hasMaxReleaseQty;
    private string maxReleaseQty_ = "0";
    public bool HasMaxReleaseQty {
      get { return hasMaxReleaseQty; }
    }
    public string MaxReleaseQty {
      get { return maxReleaseQty_; }
    }
    
    public const int IsActiveFieldNumber = 8;
    private bool hasIsActive;
    private string isActive_ = "0";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public const int AddedDatetimeFieldNumber = 9;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 10;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 11;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 12;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteString(1, AccountId);
      }
      if (HasSymbol) {
        output.WriteString(2, Symbol);
      }
      if (HasSecurityExchange) {
        output.WriteString(3, SecurityExchange);
      }
      if (HasSessionId) {
        output.WriteString(4, SessionId);
      }
      if (HasMaxOpenLongQty) {
        output.WriteString(5, MaxOpenLongQty);
      }
      if (HasMaxOpenShortQty) {
        output.WriteString(6, MaxOpenShortQty);
      }
      if (HasMaxReleaseQty) {
        output.WriteString(7, MaxReleaseQty);
      }
      if (HasIsActive) {
        output.WriteString(8, IsActive);
      }
      if (HasAddedDatetime) {
        output.WriteString(9, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(10, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(11, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(12, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AccountId);
        }
        if (HasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Symbol);
        }
        if (HasSecurityExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SecurityExchange);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SessionId);
        }
        if (HasMaxOpenLongQty) {
          size += pb::CodedOutputStream.ComputeStringSize(5, MaxOpenLongQty);
        }
        if (HasMaxOpenShortQty) {
          size += pb::CodedOutputStream.ComputeStringSize(6, MaxOpenShortQty);
        }
        if (HasMaxReleaseQty) {
          size += pb::CodedOutputStream.ComputeStringSize(7, MaxReleaseQty);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(8, IsActive);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(9, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(10, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(12, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountLimitData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountLimitData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountLimitData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountLimitData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLimitData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountLimitData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AccountLimitData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AccountLimitData result = new AccountLimitData();
      
      protected override AccountLimitData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AccountLimitData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.AccountLimitData.Descriptor; }
      }
      
      public override AccountLimitData DefaultInstanceForType {
        get { return global::quantmodel.AccountLimitData.DefaultInstance; }
      }
      
      public override AccountLimitData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AccountLimitData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountLimitData) {
          return MergeFrom((AccountLimitData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountLimitData other) {
        if (other == global::quantmodel.AccountLimitData.DefaultInstance) return this;
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasSecurityExchange) {
          SecurityExchange = other.SecurityExchange;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasMaxOpenLongQty) {
          MaxOpenLongQty = other.MaxOpenLongQty;
        }
        if (other.HasMaxOpenShortQty) {
          MaxOpenShortQty = other.MaxOpenShortQty;
        }
        if (other.HasMaxReleaseQty) {
          MaxReleaseQty = other.MaxReleaseQty;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              AccountId = input.ReadString();
              break;
            }
            case 18: {
              Symbol = input.ReadString();
              break;
            }
            case 26: {
              SecurityExchange = input.ReadString();
              break;
            }
            case 34: {
              SessionId = input.ReadString();
              break;
            }
            case 42: {
              MaxOpenLongQty = input.ReadString();
              break;
            }
            case 50: {
              MaxOpenShortQty = input.ReadString();
              break;
            }
            case 58: {
              MaxReleaseQty = input.ReadString();
              break;
            }
            case 66: {
              IsActive = input.ReadString();
              break;
            }
            case 74: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 82: {
              AddedBy = input.ReadString();
              break;
            }
            case 90: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 98: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.HasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasSecurityExchange {
        get { return result.HasSecurityExchange; }
      }
      public string SecurityExchange {
        get { return result.SecurityExchange; }
        set { SetSecurityExchange(value); }
      }
      public Builder SetSecurityExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityExchange = true;
        result.securityExchange_ = value;
        return this;
      }
      public Builder ClearSecurityExchange() {
        result.hasSecurityExchange = false;
        result.securityExchange_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasMaxOpenLongQty {
        get { return result.HasMaxOpenLongQty; }
      }
      public string MaxOpenLongQty {
        get { return result.MaxOpenLongQty; }
        set { SetMaxOpenLongQty(value); }
      }
      public Builder SetMaxOpenLongQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMaxOpenLongQty = true;
        result.maxOpenLongQty_ = value;
        return this;
      }
      public Builder ClearMaxOpenLongQty() {
        result.hasMaxOpenLongQty = false;
        result.maxOpenLongQty_ = "0";
        return this;
      }
      
      public bool HasMaxOpenShortQty {
        get { return result.HasMaxOpenShortQty; }
      }
      public string MaxOpenShortQty {
        get { return result.MaxOpenShortQty; }
        set { SetMaxOpenShortQty(value); }
      }
      public Builder SetMaxOpenShortQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMaxOpenShortQty = true;
        result.maxOpenShortQty_ = value;
        return this;
      }
      public Builder ClearMaxOpenShortQty() {
        result.hasMaxOpenShortQty = false;
        result.maxOpenShortQty_ = "0";
        return this;
      }
      
      public bool HasMaxReleaseQty {
        get { return result.HasMaxReleaseQty; }
      }
      public string MaxReleaseQty {
        get { return result.MaxReleaseQty; }
        set { SetMaxReleaseQty(value); }
      }
      public Builder SetMaxReleaseQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMaxReleaseQty = true;
        result.maxReleaseQty_ = value;
        return this;
      }
      public Builder ClearMaxReleaseQty() {
        result.hasMaxReleaseQty = false;
        result.maxReleaseQty_ = "0";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "0";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static AccountLimitData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DraftOrderData : pb::GeneratedMessage<DraftOrderData, DraftOrderData.Builder> {
    private static readonly DraftOrderData defaultInstance = new Builder().BuildPartial();
    public static DraftOrderData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DraftOrderData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DraftOrderData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftOrderData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DraftOrderData, DraftOrderData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftOrderData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum SideCode {
        BUY = 1,
        SELL = 2,
      }
      
      public enum OrderType {
        MARKET = 1,
        LIMIT = 2,
        STOP = 3,
        STOP_LIMIT = 4,
        MARKET_ON_CLOSE = 5,
        MARKET_LIMIT = 6,
      }
      
      public enum TimeInForce {
        DAY = 0,
        GTC = 1,
        OPG = 2,
        IOC = 3,
        FOK = 4,
        GTD = 6,
        GIS = 8,
      }
      
    }
    #endregion
    
    public const int ExternalOrderIdFieldNumber = 1;
    private bool hasExternalOrderId;
    private string externalOrderId_ = "";
    public bool HasExternalOrderId {
      get { return hasExternalOrderId; }
    }
    public string ExternalOrderId {
      get { return externalOrderId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 2;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int InstrumentIdFieldNumber = 3;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int SideCodeFieldNumber = 4;
    private bool hasSideCode;
    private global::quantmodel.DraftOrderData.Types.SideCode sideCode_ = global::quantmodel.DraftOrderData.Types.SideCode.BUY;
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public global::quantmodel.DraftOrderData.Types.SideCode SideCode {
      get { return sideCode_; }
    }
    
    public const int TifFieldNumber = 5;
    private bool hasTif;
    private global::quantmodel.DraftOrderData.Types.TimeInForce tif_ = global::quantmodel.DraftOrderData.Types.TimeInForce.DAY;
    public bool HasTif {
      get { return hasTif; }
    }
    public global::quantmodel.DraftOrderData.Types.TimeInForce Tif {
      get { return tif_; }
    }
    
    public const int OrderTypeFieldNumber = 6;
    private bool hasOrderType;
    private global::quantmodel.DraftOrderData.Types.OrderType orderType_ = global::quantmodel.DraftOrderData.Types.OrderType.MARKET;
    public bool HasOrderType {
      get { return hasOrderType; }
    }
    public global::quantmodel.DraftOrderData.Types.OrderType OrderType {
      get { return orderType_; }
    }
    
    public const int OrderQtyFieldNumber = 7;
    private bool hasOrderQty;
    private string orderQty_ = "0";
    public bool HasOrderQty {
      get { return hasOrderQty; }
    }
    public string OrderQty {
      get { return orderQty_; }
    }
    
    public const int LimitPrcFieldNumber = 8;
    private bool hasLimitPrc;
    private string limitPrc_ = "0";
    public bool HasLimitPrc {
      get { return hasLimitPrc; }
    }
    public string LimitPrc {
      get { return limitPrc_; }
    }
    
    public const int StopPrcFieldNumber = 9;
    private bool hasStopPrc;
    private string stopPrc_ = "0";
    public bool HasStopPrc {
      get { return hasStopPrc; }
    }
    public string StopPrc {
      get { return stopPrc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasExternalOrderId) {
        output.WriteString(1, ExternalOrderId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(2, InvestmentSystemId);
      }
      if (HasInstrumentId) {
        output.WriteString(3, InstrumentId);
      }
      if (HasSideCode) {
        output.WriteEnum(4, (int) SideCode);
      }
      if (HasTif) {
        output.WriteEnum(5, (int) Tif);
      }
      if (HasOrderType) {
        output.WriteEnum(6, (int) OrderType);
      }
      if (HasOrderQty) {
        output.WriteString(7, OrderQty);
      }
      if (HasLimitPrc) {
        output.WriteString(8, LimitPrc);
      }
      if (HasStopPrc) {
        output.WriteString(9, StopPrc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasExternalOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ExternalOrderId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InvestmentSystemId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InstrumentId);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) SideCode);
        }
        if (HasTif) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Tif);
        }
        if (HasOrderType) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) OrderType);
        }
        if (HasOrderQty) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OrderQty);
        }
        if (HasLimitPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(8, LimitPrc);
        }
        if (HasStopPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(9, StopPrc);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DraftOrderData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DraftOrderData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DraftOrderData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftOrderData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DraftOrderData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DraftOrderData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DraftOrderData result = new DraftOrderData();
      
      protected override DraftOrderData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DraftOrderData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DraftOrderData.Descriptor; }
      }
      
      public override DraftOrderData DefaultInstanceForType {
        get { return global::quantmodel.DraftOrderData.DefaultInstance; }
      }
      
      public override DraftOrderData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DraftOrderData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DraftOrderData) {
          return MergeFrom((DraftOrderData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DraftOrderData other) {
        if (other == global::quantmodel.DraftOrderData.DefaultInstance) return this;
        if (other.HasExternalOrderId) {
          ExternalOrderId = other.ExternalOrderId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasTif) {
          Tif = other.Tif;
        }
        if (other.HasOrderType) {
          OrderType = other.OrderType;
        }
        if (other.HasOrderQty) {
          OrderQty = other.OrderQty;
        }
        if (other.HasLimitPrc) {
          LimitPrc = other.LimitPrc;
        }
        if (other.HasStopPrc) {
          StopPrc = other.StopPrc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ExternalOrderId = input.ReadString();
              break;
            }
            case 18: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 26: {
              InstrumentId = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DraftOrderData.Types.SideCode), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                SideCode = (global::quantmodel.DraftOrderData.Types.SideCode) rawValue;
              }
              break;
            }
            case 40: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DraftOrderData.Types.TimeInForce), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong) rawValue);
              } else {
                Tif = (global::quantmodel.DraftOrderData.Types.TimeInForce) rawValue;
              }
              break;
            }
            case 48: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DraftOrderData.Types.OrderType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong) rawValue);
              } else {
                OrderType = (global::quantmodel.DraftOrderData.Types.OrderType) rawValue;
              }
              break;
            }
            case 58: {
              OrderQty = input.ReadString();
              break;
            }
            case 66: {
              LimitPrc = input.ReadString();
              break;
            }
            case 74: {
              StopPrc = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasExternalOrderId {
        get { return result.HasExternalOrderId; }
      }
      public string ExternalOrderId {
        get { return result.ExternalOrderId; }
        set { SetExternalOrderId(value); }
      }
      public Builder SetExternalOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExternalOrderId = true;
        result.externalOrderId_ = value;
        return this;
      }
      public Builder ClearExternalOrderId() {
        result.hasExternalOrderId = false;
        result.externalOrderId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasSideCode {
       get { return result.HasSideCode; }
      }
      public global::quantmodel.DraftOrderData.Types.SideCode SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(global::quantmodel.DraftOrderData.Types.SideCode value) {
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = global::quantmodel.DraftOrderData.Types.SideCode.BUY;
        return this;
      }
      
      public bool HasTif {
       get { return result.HasTif; }
      }
      public global::quantmodel.DraftOrderData.Types.TimeInForce Tif {
        get { return result.Tif; }
        set { SetTif(value); }
      }
      public Builder SetTif(global::quantmodel.DraftOrderData.Types.TimeInForce value) {
        result.hasTif = true;
        result.tif_ = value;
        return this;
      }
      public Builder ClearTif() {
        result.hasTif = false;
        result.tif_ = global::quantmodel.DraftOrderData.Types.TimeInForce.DAY;
        return this;
      }
      
      public bool HasOrderType {
       get { return result.HasOrderType; }
      }
      public global::quantmodel.DraftOrderData.Types.OrderType OrderType {
        get { return result.OrderType; }
        set { SetOrderType(value); }
      }
      public Builder SetOrderType(global::quantmodel.DraftOrderData.Types.OrderType value) {
        result.hasOrderType = true;
        result.orderType_ = value;
        return this;
      }
      public Builder ClearOrderType() {
        result.hasOrderType = false;
        result.orderType_ = global::quantmodel.DraftOrderData.Types.OrderType.MARKET;
        return this;
      }
      
      public bool HasOrderQty {
        get { return result.HasOrderQty; }
      }
      public string OrderQty {
        get { return result.OrderQty; }
        set { SetOrderQty(value); }
      }
      public Builder SetOrderQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderQty = true;
        result.orderQty_ = value;
        return this;
      }
      public Builder ClearOrderQty() {
        result.hasOrderQty = false;
        result.orderQty_ = "0";
        return this;
      }
      
      public bool HasLimitPrc {
        get { return result.HasLimitPrc; }
      }
      public string LimitPrc {
        get { return result.LimitPrc; }
        set { SetLimitPrc(value); }
      }
      public Builder SetLimitPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLimitPrc = true;
        result.limitPrc_ = value;
        return this;
      }
      public Builder ClearLimitPrc() {
        result.hasLimitPrc = false;
        result.limitPrc_ = "0";
        return this;
      }
      
      public bool HasStopPrc {
        get { return result.HasStopPrc; }
      }
      public string StopPrc {
        get { return result.StopPrc; }
        set { SetStopPrc(value); }
      }
      public Builder SetStopPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopPrc = true;
        result.stopPrc_ = value;
        return this;
      }
      public Builder ClearStopPrc() {
        result.hasStopPrc = false;
        result.stopPrc_ = "0";
        return this;
      }
    }
    static DraftOrderData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DraftAllocationData : pb::GeneratedMessage<DraftAllocationData, DraftAllocationData.Builder> {
    private static readonly DraftAllocationData defaultInstance = new Builder().BuildPartial();
    public static DraftAllocationData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DraftAllocationData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DraftAllocationData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftAllocationData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DraftAllocationData, DraftAllocationData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftAllocationData__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int AllocationQtyFieldNumber = 2;
    private bool hasAllocationQty;
    private string allocationQty_ = "0";
    public bool HasAllocationQty {
      get { return hasAllocationQty; }
    }
    public string AllocationQty {
      get { return allocationQty_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteString(1, AccountId);
      }
      if (HasAllocationQty) {
        output.WriteString(2, AllocationQty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AccountId);
        }
        if (HasAllocationQty) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AllocationQty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DraftAllocationData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DraftAllocationData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DraftAllocationData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftAllocationData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DraftAllocationData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DraftAllocationData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DraftAllocationData result = new DraftAllocationData();
      
      protected override DraftAllocationData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DraftAllocationData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DraftAllocationData.Descriptor; }
      }
      
      public override DraftAllocationData DefaultInstanceForType {
        get { return global::quantmodel.DraftAllocationData.DefaultInstance; }
      }
      
      public override DraftAllocationData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DraftAllocationData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DraftAllocationData) {
          return MergeFrom((DraftAllocationData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DraftAllocationData other) {
        if (other == global::quantmodel.DraftAllocationData.DefaultInstance) return this;
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasAllocationQty) {
          AllocationQty = other.AllocationQty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              AccountId = input.ReadString();
              break;
            }
            case 18: {
              AllocationQty = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasAllocationQty {
        get { return result.HasAllocationQty; }
      }
      public string AllocationQty {
        get { return result.AllocationQty; }
        set { SetAllocationQty(value); }
      }
      public Builder SetAllocationQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAllocationQty = true;
        result.allocationQty_ = value;
        return this;
      }
      public Builder ClearAllocationQty() {
        result.hasAllocationQty = false;
        result.allocationQty_ = "0";
        return this;
      }
    }
    static DraftAllocationData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class AccountData : pb::GeneratedMessage<AccountData, AccountData.Builder> {
    private static readonly AccountData defaultInstance = new Builder().BuildPartial();
    public static AccountData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AccountData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountData, AccountData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountData__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int ParentAccountIdFieldNumber = 2;
    private bool hasParentAccountId;
    private string parentAccountId_ = "";
    public bool HasParentAccountId {
      get { return hasParentAccountId; }
    }
    public string ParentAccountId {
      get { return parentAccountId_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int MarketAccountIdFieldNumber = 4;
    private bool hasMarketAccountId;
    private string marketAccountId_ = "";
    public bool HasMarketAccountId {
      get { return hasMarketAccountId; }
    }
    public string MarketAccountId {
      get { return marketAccountId_; }
    }
    
    public const int CustodyAccountIdFieldNumber = 5;
    private bool hasCustodyAccountId;
    private string custodyAccountId_ = "";
    public bool HasCustodyAccountId {
      get { return hasCustodyAccountId; }
    }
    public string CustodyAccountId {
      get { return custodyAccountId_; }
    }
    
    public const int GiveupAccountIdFieldNumber = 6;
    private bool hasGiveupAccountId;
    private string giveupAccountId_ = "";
    public bool HasGiveupAccountId {
      get { return hasGiveupAccountId; }
    }
    public string GiveupAccountId {
      get { return giveupAccountId_; }
    }
    
    public const int GiveupFirmIdFieldNumber = 7;
    private bool hasGiveupFirmId;
    private string giveupFirmId_ = "";
    public bool HasGiveupFirmId {
      get { return hasGiveupFirmId; }
    }
    public string GiveupFirmId {
      get { return giveupFirmId_; }
    }
    
    public const int NotionalValFieldNumber = 8;
    private bool hasNotionalVal;
    private string notionalVal_ = "";
    public bool HasNotionalVal {
      get { return hasNotionalVal; }
    }
    public string NotionalVal {
      get { return notionalVal_; }
    }
    
    public const int ProfitTargetFieldNumber = 9;
    private bool hasProfitTarget;
    private string profitTarget_ = "";
    public bool HasProfitTarget {
      get { return hasProfitTarget; }
    }
    public string ProfitTarget {
      get { return profitTarget_; }
    }
    
    public const int StopLossFieldNumber = 10;
    private bool hasStopLoss;
    private string stopLoss_ = "";
    public bool HasStopLoss {
      get { return hasStopLoss; }
    }
    public string StopLoss {
      get { return stopLoss_; }
    }
    
    public const int SignalWeightFieldNumber = 11;
    private bool hasSignalWeight;
    private string signalWeight_ = "";
    public bool HasSignalWeight {
      get { return hasSignalWeight; }
    }
    public string SignalWeight {
      get { return signalWeight_; }
    }
    
    public const int IsSuppressedFieldNumber = 12;
    private bool hasIsSuppressed;
    private string isSuppressed_ = "";
    public bool HasIsSuppressed {
      get { return hasIsSuppressed; }
    }
    public string IsSuppressed {
      get { return isSuppressed_; }
    }
    
    public const int IsActiveFieldNumber = 13;
    private bool hasIsActive;
    private string isActive_ = "";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public const int ContactNameFieldNumber = 14;
    private bool hasContactName;
    private string contactName_ = "";
    public bool HasContactName {
      get { return hasContactName; }
    }
    public string ContactName {
      get { return contactName_; }
    }
    
    public const int ContactEmailFieldNumber = 15;
    private bool hasContactEmail;
    private string contactEmail_ = "";
    public bool HasContactEmail {
      get { return hasContactEmail; }
    }
    public string ContactEmail {
      get { return contactEmail_; }
    }
    
    public const int ContactPhoneFieldNumber = 16;
    private bool hasContactPhone;
    private string contactPhone_ = "";
    public bool HasContactPhone {
      get { return hasContactPhone; }
    }
    public string ContactPhone {
      get { return contactPhone_; }
    }
    
    public const int TradingFirmNameFieldNumber = 17;
    private bool hasTradingFirmName;
    private string tradingFirmName_ = "";
    public bool HasTradingFirmName {
      get { return hasTradingFirmName; }
    }
    public string TradingFirmName {
      get { return tradingFirmName_; }
    }
    
    public const int TradingFirmEmailFieldNumber = 18;
    private bool hasTradingFirmEmail;
    private string tradingFirmEmail_ = "";
    public bool HasTradingFirmEmail {
      get { return hasTradingFirmEmail; }
    }
    public string TradingFirmEmail {
      get { return tradingFirmEmail_; }
    }
    
    public const int TradingFirmPhoneFieldNumber = 19;
    private bool hasTradingFirmPhone;
    private string tradingFirmPhone_ = "";
    public bool HasTradingFirmPhone {
      get { return hasTradingFirmPhone; }
    }
    public string TradingFirmPhone {
      get { return tradingFirmPhone_; }
    }
    
    public const int AddedDatetimeFieldNumber = 20;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 21;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 22;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 23;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteString(1, AccountId);
      }
      if (HasParentAccountId) {
        output.WriteString(2, ParentAccountId);
      }
      if (HasName) {
        output.WriteString(3, Name);
      }
      if (HasMarketAccountId) {
        output.WriteString(4, MarketAccountId);
      }
      if (HasCustodyAccountId) {
        output.WriteString(5, CustodyAccountId);
      }
      if (HasGiveupAccountId) {
        output.WriteString(6, GiveupAccountId);
      }
      if (HasGiveupFirmId) {
        output.WriteString(7, GiveupFirmId);
      }
      if (HasNotionalVal) {
        output.WriteString(8, NotionalVal);
      }
      if (HasProfitTarget) {
        output.WriteString(9, ProfitTarget);
      }
      if (HasStopLoss) {
        output.WriteString(10, StopLoss);
      }
      if (HasSignalWeight) {
        output.WriteString(11, SignalWeight);
      }
      if (HasIsSuppressed) {
        output.WriteString(12, IsSuppressed);
      }
      if (HasIsActive) {
        output.WriteString(13, IsActive);
      }
      if (HasContactName) {
        output.WriteString(14, ContactName);
      }
      if (HasContactEmail) {
        output.WriteString(15, ContactEmail);
      }
      if (HasContactPhone) {
        output.WriteString(16, ContactPhone);
      }
      if (HasTradingFirmName) {
        output.WriteString(17, TradingFirmName);
      }
      if (HasTradingFirmEmail) {
        output.WriteString(18, TradingFirmEmail);
      }
      if (HasTradingFirmPhone) {
        output.WriteString(19, TradingFirmPhone);
      }
      if (HasAddedDatetime) {
        output.WriteString(20, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(21, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(22, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(23, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AccountId);
        }
        if (HasParentAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ParentAccountId);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (HasMarketAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, MarketAccountId);
        }
        if (HasCustodyAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, CustodyAccountId);
        }
        if (HasGiveupAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, GiveupAccountId);
        }
        if (HasGiveupFirmId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, GiveupFirmId);
        }
        if (HasNotionalVal) {
          size += pb::CodedOutputStream.ComputeStringSize(8, NotionalVal);
        }
        if (HasProfitTarget) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ProfitTarget);
        }
        if (HasStopLoss) {
          size += pb::CodedOutputStream.ComputeStringSize(10, StopLoss);
        }
        if (HasSignalWeight) {
          size += pb::CodedOutputStream.ComputeStringSize(11, SignalWeight);
        }
        if (HasIsSuppressed) {
          size += pb::CodedOutputStream.ComputeStringSize(12, IsSuppressed);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(13, IsActive);
        }
        if (HasContactName) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ContactName);
        }
        if (HasContactEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ContactEmail);
        }
        if (HasContactPhone) {
          size += pb::CodedOutputStream.ComputeStringSize(16, ContactPhone);
        }
        if (HasTradingFirmName) {
          size += pb::CodedOutputStream.ComputeStringSize(17, TradingFirmName);
        }
        if (HasTradingFirmEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(18, TradingFirmEmail);
        }
        if (HasTradingFirmPhone) {
          size += pb::CodedOutputStream.ComputeStringSize(19, TradingFirmPhone);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(20, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(21, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(22, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(23, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AccountData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AccountData result = new AccountData();
      
      protected override AccountData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AccountData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.AccountData.Descriptor; }
      }
      
      public override AccountData DefaultInstanceForType {
        get { return global::quantmodel.AccountData.DefaultInstance; }
      }
      
      public override AccountData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AccountData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountData) {
          return MergeFrom((AccountData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountData other) {
        if (other == global::quantmodel.AccountData.DefaultInstance) return this;
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasParentAccountId) {
          ParentAccountId = other.ParentAccountId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasMarketAccountId) {
          MarketAccountId = other.MarketAccountId;
        }
        if (other.HasCustodyAccountId) {
          CustodyAccountId = other.CustodyAccountId;
        }
        if (other.HasGiveupAccountId) {
          GiveupAccountId = other.GiveupAccountId;
        }
        if (other.HasGiveupFirmId) {
          GiveupFirmId = other.GiveupFirmId;
        }
        if (other.HasNotionalVal) {
          NotionalVal = other.NotionalVal;
        }
        if (other.HasProfitTarget) {
          ProfitTarget = other.ProfitTarget;
        }
        if (other.HasStopLoss) {
          StopLoss = other.StopLoss;
        }
        if (other.HasSignalWeight) {
          SignalWeight = other.SignalWeight;
        }
        if (other.HasIsSuppressed) {
          IsSuppressed = other.IsSuppressed;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        if (other.HasContactName) {
          ContactName = other.ContactName;
        }
        if (other.HasContactEmail) {
          ContactEmail = other.ContactEmail;
        }
        if (other.HasContactPhone) {
          ContactPhone = other.ContactPhone;
        }
        if (other.HasTradingFirmName) {
          TradingFirmName = other.TradingFirmName;
        }
        if (other.HasTradingFirmEmail) {
          TradingFirmEmail = other.TradingFirmEmail;
        }
        if (other.HasTradingFirmPhone) {
          TradingFirmPhone = other.TradingFirmPhone;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              AccountId = input.ReadString();
              break;
            }
            case 18: {
              ParentAccountId = input.ReadString();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 34: {
              MarketAccountId = input.ReadString();
              break;
            }
            case 42: {
              CustodyAccountId = input.ReadString();
              break;
            }
            case 50: {
              GiveupAccountId = input.ReadString();
              break;
            }
            case 58: {
              GiveupFirmId = input.ReadString();
              break;
            }
            case 66: {
              NotionalVal = input.ReadString();
              break;
            }
            case 74: {
              ProfitTarget = input.ReadString();
              break;
            }
            case 82: {
              StopLoss = input.ReadString();
              break;
            }
            case 90: {
              SignalWeight = input.ReadString();
              break;
            }
            case 98: {
              IsSuppressed = input.ReadString();
              break;
            }
            case 106: {
              IsActive = input.ReadString();
              break;
            }
            case 114: {
              ContactName = input.ReadString();
              break;
            }
            case 122: {
              ContactEmail = input.ReadString();
              break;
            }
            case 130: {
              ContactPhone = input.ReadString();
              break;
            }
            case 138: {
              TradingFirmName = input.ReadString();
              break;
            }
            case 146: {
              TradingFirmEmail = input.ReadString();
              break;
            }
            case 154: {
              TradingFirmPhone = input.ReadString();
              break;
            }
            case 162: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 170: {
              AddedBy = input.ReadString();
              break;
            }
            case 178: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 186: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasParentAccountId {
        get { return result.HasParentAccountId; }
      }
      public string ParentAccountId {
        get { return result.ParentAccountId; }
        set { SetParentAccountId(value); }
      }
      public Builder SetParentAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasParentAccountId = true;
        result.parentAccountId_ = value;
        return this;
      }
      public Builder ClearParentAccountId() {
        result.hasParentAccountId = false;
        result.parentAccountId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasMarketAccountId {
        get { return result.HasMarketAccountId; }
      }
      public string MarketAccountId {
        get { return result.MarketAccountId; }
        set { SetMarketAccountId(value); }
      }
      public Builder SetMarketAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMarketAccountId = true;
        result.marketAccountId_ = value;
        return this;
      }
      public Builder ClearMarketAccountId() {
        result.hasMarketAccountId = false;
        result.marketAccountId_ = "";
        return this;
      }
      
      public bool HasCustodyAccountId {
        get { return result.HasCustodyAccountId; }
      }
      public string CustodyAccountId {
        get { return result.CustodyAccountId; }
        set { SetCustodyAccountId(value); }
      }
      public Builder SetCustodyAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCustodyAccountId = true;
        result.custodyAccountId_ = value;
        return this;
      }
      public Builder ClearCustodyAccountId() {
        result.hasCustodyAccountId = false;
        result.custodyAccountId_ = "";
        return this;
      }
      
      public bool HasGiveupAccountId {
        get { return result.HasGiveupAccountId; }
      }
      public string GiveupAccountId {
        get { return result.GiveupAccountId; }
        set { SetGiveupAccountId(value); }
      }
      public Builder SetGiveupAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGiveupAccountId = true;
        result.giveupAccountId_ = value;
        return this;
      }
      public Builder ClearGiveupAccountId() {
        result.hasGiveupAccountId = false;
        result.giveupAccountId_ = "";
        return this;
      }
      
      public bool HasGiveupFirmId {
        get { return result.HasGiveupFirmId; }
      }
      public string GiveupFirmId {
        get { return result.GiveupFirmId; }
        set { SetGiveupFirmId(value); }
      }
      public Builder SetGiveupFirmId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGiveupFirmId = true;
        result.giveupFirmId_ = value;
        return this;
      }
      public Builder ClearGiveupFirmId() {
        result.hasGiveupFirmId = false;
        result.giveupFirmId_ = "";
        return this;
      }
      
      public bool HasNotionalVal {
        get { return result.HasNotionalVal; }
      }
      public string NotionalVal {
        get { return result.NotionalVal; }
        set { SetNotionalVal(value); }
      }
      public Builder SetNotionalVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNotionalVal = true;
        result.notionalVal_ = value;
        return this;
      }
      public Builder ClearNotionalVal() {
        result.hasNotionalVal = false;
        result.notionalVal_ = "";
        return this;
      }
      
      public bool HasProfitTarget {
        get { return result.HasProfitTarget; }
      }
      public string ProfitTarget {
        get { return result.ProfitTarget; }
        set { SetProfitTarget(value); }
      }
      public Builder SetProfitTarget(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProfitTarget = true;
        result.profitTarget_ = value;
        return this;
      }
      public Builder ClearProfitTarget() {
        result.hasProfitTarget = false;
        result.profitTarget_ = "";
        return this;
      }
      
      public bool HasStopLoss {
        get { return result.HasStopLoss; }
      }
      public string StopLoss {
        get { return result.StopLoss; }
        set { SetStopLoss(value); }
      }
      public Builder SetStopLoss(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopLoss = true;
        result.stopLoss_ = value;
        return this;
      }
      public Builder ClearStopLoss() {
        result.hasStopLoss = false;
        result.stopLoss_ = "";
        return this;
      }
      
      public bool HasSignalWeight {
        get { return result.HasSignalWeight; }
      }
      public string SignalWeight {
        get { return result.SignalWeight; }
        set { SetSignalWeight(value); }
      }
      public Builder SetSignalWeight(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSignalWeight = true;
        result.signalWeight_ = value;
        return this;
      }
      public Builder ClearSignalWeight() {
        result.hasSignalWeight = false;
        result.signalWeight_ = "";
        return this;
      }
      
      public bool HasIsSuppressed {
        get { return result.HasIsSuppressed; }
      }
      public string IsSuppressed {
        get { return result.IsSuppressed; }
        set { SetIsSuppressed(value); }
      }
      public Builder SetIsSuppressed(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsSuppressed = true;
        result.isSuppressed_ = value;
        return this;
      }
      public Builder ClearIsSuppressed() {
        result.hasIsSuppressed = false;
        result.isSuppressed_ = "";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "";
        return this;
      }
      
      public bool HasContactName {
        get { return result.HasContactName; }
      }
      public string ContactName {
        get { return result.ContactName; }
        set { SetContactName(value); }
      }
      public Builder SetContactName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasContactName = true;
        result.contactName_ = value;
        return this;
      }
      public Builder ClearContactName() {
        result.hasContactName = false;
        result.contactName_ = "";
        return this;
      }
      
      public bool HasContactEmail {
        get { return result.HasContactEmail; }
      }
      public string ContactEmail {
        get { return result.ContactEmail; }
        set { SetContactEmail(value); }
      }
      public Builder SetContactEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasContactEmail = true;
        result.contactEmail_ = value;
        return this;
      }
      public Builder ClearContactEmail() {
        result.hasContactEmail = false;
        result.contactEmail_ = "";
        return this;
      }
      
      public bool HasContactPhone {
        get { return result.HasContactPhone; }
      }
      public string ContactPhone {
        get { return result.ContactPhone; }
        set { SetContactPhone(value); }
      }
      public Builder SetContactPhone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasContactPhone = true;
        result.contactPhone_ = value;
        return this;
      }
      public Builder ClearContactPhone() {
        result.hasContactPhone = false;
        result.contactPhone_ = "";
        return this;
      }
      
      public bool HasTradingFirmName {
        get { return result.HasTradingFirmName; }
      }
      public string TradingFirmName {
        get { return result.TradingFirmName; }
        set { SetTradingFirmName(value); }
      }
      public Builder SetTradingFirmName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTradingFirmName = true;
        result.tradingFirmName_ = value;
        return this;
      }
      public Builder ClearTradingFirmName() {
        result.hasTradingFirmName = false;
        result.tradingFirmName_ = "";
        return this;
      }
      
      public bool HasTradingFirmEmail {
        get { return result.HasTradingFirmEmail; }
      }
      public string TradingFirmEmail {
        get { return result.TradingFirmEmail; }
        set { SetTradingFirmEmail(value); }
      }
      public Builder SetTradingFirmEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTradingFirmEmail = true;
        result.tradingFirmEmail_ = value;
        return this;
      }
      public Builder ClearTradingFirmEmail() {
        result.hasTradingFirmEmail = false;
        result.tradingFirmEmail_ = "";
        return this;
      }
      
      public bool HasTradingFirmPhone {
        get { return result.HasTradingFirmPhone; }
      }
      public string TradingFirmPhone {
        get { return result.TradingFirmPhone; }
        set { SetTradingFirmPhone(value); }
      }
      public Builder SetTradingFirmPhone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTradingFirmPhone = true;
        result.tradingFirmPhone_ = value;
        return this;
      }
      public Builder ClearTradingFirmPhone() {
        result.hasTradingFirmPhone = false;
        result.tradingFirmPhone_ = "";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static AccountData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class OrderData : pb::GeneratedMessage<OrderData, OrderData.Builder> {
    private static readonly OrderData defaultInstance = new Builder().BuildPartial();
    public static OrderData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrderData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OrderData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_OrderData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrderData, OrderData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_OrderData__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum SideCode {
        BUY = 1,
        SELL = 2,
      }
      
      public enum OrderType {
        MARKET = 1,
        LIMIT = 2,
        STOP = 3,
        STOP_LIMIT = 4,
        MARKET_ON_CLOSE = 5,
        MARKET_LIMIT = 6,
      }
      
      public enum OrderStatus {
        SUPPRESSED = 0,
        NEW = 1,
        PENDING_RELEASE = 2,
        RELEASED = 3,
        PARTIALLY_FILLED = 4,
        FILLED = 5,
        CANCELED = 6,
        CLOSED = 7,
      }
      
      public enum TimeInForce {
        DAY = 0,
        GTC = 1,
        OPG = 2,
        IOC = 3,
        FOK = 4,
        GTD = 6,
        GIS = 8,
      }
      
    }
    #endregion
    
    public const int OrderIdFieldNumber = 1;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int ExternalOrderIdFieldNumber = 2;
    private bool hasExternalOrderId;
    private string externalOrderId_ = "";
    public bool HasExternalOrderId {
      get { return hasExternalOrderId; }
    }
    public string ExternalOrderId {
      get { return externalOrderId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 3;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int OrderTypeFieldNumber = 4;
    private bool hasOrderType;
    private string orderType_ = "";
    public bool HasOrderType {
      get { return hasOrderType; }
    }
    public string OrderType {
      get { return orderType_; }
    }
    
    public const int OrderStatusFieldNumber = 5;
    private bool hasOrderStatus;
    private string orderStatus_ = "";
    public bool HasOrderStatus {
      get { return hasOrderStatus; }
    }
    public string OrderStatus {
      get { return orderStatus_; }
    }
    
    public const int InstrumentIdFieldNumber = 6;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int SymbolFieldNumber = 7;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int TifFieldNumber = 8;
    private bool hasTif;
    private string tif_ = "";
    public bool HasTif {
      get { return hasTif; }
    }
    public string Tif {
      get { return tif_; }
    }
    
    public const int SideCodeFieldNumber = 9;
    private bool hasSideCode;
    private string sideCode_ = "";
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public string SideCode {
      get { return sideCode_; }
    }
    
    public const int BaseCcyFieldNumber = 10;
    private bool hasBaseCcy;
    private string baseCcy_ = "";
    public bool HasBaseCcy {
      get { return hasBaseCcy; }
    }
    public string BaseCcy {
      get { return baseCcy_; }
    }
    
    public const int OrderQtyFieldNumber = 11;
    private bool hasOrderQty;
    private string orderQty_ = "0";
    public bool HasOrderQty {
      get { return hasOrderQty; }
    }
    public string OrderQty {
      get { return orderQty_; }
    }
    
    public const int OpenQtyFieldNumber = 12;
    private bool hasOpenQty;
    private string openQty_ = "0";
    public bool HasOpenQty {
      get { return hasOpenQty; }
    }
    public string OpenQty {
      get { return openQty_; }
    }
    
    public const int ReleasedQtyFieldNumber = 13;
    private bool hasReleasedQty;
    private string releasedQty_ = "0";
    public bool HasReleasedQty {
      get { return hasReleasedQty; }
    }
    public string ReleasedQty {
      get { return releasedQty_; }
    }
    
    public const int ExecutedQtyFieldNumber = 14;
    private bool hasExecutedQty;
    private string executedQty_ = "0";
    public bool HasExecutedQty {
      get { return hasExecutedQty; }
    }
    public string ExecutedQty {
      get { return executedQty_; }
    }
    
    public const int LimitPrcFieldNumber = 15;
    private bool hasLimitPrc;
    private string limitPrc_ = "0";
    public bool HasLimitPrc {
      get { return hasLimitPrc; }
    }
    public string LimitPrc {
      get { return limitPrc_; }
    }
    
    public const int StopPrcFieldNumber = 16;
    private bool hasStopPrc;
    private string stopPrc_ = "0";
    public bool HasStopPrc {
      get { return hasStopPrc; }
    }
    public string StopPrc {
      get { return stopPrc_; }
    }
    
    public const int MarkPrcFieldNumber = 17;
    private bool hasMarkPrc;
    private string markPrc_ = "0";
    public bool HasMarkPrc {
      get { return hasMarkPrc; }
    }
    public string MarkPrc {
      get { return markPrc_; }
    }
    
    public const int AveragePrcFieldNumber = 18;
    private bool hasAveragePrc;
    private string averagePrc_ = "0";
    public bool HasAveragePrc {
      get { return hasAveragePrc; }
    }
    public string AveragePrc {
      get { return averagePrc_; }
    }
    
    public const int EntryPrcFieldNumber = 19;
    private bool hasEntryPrc;
    private string entryPrc_ = "0";
    public bool HasEntryPrc {
      get { return hasEntryPrc; }
    }
    public string EntryPrc {
      get { return entryPrc_; }
    }
    
    public const int ReleasedValFieldNumber = 20;
    private bool hasReleasedVal;
    private string releasedVal_ = "0";
    public bool HasReleasedVal {
      get { return hasReleasedVal; }
    }
    public string ReleasedVal {
      get { return releasedVal_; }
    }
    
    public const int ExecutedValFieldNumber = 21;
    private bool hasExecutedVal;
    private string executedVal_ = "0";
    public bool HasExecutedVal {
      get { return hasExecutedVal; }
    }
    public string ExecutedVal {
      get { return executedVal_; }
    }
    
    public const int AddedDatetimeFieldNumber = 22;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 23;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 24;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 25;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOrderId) {
        output.WriteString(1, OrderId);
      }
      if (HasExternalOrderId) {
        output.WriteString(2, ExternalOrderId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(3, InvestmentSystemId);
      }
      if (HasOrderType) {
        output.WriteString(4, OrderType);
      }
      if (HasOrderStatus) {
        output.WriteString(5, OrderStatus);
      }
      if (HasInstrumentId) {
        output.WriteString(6, InstrumentId);
      }
      if (HasSymbol) {
        output.WriteString(7, Symbol);
      }
      if (HasTif) {
        output.WriteString(8, Tif);
      }
      if (HasSideCode) {
        output.WriteString(9, SideCode);
      }
      if (HasBaseCcy) {
        output.WriteString(10, BaseCcy);
      }
      if (HasOrderQty) {
        output.WriteString(11, OrderQty);
      }
      if (HasOpenQty) {
        output.WriteString(12, OpenQty);
      }
      if (HasReleasedQty) {
        output.WriteString(13, ReleasedQty);
      }
      if (HasExecutedQty) {
        output.WriteString(14, ExecutedQty);
      }
      if (HasLimitPrc) {
        output.WriteString(15, LimitPrc);
      }
      if (HasStopPrc) {
        output.WriteString(16, StopPrc);
      }
      if (HasMarkPrc) {
        output.WriteString(17, MarkPrc);
      }
      if (HasAveragePrc) {
        output.WriteString(18, AveragePrc);
      }
      if (HasEntryPrc) {
        output.WriteString(19, EntryPrc);
      }
      if (HasReleasedVal) {
        output.WriteString(20, ReleasedVal);
      }
      if (HasExecutedVal) {
        output.WriteString(21, ExecutedVal);
      }
      if (HasAddedDatetime) {
        output.WriteString(22, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(23, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(24, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(25, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, OrderId);
        }
        if (HasExternalOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ExternalOrderId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestmentSystemId);
        }
        if (HasOrderType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, OrderType);
        }
        if (HasOrderStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderStatus);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, InstrumentId);
        }
        if (HasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Symbol);
        }
        if (HasTif) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Tif);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeStringSize(9, SideCode);
        }
        if (HasBaseCcy) {
          size += pb::CodedOutputStream.ComputeStringSize(10, BaseCcy);
        }
        if (HasOrderQty) {
          size += pb::CodedOutputStream.ComputeStringSize(11, OrderQty);
        }
        if (HasOpenQty) {
          size += pb::CodedOutputStream.ComputeStringSize(12, OpenQty);
        }
        if (HasReleasedQty) {
          size += pb::CodedOutputStream.ComputeStringSize(13, ReleasedQty);
        }
        if (HasExecutedQty) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ExecutedQty);
        }
        if (HasLimitPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(15, LimitPrc);
        }
        if (HasStopPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(16, StopPrc);
        }
        if (HasMarkPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(17, MarkPrc);
        }
        if (HasAveragePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(18, AveragePrc);
        }
        if (HasEntryPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(19, EntryPrc);
        }
        if (HasReleasedVal) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ReleasedVal);
        }
        if (HasExecutedVal) {
          size += pb::CodedOutputStream.ComputeStringSize(21, ExecutedVal);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(22, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(23, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(24, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(25, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OrderData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrderData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrderData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrderData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrderData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OrderData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OrderData result = new OrderData();
      
      protected override OrderData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OrderData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.OrderData.Descriptor; }
      }
      
      public override OrderData DefaultInstanceForType {
        get { return global::quantmodel.OrderData.DefaultInstance; }
      }
      
      public override OrderData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OrderData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrderData) {
          return MergeFrom((OrderData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrderData other) {
        if (other == global::quantmodel.OrderData.DefaultInstance) return this;
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasExternalOrderId) {
          ExternalOrderId = other.ExternalOrderId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasOrderType) {
          OrderType = other.OrderType;
        }
        if (other.HasOrderStatus) {
          OrderStatus = other.OrderStatus;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasTif) {
          Tif = other.Tif;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasBaseCcy) {
          BaseCcy = other.BaseCcy;
        }
        if (other.HasOrderQty) {
          OrderQty = other.OrderQty;
        }
        if (other.HasOpenQty) {
          OpenQty = other.OpenQty;
        }
        if (other.HasReleasedQty) {
          ReleasedQty = other.ReleasedQty;
        }
        if (other.HasExecutedQty) {
          ExecutedQty = other.ExecutedQty;
        }
        if (other.HasLimitPrc) {
          LimitPrc = other.LimitPrc;
        }
        if (other.HasStopPrc) {
          StopPrc = other.StopPrc;
        }
        if (other.HasMarkPrc) {
          MarkPrc = other.MarkPrc;
        }
        if (other.HasAveragePrc) {
          AveragePrc = other.AveragePrc;
        }
        if (other.HasEntryPrc) {
          EntryPrc = other.EntryPrc;
        }
        if (other.HasReleasedVal) {
          ReleasedVal = other.ReleasedVal;
        }
        if (other.HasExecutedVal) {
          ExecutedVal = other.ExecutedVal;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              OrderId = input.ReadString();
              break;
            }
            case 18: {
              ExternalOrderId = input.ReadString();
              break;
            }
            case 26: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 34: {
              OrderType = input.ReadString();
              break;
            }
            case 42: {
              OrderStatus = input.ReadString();
              break;
            }
            case 50: {
              InstrumentId = input.ReadString();
              break;
            }
            case 58: {
              Symbol = input.ReadString();
              break;
            }
            case 66: {
              Tif = input.ReadString();
              break;
            }
            case 74: {
              SideCode = input.ReadString();
              break;
            }
            case 82: {
              BaseCcy = input.ReadString();
              break;
            }
            case 90: {
              OrderQty = input.ReadString();
              break;
            }
            case 98: {
              OpenQty = input.ReadString();
              break;
            }
            case 106: {
              ReleasedQty = input.ReadString();
              break;
            }
            case 114: {
              ExecutedQty = input.ReadString();
              break;
            }
            case 122: {
              LimitPrc = input.ReadString();
              break;
            }
            case 130: {
              StopPrc = input.ReadString();
              break;
            }
            case 138: {
              MarkPrc = input.ReadString();
              break;
            }
            case 146: {
              AveragePrc = input.ReadString();
              break;
            }
            case 154: {
              EntryPrc = input.ReadString();
              break;
            }
            case 162: {
              ReleasedVal = input.ReadString();
              break;
            }
            case 170: {
              ExecutedVal = input.ReadString();
              break;
            }
            case 178: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 186: {
              AddedBy = input.ReadString();
              break;
            }
            case 194: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 202: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasOrderId {
        get { return result.HasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasExternalOrderId {
        get { return result.HasExternalOrderId; }
      }
      public string ExternalOrderId {
        get { return result.ExternalOrderId; }
        set { SetExternalOrderId(value); }
      }
      public Builder SetExternalOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExternalOrderId = true;
        result.externalOrderId_ = value;
        return this;
      }
      public Builder ClearExternalOrderId() {
        result.hasExternalOrderId = false;
        result.externalOrderId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasOrderType {
        get { return result.HasOrderType; }
      }
      public string OrderType {
        get { return result.OrderType; }
        set { SetOrderType(value); }
      }
      public Builder SetOrderType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderType = true;
        result.orderType_ = value;
        return this;
      }
      public Builder ClearOrderType() {
        result.hasOrderType = false;
        result.orderType_ = "";
        return this;
      }
      
      public bool HasOrderStatus {
        get { return result.HasOrderStatus; }
      }
      public string OrderStatus {
        get { return result.OrderStatus; }
        set { SetOrderStatus(value); }
      }
      public Builder SetOrderStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderStatus = true;
        result.orderStatus_ = value;
        return this;
      }
      public Builder ClearOrderStatus() {
        result.hasOrderStatus = false;
        result.orderStatus_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.HasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasTif {
        get { return result.HasTif; }
      }
      public string Tif {
        get { return result.Tif; }
        set { SetTif(value); }
      }
      public Builder SetTif(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTif = true;
        result.tif_ = value;
        return this;
      }
      public Builder ClearTif() {
        result.hasTif = false;
        result.tif_ = "";
        return this;
      }
      
      public bool HasSideCode {
        get { return result.HasSideCode; }
      }
      public string SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = "";
        return this;
      }
      
      public bool HasBaseCcy {
        get { return result.HasBaseCcy; }
      }
      public string BaseCcy {
        get { return result.BaseCcy; }
        set { SetBaseCcy(value); }
      }
      public Builder SetBaseCcy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBaseCcy = true;
        result.baseCcy_ = value;
        return this;
      }
      public Builder ClearBaseCcy() {
        result.hasBaseCcy = false;
        result.baseCcy_ = "";
        return this;
      }
      
      public bool HasOrderQty {
        get { return result.HasOrderQty; }
      }
      public string OrderQty {
        get { return result.OrderQty; }
        set { SetOrderQty(value); }
      }
      public Builder SetOrderQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderQty = true;
        result.orderQty_ = value;
        return this;
      }
      public Builder ClearOrderQty() {
        result.hasOrderQty = false;
        result.orderQty_ = "0";
        return this;
      }
      
      public bool HasOpenQty {
        get { return result.HasOpenQty; }
      }
      public string OpenQty {
        get { return result.OpenQty; }
        set { SetOpenQty(value); }
      }
      public Builder SetOpenQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpenQty = true;
        result.openQty_ = value;
        return this;
      }
      public Builder ClearOpenQty() {
        result.hasOpenQty = false;
        result.openQty_ = "0";
        return this;
      }
      
      public bool HasReleasedQty {
        get { return result.HasReleasedQty; }
      }
      public string ReleasedQty {
        get { return result.ReleasedQty; }
        set { SetReleasedQty(value); }
      }
      public Builder SetReleasedQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleasedQty = true;
        result.releasedQty_ = value;
        return this;
      }
      public Builder ClearReleasedQty() {
        result.hasReleasedQty = false;
        result.releasedQty_ = "0";
        return this;
      }
      
      public bool HasExecutedQty {
        get { return result.HasExecutedQty; }
      }
      public string ExecutedQty {
        get { return result.ExecutedQty; }
        set { SetExecutedQty(value); }
      }
      public Builder SetExecutedQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedQty = true;
        result.executedQty_ = value;
        return this;
      }
      public Builder ClearExecutedQty() {
        result.hasExecutedQty = false;
        result.executedQty_ = "0";
        return this;
      }
      
      public bool HasLimitPrc {
        get { return result.HasLimitPrc; }
      }
      public string LimitPrc {
        get { return result.LimitPrc; }
        set { SetLimitPrc(value); }
      }
      public Builder SetLimitPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLimitPrc = true;
        result.limitPrc_ = value;
        return this;
      }
      public Builder ClearLimitPrc() {
        result.hasLimitPrc = false;
        result.limitPrc_ = "0";
        return this;
      }
      
      public bool HasStopPrc {
        get { return result.HasStopPrc; }
      }
      public string StopPrc {
        get { return result.StopPrc; }
        set { SetStopPrc(value); }
      }
      public Builder SetStopPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopPrc = true;
        result.stopPrc_ = value;
        return this;
      }
      public Builder ClearStopPrc() {
        result.hasStopPrc = false;
        result.stopPrc_ = "0";
        return this;
      }
      
      public bool HasMarkPrc {
        get { return result.HasMarkPrc; }
      }
      public string MarkPrc {
        get { return result.MarkPrc; }
        set { SetMarkPrc(value); }
      }
      public Builder SetMarkPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMarkPrc = true;
        result.markPrc_ = value;
        return this;
      }
      public Builder ClearMarkPrc() {
        result.hasMarkPrc = false;
        result.markPrc_ = "0";
        return this;
      }
      
      public bool HasAveragePrc {
        get { return result.HasAveragePrc; }
      }
      public string AveragePrc {
        get { return result.AveragePrc; }
        set { SetAveragePrc(value); }
      }
      public Builder SetAveragePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAveragePrc = true;
        result.averagePrc_ = value;
        return this;
      }
      public Builder ClearAveragePrc() {
        result.hasAveragePrc = false;
        result.averagePrc_ = "0";
        return this;
      }
      
      public bool HasEntryPrc {
        get { return result.HasEntryPrc; }
      }
      public string EntryPrc {
        get { return result.EntryPrc; }
        set { SetEntryPrc(value); }
      }
      public Builder SetEntryPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEntryPrc = true;
        result.entryPrc_ = value;
        return this;
      }
      public Builder ClearEntryPrc() {
        result.hasEntryPrc = false;
        result.entryPrc_ = "0";
        return this;
      }
      
      public bool HasReleasedVal {
        get { return result.HasReleasedVal; }
      }
      public string ReleasedVal {
        get { return result.ReleasedVal; }
        set { SetReleasedVal(value); }
      }
      public Builder SetReleasedVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleasedVal = true;
        result.releasedVal_ = value;
        return this;
      }
      public Builder ClearReleasedVal() {
        result.hasReleasedVal = false;
        result.releasedVal_ = "0";
        return this;
      }
      
      public bool HasExecutedVal {
        get { return result.HasExecutedVal; }
      }
      public string ExecutedVal {
        get { return result.ExecutedVal; }
        set { SetExecutedVal(value); }
      }
      public Builder SetExecutedVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedVal = true;
        result.executedVal_ = value;
        return this;
      }
      public Builder ClearExecutedVal() {
        result.hasExecutedVal = false;
        result.executedVal_ = "0";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static OrderData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class AllocationData : pb::GeneratedMessage<AllocationData, AllocationData.Builder> {
    private static readonly AllocationData defaultInstance = new Builder().BuildPartial();
    public static AllocationData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AllocationData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AllocationData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AllocationData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AllocationData, AllocationData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AllocationData__FieldAccessorTable; }
    }
    
    public const int AllocationIdFieldNumber = 1;
    private bool hasAllocationId;
    private string allocationId_ = "";
    public bool HasAllocationId {
      get { return hasAllocationId; }
    }
    public string AllocationId {
      get { return allocationId_; }
    }
    
    public const int OrderIdFieldNumber = 2;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int AccountIdFieldNumber = 3;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int InstrumentIdFieldNumber = 4;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int SideCodeFieldNumber = 5;
    private bool hasSideCode;
    private string sideCode_ = "";
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public string SideCode {
      get { return sideCode_; }
    }
    
    public const int AllocationQtyFieldNumber = 6;
    private bool hasAllocationQty;
    private string allocationQty_ = "0";
    public bool HasAllocationQty {
      get { return hasAllocationQty; }
    }
    public string AllocationQty {
      get { return allocationQty_; }
    }
    
    public const int ReleasedQtyFieldNumber = 7;
    private bool hasReleasedQty;
    private string releasedQty_ = "0";
    public bool HasReleasedQty {
      get { return hasReleasedQty; }
    }
    public string ReleasedQty {
      get { return releasedQty_; }
    }
    
    public const int ExecutedQtyFieldNumber = 8;
    private bool hasExecutedQty;
    private string executedQty_ = "0";
    public bool HasExecutedQty {
      get { return hasExecutedQty; }
    }
    public string ExecutedQty {
      get { return executedQty_; }
    }
    
    public const int ExecutedValFieldNumber = 9;
    private bool hasExecutedVal;
    private string executedVal_ = "0";
    public bool HasExecutedVal {
      get { return hasExecutedVal; }
    }
    public string ExecutedVal {
      get { return executedVal_; }
    }
    
    public const int AveragePrcFieldNumber = 10;
    private bool hasAveragePrc;
    private string averagePrc_ = "0";
    public bool HasAveragePrc {
      get { return hasAveragePrc; }
    }
    public string AveragePrc {
      get { return averagePrc_; }
    }
    
    public const int AddedDatetimeFieldNumber = 11;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 12;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 13;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 14;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAllocationId) {
        output.WriteString(1, AllocationId);
      }
      if (HasOrderId) {
        output.WriteString(2, OrderId);
      }
      if (HasAccountId) {
        output.WriteString(3, AccountId);
      }
      if (HasInstrumentId) {
        output.WriteString(4, InstrumentId);
      }
      if (HasSideCode) {
        output.WriteString(5, SideCode);
      }
      if (HasAllocationQty) {
        output.WriteString(6, AllocationQty);
      }
      if (HasReleasedQty) {
        output.WriteString(7, ReleasedQty);
      }
      if (HasExecutedQty) {
        output.WriteString(8, ExecutedQty);
      }
      if (HasExecutedVal) {
        output.WriteString(9, ExecutedVal);
      }
      if (HasAveragePrc) {
        output.WriteString(10, AveragePrc);
      }
      if (HasAddedDatetime) {
        output.WriteString(11, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(12, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(13, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(14, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAllocationId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AllocationId);
        }
        if (HasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, OrderId);
        }
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AccountId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentId);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeStringSize(5, SideCode);
        }
        if (HasAllocationQty) {
          size += pb::CodedOutputStream.ComputeStringSize(6, AllocationQty);
        }
        if (HasReleasedQty) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ReleasedQty);
        }
        if (HasExecutedQty) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ExecutedQty);
        }
        if (HasExecutedVal) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ExecutedVal);
        }
        if (HasAveragePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(10, AveragePrc);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(12, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(13, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(14, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AllocationData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AllocationData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AllocationData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AllocationData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AllocationData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AllocationData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AllocationData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AllocationData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AllocationData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AllocationData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AllocationData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AllocationData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AllocationData result = new AllocationData();
      
      protected override AllocationData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AllocationData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.AllocationData.Descriptor; }
      }
      
      public override AllocationData DefaultInstanceForType {
        get { return global::quantmodel.AllocationData.DefaultInstance; }
      }
      
      public override AllocationData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AllocationData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AllocationData) {
          return MergeFrom((AllocationData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AllocationData other) {
        if (other == global::quantmodel.AllocationData.DefaultInstance) return this;
        if (other.HasAllocationId) {
          AllocationId = other.AllocationId;
        }
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasAllocationQty) {
          AllocationQty = other.AllocationQty;
        }
        if (other.HasReleasedQty) {
          ReleasedQty = other.ReleasedQty;
        }
        if (other.HasExecutedQty) {
          ExecutedQty = other.ExecutedQty;
        }
        if (other.HasExecutedVal) {
          ExecutedVal = other.ExecutedVal;
        }
        if (other.HasAveragePrc) {
          AveragePrc = other.AveragePrc;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              AllocationId = input.ReadString();
              break;
            }
            case 18: {
              OrderId = input.ReadString();
              break;
            }
            case 26: {
              AccountId = input.ReadString();
              break;
            }
            case 34: {
              InstrumentId = input.ReadString();
              break;
            }
            case 42: {
              SideCode = input.ReadString();
              break;
            }
            case 50: {
              AllocationQty = input.ReadString();
              break;
            }
            case 58: {
              ReleasedQty = input.ReadString();
              break;
            }
            case 66: {
              ExecutedQty = input.ReadString();
              break;
            }
            case 74: {
              ExecutedVal = input.ReadString();
              break;
            }
            case 82: {
              AveragePrc = input.ReadString();
              break;
            }
            case 90: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 98: {
              AddedBy = input.ReadString();
              break;
            }
            case 106: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 114: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasAllocationId {
        get { return result.HasAllocationId; }
      }
      public string AllocationId {
        get { return result.AllocationId; }
        set { SetAllocationId(value); }
      }
      public Builder SetAllocationId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAllocationId = true;
        result.allocationId_ = value;
        return this;
      }
      public Builder ClearAllocationId() {
        result.hasAllocationId = false;
        result.allocationId_ = "";
        return this;
      }
      
      public bool HasOrderId {
        get { return result.HasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasSideCode {
        get { return result.HasSideCode; }
      }
      public string SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = "";
        return this;
      }
      
      public bool HasAllocationQty {
        get { return result.HasAllocationQty; }
      }
      public string AllocationQty {
        get { return result.AllocationQty; }
        set { SetAllocationQty(value); }
      }
      public Builder SetAllocationQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAllocationQty = true;
        result.allocationQty_ = value;
        return this;
      }
      public Builder ClearAllocationQty() {
        result.hasAllocationQty = false;
        result.allocationQty_ = "0";
        return this;
      }
      
      public bool HasReleasedQty {
        get { return result.HasReleasedQty; }
      }
      public string ReleasedQty {
        get { return result.ReleasedQty; }
        set { SetReleasedQty(value); }
      }
      public Builder SetReleasedQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleasedQty = true;
        result.releasedQty_ = value;
        return this;
      }
      public Builder ClearReleasedQty() {
        result.hasReleasedQty = false;
        result.releasedQty_ = "0";
        return this;
      }
      
      public bool HasExecutedQty {
        get { return result.HasExecutedQty; }
      }
      public string ExecutedQty {
        get { return result.ExecutedQty; }
        set { SetExecutedQty(value); }
      }
      public Builder SetExecutedQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedQty = true;
        result.executedQty_ = value;
        return this;
      }
      public Builder ClearExecutedQty() {
        result.hasExecutedQty = false;
        result.executedQty_ = "0";
        return this;
      }
      
      public bool HasExecutedVal {
        get { return result.HasExecutedVal; }
      }
      public string ExecutedVal {
        get { return result.ExecutedVal; }
        set { SetExecutedVal(value); }
      }
      public Builder SetExecutedVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedVal = true;
        result.executedVal_ = value;
        return this;
      }
      public Builder ClearExecutedVal() {
        result.hasExecutedVal = false;
        result.executedVal_ = "0";
        return this;
      }
      
      public bool HasAveragePrc {
        get { return result.HasAveragePrc; }
      }
      public string AveragePrc {
        get { return result.AveragePrc; }
        set { SetAveragePrc(value); }
      }
      public Builder SetAveragePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAveragePrc = true;
        result.averagePrc_ = value;
        return this;
      }
      public Builder ClearAveragePrc() {
        result.hasAveragePrc = false;
        result.averagePrc_ = "0";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static AllocationData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ReleaseData : pb::GeneratedMessage<ReleaseData, ReleaseData.Builder> {
    private static readonly ReleaseData defaultInstance = new Builder().BuildPartial();
    public static ReleaseData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReleaseData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReleaseData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ReleaseData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReleaseData, ReleaseData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ReleaseData__FieldAccessorTable; }
    }
    
    public const int ReleaseIdFieldNumber = 1;
    private bool hasReleaseId;
    private string releaseId_ = "";
    public bool HasReleaseId {
      get { return hasReleaseId; }
    }
    public string ReleaseId {
      get { return releaseId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int AccountIdFieldNumber = 3;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int OrderIdFieldNumber = 4;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int AllocationIdFieldNumber = 5;
    private bool hasAllocationId;
    private string allocationId_ = "";
    public bool HasAllocationId {
      get { return hasAllocationId; }
    }
    public string AllocationId {
      get { return allocationId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 6;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int InstrumentIdFieldNumber = 7;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int ComplianceAuditIdFieldNumber = 8;
    private bool hasComplianceAuditId;
    private string complianceAuditId_ = "";
    public bool HasComplianceAuditId {
      get { return hasComplianceAuditId; }
    }
    public string ComplianceAuditId {
      get { return complianceAuditId_; }
    }
    
    public const int ClientOrderIdFieldNumber = 9;
    private bool hasClientOrderId;
    private string clientOrderId_ = "";
    public bool HasClientOrderId {
      get { return hasClientOrderId; }
    }
    public string ClientOrderId {
      get { return clientOrderId_; }
    }
    
    public const int CounterpartyOrderIdFieldNumber = 10;
    private bool hasCounterpartyOrderId;
    private string counterpartyOrderId_ = "";
    public bool HasCounterpartyOrderId {
      get { return hasCounterpartyOrderId; }
    }
    public string CounterpartyOrderId {
      get { return counterpartyOrderId_; }
    }
    
    public const int ReleaseStatusFieldNumber = 11;
    private bool hasReleaseStatus;
    private string releaseStatus_ = "";
    public bool HasReleaseStatus {
      get { return hasReleaseStatus; }
    }
    public string ReleaseStatus {
      get { return releaseStatus_; }
    }
    
    public const int ReleaseTypeFieldNumber = 12;
    private bool hasReleaseType;
    private string releaseType_ = "";
    public bool HasReleaseType {
      get { return hasReleaseType; }
    }
    public string ReleaseType {
      get { return releaseType_; }
    }
    
    public const int TifFieldNumber = 13;
    private bool hasTif;
    private string tif_ = "";
    public bool HasTif {
      get { return hasTif; }
    }
    public string Tif {
      get { return tif_; }
    }
    
    public const int SideCodeFieldNumber = 14;
    private bool hasSideCode;
    private string sideCode_ = "";
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public string SideCode {
      get { return sideCode_; }
    }
    
    public const int ReleaseQtyFieldNumber = 15;
    private bool hasReleaseQty;
    private string releaseQty_ = "0";
    public bool HasReleaseQty {
      get { return hasReleaseQty; }
    }
    public string ReleaseQty {
      get { return releaseQty_; }
    }
    
    public const int LimitPrcFieldNumber = 16;
    private bool hasLimitPrc;
    private string limitPrc_ = "0";
    public bool HasLimitPrc {
      get { return hasLimitPrc; }
    }
    public string LimitPrc {
      get { return limitPrc_; }
    }
    
    public const int StopPrcFieldNumber = 17;
    private bool hasStopPrc;
    private string stopPrc_ = "0";
    public bool HasStopPrc {
      get { return hasStopPrc; }
    }
    public string StopPrc {
      get { return stopPrc_; }
    }
    
    public const int AveragePrcFieldNumber = 18;
    private bool hasAveragePrc;
    private string averagePrc_ = "0";
    public bool HasAveragePrc {
      get { return hasAveragePrc; }
    }
    public string AveragePrc {
      get { return averagePrc_; }
    }
    
    public const int ExecutedValFieldNumber = 19;
    private bool hasExecutedVal;
    private string executedVal_ = "0";
    public bool HasExecutedVal {
      get { return hasExecutedVal; }
    }
    public string ExecutedVal {
      get { return executedVal_; }
    }
    
    public const int ExecutedQtyFieldNumber = 20;
    private bool hasExecutedQty;
    private string executedQty_ = "0";
    public bool HasExecutedQty {
      get { return hasExecutedQty; }
    }
    public string ExecutedQty {
      get { return executedQty_; }
    }
    
    public const int AddedDatetimeFieldNumber = 21;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 22;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 23;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 24;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasReleaseId) {
        output.WriteString(1, ReleaseId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      if (HasAccountId) {
        output.WriteString(3, AccountId);
      }
      if (HasOrderId) {
        output.WriteString(4, OrderId);
      }
      if (HasAllocationId) {
        output.WriteString(5, AllocationId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(6, InvestmentSystemId);
      }
      if (HasInstrumentId) {
        output.WriteString(7, InstrumentId);
      }
      if (HasComplianceAuditId) {
        output.WriteString(8, ComplianceAuditId);
      }
      if (HasClientOrderId) {
        output.WriteString(9, ClientOrderId);
      }
      if (HasCounterpartyOrderId) {
        output.WriteString(10, CounterpartyOrderId);
      }
      if (HasReleaseStatus) {
        output.WriteString(11, ReleaseStatus);
      }
      if (HasReleaseType) {
        output.WriteString(12, ReleaseType);
      }
      if (HasTif) {
        output.WriteString(13, Tif);
      }
      if (HasSideCode) {
        output.WriteString(14, SideCode);
      }
      if (HasReleaseQty) {
        output.WriteString(15, ReleaseQty);
      }
      if (HasLimitPrc) {
        output.WriteString(16, LimitPrc);
      }
      if (HasStopPrc) {
        output.WriteString(17, StopPrc);
      }
      if (HasAveragePrc) {
        output.WriteString(18, AveragePrc);
      }
      if (HasExecutedVal) {
        output.WriteString(19, ExecutedVal);
      }
      if (HasExecutedQty) {
        output.WriteString(20, ExecutedQty);
      }
      if (HasAddedDatetime) {
        output.WriteString(21, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(22, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(23, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(24, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasReleaseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ReleaseId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AccountId);
        }
        if (HasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, OrderId);
        }
        if (HasAllocationId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, AllocationId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, InvestmentSystemId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, InstrumentId);
        }
        if (HasComplianceAuditId) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ComplianceAuditId);
        }
        if (HasClientOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ClientOrderId);
        }
        if (HasCounterpartyOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CounterpartyOrderId);
        }
        if (HasReleaseStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ReleaseStatus);
        }
        if (HasReleaseType) {
          size += pb::CodedOutputStream.ComputeStringSize(12, ReleaseType);
        }
        if (HasTif) {
          size += pb::CodedOutputStream.ComputeStringSize(13, Tif);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeStringSize(14, SideCode);
        }
        if (HasReleaseQty) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ReleaseQty);
        }
        if (HasLimitPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(16, LimitPrc);
        }
        if (HasStopPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(17, StopPrc);
        }
        if (HasAveragePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(18, AveragePrc);
        }
        if (HasExecutedVal) {
          size += pb::CodedOutputStream.ComputeStringSize(19, ExecutedVal);
        }
        if (HasExecutedQty) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ExecutedQty);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(21, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(22, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(23, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(24, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReleaseData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReleaseData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReleaseData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReleaseData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReleaseData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReleaseData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReleaseData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReleaseData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReleaseData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReleaseData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReleaseData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReleaseData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReleaseData result = new ReleaseData();
      
      protected override ReleaseData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReleaseData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ReleaseData.Descriptor; }
      }
      
      public override ReleaseData DefaultInstanceForType {
        get { return global::quantmodel.ReleaseData.DefaultInstance; }
      }
      
      public override ReleaseData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ReleaseData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReleaseData) {
          return MergeFrom((ReleaseData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReleaseData other) {
        if (other == global::quantmodel.ReleaseData.DefaultInstance) return this;
        if (other.HasReleaseId) {
          ReleaseId = other.ReleaseId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasAllocationId) {
          AllocationId = other.AllocationId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasComplianceAuditId) {
          ComplianceAuditId = other.ComplianceAuditId;
        }
        if (other.HasClientOrderId) {
          ClientOrderId = other.ClientOrderId;
        }
        if (other.HasCounterpartyOrderId) {
          CounterpartyOrderId = other.CounterpartyOrderId;
        }
        if (other.HasReleaseStatus) {
          ReleaseStatus = other.ReleaseStatus;
        }
        if (other.HasReleaseType) {
          ReleaseType = other.ReleaseType;
        }
        if (other.HasTif) {
          Tif = other.Tif;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasReleaseQty) {
          ReleaseQty = other.ReleaseQty;
        }
        if (other.HasLimitPrc) {
          LimitPrc = other.LimitPrc;
        }
        if (other.HasStopPrc) {
          StopPrc = other.StopPrc;
        }
        if (other.HasAveragePrc) {
          AveragePrc = other.AveragePrc;
        }
        if (other.HasExecutedVal) {
          ExecutedVal = other.ExecutedVal;
        }
        if (other.HasExecutedQty) {
          ExecutedQty = other.ExecutedQty;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ReleaseId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
            case 26: {
              AccountId = input.ReadString();
              break;
            }
            case 34: {
              OrderId = input.ReadString();
              break;
            }
            case 42: {
              AllocationId = input.ReadString();
              break;
            }
            case 50: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 58: {
              InstrumentId = input.ReadString();
              break;
            }
            case 66: {
              ComplianceAuditId = input.ReadString();
              break;
            }
            case 74: {
              ClientOrderId = input.ReadString();
              break;
            }
            case 82: {
              CounterpartyOrderId = input.ReadString();
              break;
            }
            case 90: {
              ReleaseStatus = input.ReadString();
              break;
            }
            case 98: {
              ReleaseType = input.ReadString();
              break;
            }
            case 106: {
              Tif = input.ReadString();
              break;
            }
            case 114: {
              SideCode = input.ReadString();
              break;
            }
            case 122: {
              ReleaseQty = input.ReadString();
              break;
            }
            case 130: {
              LimitPrc = input.ReadString();
              break;
            }
            case 138: {
              StopPrc = input.ReadString();
              break;
            }
            case 146: {
              AveragePrc = input.ReadString();
              break;
            }
            case 154: {
              ExecutedVal = input.ReadString();
              break;
            }
            case 162: {
              ExecutedQty = input.ReadString();
              break;
            }
            case 170: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 178: {
              AddedBy = input.ReadString();
              break;
            }
            case 186: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 194: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasReleaseId {
        get { return result.HasReleaseId; }
      }
      public string ReleaseId {
        get { return result.ReleaseId; }
        set { SetReleaseId(value); }
      }
      public Builder SetReleaseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseId = true;
        result.releaseId_ = value;
        return this;
      }
      public Builder ClearReleaseId() {
        result.hasReleaseId = false;
        result.releaseId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasOrderId {
        get { return result.HasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasAllocationId {
        get { return result.HasAllocationId; }
      }
      public string AllocationId {
        get { return result.AllocationId; }
        set { SetAllocationId(value); }
      }
      public Builder SetAllocationId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAllocationId = true;
        result.allocationId_ = value;
        return this;
      }
      public Builder ClearAllocationId() {
        result.hasAllocationId = false;
        result.allocationId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasComplianceAuditId {
        get { return result.HasComplianceAuditId; }
      }
      public string ComplianceAuditId {
        get { return result.ComplianceAuditId; }
        set { SetComplianceAuditId(value); }
      }
      public Builder SetComplianceAuditId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasComplianceAuditId = true;
        result.complianceAuditId_ = value;
        return this;
      }
      public Builder ClearComplianceAuditId() {
        result.hasComplianceAuditId = false;
        result.complianceAuditId_ = "";
        return this;
      }
      
      public bool HasClientOrderId {
        get { return result.HasClientOrderId; }
      }
      public string ClientOrderId {
        get { return result.ClientOrderId; }
        set { SetClientOrderId(value); }
      }
      public Builder SetClientOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClientOrderId = true;
        result.clientOrderId_ = value;
        return this;
      }
      public Builder ClearClientOrderId() {
        result.hasClientOrderId = false;
        result.clientOrderId_ = "";
        return this;
      }
      
      public bool HasCounterpartyOrderId {
        get { return result.HasCounterpartyOrderId; }
      }
      public string CounterpartyOrderId {
        get { return result.CounterpartyOrderId; }
        set { SetCounterpartyOrderId(value); }
      }
      public Builder SetCounterpartyOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCounterpartyOrderId = true;
        result.counterpartyOrderId_ = value;
        return this;
      }
      public Builder ClearCounterpartyOrderId() {
        result.hasCounterpartyOrderId = false;
        result.counterpartyOrderId_ = "";
        return this;
      }
      
      public bool HasReleaseStatus {
        get { return result.HasReleaseStatus; }
      }
      public string ReleaseStatus {
        get { return result.ReleaseStatus; }
        set { SetReleaseStatus(value); }
      }
      public Builder SetReleaseStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseStatus = true;
        result.releaseStatus_ = value;
        return this;
      }
      public Builder ClearReleaseStatus() {
        result.hasReleaseStatus = false;
        result.releaseStatus_ = "";
        return this;
      }
      
      public bool HasReleaseType {
        get { return result.HasReleaseType; }
      }
      public string ReleaseType {
        get { return result.ReleaseType; }
        set { SetReleaseType(value); }
      }
      public Builder SetReleaseType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseType = true;
        result.releaseType_ = value;
        return this;
      }
      public Builder ClearReleaseType() {
        result.hasReleaseType = false;
        result.releaseType_ = "";
        return this;
      }
      
      public bool HasTif {
        get { return result.HasTif; }
      }
      public string Tif {
        get { return result.Tif; }
        set { SetTif(value); }
      }
      public Builder SetTif(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTif = true;
        result.tif_ = value;
        return this;
      }
      public Builder ClearTif() {
        result.hasTif = false;
        result.tif_ = "";
        return this;
      }
      
      public bool HasSideCode {
        get { return result.HasSideCode; }
      }
      public string SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = "";
        return this;
      }
      
      public bool HasReleaseQty {
        get { return result.HasReleaseQty; }
      }
      public string ReleaseQty {
        get { return result.ReleaseQty; }
        set { SetReleaseQty(value); }
      }
      public Builder SetReleaseQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseQty = true;
        result.releaseQty_ = value;
        return this;
      }
      public Builder ClearReleaseQty() {
        result.hasReleaseQty = false;
        result.releaseQty_ = "0";
        return this;
      }
      
      public bool HasLimitPrc {
        get { return result.HasLimitPrc; }
      }
      public string LimitPrc {
        get { return result.LimitPrc; }
        set { SetLimitPrc(value); }
      }
      public Builder SetLimitPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLimitPrc = true;
        result.limitPrc_ = value;
        return this;
      }
      public Builder ClearLimitPrc() {
        result.hasLimitPrc = false;
        result.limitPrc_ = "0";
        return this;
      }
      
      public bool HasStopPrc {
        get { return result.HasStopPrc; }
      }
      public string StopPrc {
        get { return result.StopPrc; }
        set { SetStopPrc(value); }
      }
      public Builder SetStopPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopPrc = true;
        result.stopPrc_ = value;
        return this;
      }
      public Builder ClearStopPrc() {
        result.hasStopPrc = false;
        result.stopPrc_ = "0";
        return this;
      }
      
      public bool HasAveragePrc {
        get { return result.HasAveragePrc; }
      }
      public string AveragePrc {
        get { return result.AveragePrc; }
        set { SetAveragePrc(value); }
      }
      public Builder SetAveragePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAveragePrc = true;
        result.averagePrc_ = value;
        return this;
      }
      public Builder ClearAveragePrc() {
        result.hasAveragePrc = false;
        result.averagePrc_ = "0";
        return this;
      }
      
      public bool HasExecutedVal {
        get { return result.HasExecutedVal; }
      }
      public string ExecutedVal {
        get { return result.ExecutedVal; }
        set { SetExecutedVal(value); }
      }
      public Builder SetExecutedVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedVal = true;
        result.executedVal_ = value;
        return this;
      }
      public Builder ClearExecutedVal() {
        result.hasExecutedVal = false;
        result.executedVal_ = "0";
        return this;
      }
      
      public bool HasExecutedQty {
        get { return result.HasExecutedQty; }
      }
      public string ExecutedQty {
        get { return result.ExecutedQty; }
        set { SetExecutedQty(value); }
      }
      public Builder SetExecutedQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutedQty = true;
        result.executedQty_ = value;
        return this;
      }
      public Builder ClearExecutedQty() {
        result.hasExecutedQty = false;
        result.executedQty_ = "0";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static ReleaseData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ExecutionData : pb::GeneratedMessage<ExecutionData, ExecutionData.Builder> {
    private static readonly ExecutionData defaultInstance = new Builder().BuildPartial();
    public static ExecutionData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecutionData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ExecutionData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ExecutionData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecutionData, ExecutionData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ExecutionData__FieldAccessorTable; }
    }
    
    public const int ExecutionIdFieldNumber = 1;
    private bool hasExecutionId;
    private string executionId_ = "";
    public bool HasExecutionId {
      get { return hasExecutionId; }
    }
    public string ExecutionId {
      get { return executionId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int AccountIdFieldNumber = 3;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int OrderIdFieldNumber = 4;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int ReleaseIdFieldNumber = 5;
    private bool hasReleaseId;
    private string releaseId_ = "";
    public bool HasReleaseId {
      get { return hasReleaseId; }
    }
    public string ReleaseId {
      get { return releaseId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 6;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int InstrumentIdFieldNumber = 7;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int ClientOrderIdFieldNumber = 8;
    private bool hasClientOrderId;
    private string clientOrderId_ = "";
    public bool HasClientOrderId {
      get { return hasClientOrderId; }
    }
    public string ClientOrderId {
      get { return clientOrderId_; }
    }
    
    public const int CounterpartyExecutionIdFieldNumber = 9;
    private bool hasCounterpartyExecutionId;
    private string counterpartyExecutionId_ = "";
    public bool HasCounterpartyExecutionId {
      get { return hasCounterpartyExecutionId; }
    }
    public string CounterpartyExecutionId {
      get { return counterpartyExecutionId_; }
    }
    
    public const int SideCodeFieldNumber = 10;
    private bool hasSideCode;
    private string sideCode_ = "";
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public string SideCode {
      get { return sideCode_; }
    }
    
    public const int ExecutionCcyFieldNumber = 11;
    private bool hasExecutionCcy;
    private string executionCcy_ = "";
    public bool HasExecutionCcy {
      get { return hasExecutionCcy; }
    }
    public string ExecutionCcy {
      get { return executionCcy_; }
    }
    
    public const int ExecutionStatusFieldNumber = 12;
    private bool hasExecutionStatus;
    private string executionStatus_ = "";
    public bool HasExecutionStatus {
      get { return hasExecutionStatus; }
    }
    public string ExecutionStatus {
      get { return executionStatus_; }
    }
    
    public const int ExecutionPrcFieldNumber = 13;
    private bool hasExecutionPrc;
    private string executionPrc_ = "0";
    public bool HasExecutionPrc {
      get { return hasExecutionPrc; }
    }
    public string ExecutionPrc {
      get { return executionPrc_; }
    }
    
    public const int ExecutionQtyFieldNumber = 14;
    private bool hasExecutionQty;
    private string executionQty_ = "0";
    public bool HasExecutionQty {
      get { return hasExecutionQty; }
    }
    public string ExecutionQty {
      get { return executionQty_; }
    }
    
    public const int ExecutionValFieldNumber = 15;
    private bool hasExecutionVal;
    private string executionVal_ = "0";
    public bool HasExecutionVal {
      get { return hasExecutionVal; }
    }
    public string ExecutionVal {
      get { return executionVal_; }
    }
    
    public const int LeavesQtyFieldNumber = 16;
    private bool hasLeavesQty;
    private string leavesQty_ = "0";
    public bool HasLeavesQty {
      get { return hasLeavesQty; }
    }
    public string LeavesQty {
      get { return leavesQty_; }
    }
    
    public const int AveragePrcFieldNumber = 17;
    private bool hasAveragePrc;
    private string averagePrc_ = "0";
    public bool HasAveragePrc {
      get { return hasAveragePrc; }
    }
    public string AveragePrc {
      get { return averagePrc_; }
    }
    
    public const int LegTypeFieldNumber = 18;
    private bool hasLegType;
    private string legType_ = "1";
    public bool HasLegType {
      get { return hasLegType; }
    }
    public string LegType {
      get { return legType_; }
    }
    
    public const int AddedDatetimeFieldNumber = 19;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 20;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 21;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 22;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasExecutionId) {
        output.WriteString(1, ExecutionId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      if (HasAccountId) {
        output.WriteString(3, AccountId);
      }
      if (HasOrderId) {
        output.WriteString(4, OrderId);
      }
      if (HasReleaseId) {
        output.WriteString(5, ReleaseId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(6, InvestmentSystemId);
      }
      if (HasInstrumentId) {
        output.WriteString(7, InstrumentId);
      }
      if (HasClientOrderId) {
        output.WriteString(8, ClientOrderId);
      }
      if (HasCounterpartyExecutionId) {
        output.WriteString(9, CounterpartyExecutionId);
      }
      if (HasSideCode) {
        output.WriteString(10, SideCode);
      }
      if (HasExecutionCcy) {
        output.WriteString(11, ExecutionCcy);
      }
      if (HasExecutionStatus) {
        output.WriteString(12, ExecutionStatus);
      }
      if (HasExecutionPrc) {
        output.WriteString(13, ExecutionPrc);
      }
      if (HasExecutionQty) {
        output.WriteString(14, ExecutionQty);
      }
      if (HasExecutionVal) {
        output.WriteString(15, ExecutionVal);
      }
      if (HasLeavesQty) {
        output.WriteString(16, LeavesQty);
      }
      if (HasAveragePrc) {
        output.WriteString(17, AveragePrc);
      }
      if (HasLegType) {
        output.WriteString(18, LegType);
      }
      if (HasAddedDatetime) {
        output.WriteString(19, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(20, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(21, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(22, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasExecutionId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ExecutionId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AccountId);
        }
        if (HasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, OrderId);
        }
        if (HasReleaseId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ReleaseId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, InvestmentSystemId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, InstrumentId);
        }
        if (HasClientOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ClientOrderId);
        }
        if (HasCounterpartyExecutionId) {
          size += pb::CodedOutputStream.ComputeStringSize(9, CounterpartyExecutionId);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SideCode);
        }
        if (HasExecutionCcy) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ExecutionCcy);
        }
        if (HasExecutionStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(12, ExecutionStatus);
        }
        if (HasExecutionPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(13, ExecutionPrc);
        }
        if (HasExecutionQty) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ExecutionQty);
        }
        if (HasExecutionVal) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ExecutionVal);
        }
        if (HasLeavesQty) {
          size += pb::CodedOutputStream.ComputeStringSize(16, LeavesQty);
        }
        if (HasAveragePrc) {
          size += pb::CodedOutputStream.ComputeStringSize(17, AveragePrc);
        }
        if (HasLegType) {
          size += pb::CodedOutputStream.ComputeStringSize(18, LegType);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(19, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(20, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(21, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(22, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecutionData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecutionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecutionData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecutionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecutionData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecutionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecutionData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecutionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecutionData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecutionData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecutionData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ExecutionData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ExecutionData result = new ExecutionData();
      
      protected override ExecutionData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ExecutionData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ExecutionData.Descriptor; }
      }
      
      public override ExecutionData DefaultInstanceForType {
        get { return global::quantmodel.ExecutionData.DefaultInstance; }
      }
      
      public override ExecutionData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ExecutionData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecutionData) {
          return MergeFrom((ExecutionData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecutionData other) {
        if (other == global::quantmodel.ExecutionData.DefaultInstance) return this;
        if (other.HasExecutionId) {
          ExecutionId = other.ExecutionId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasReleaseId) {
          ReleaseId = other.ReleaseId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasClientOrderId) {
          ClientOrderId = other.ClientOrderId;
        }
        if (other.HasCounterpartyExecutionId) {
          CounterpartyExecutionId = other.CounterpartyExecutionId;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasExecutionCcy) {
          ExecutionCcy = other.ExecutionCcy;
        }
        if (other.HasExecutionStatus) {
          ExecutionStatus = other.ExecutionStatus;
        }
        if (other.HasExecutionPrc) {
          ExecutionPrc = other.ExecutionPrc;
        }
        if (other.HasExecutionQty) {
          ExecutionQty = other.ExecutionQty;
        }
        if (other.HasExecutionVal) {
          ExecutionVal = other.ExecutionVal;
        }
        if (other.HasLeavesQty) {
          LeavesQty = other.LeavesQty;
        }
        if (other.HasAveragePrc) {
          AveragePrc = other.AveragePrc;
        }
        if (other.HasLegType) {
          LegType = other.LegType;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ExecutionId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
            case 26: {
              AccountId = input.ReadString();
              break;
            }
            case 34: {
              OrderId = input.ReadString();
              break;
            }
            case 42: {
              ReleaseId = input.ReadString();
              break;
            }
            case 50: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 58: {
              InstrumentId = input.ReadString();
              break;
            }
            case 66: {
              ClientOrderId = input.ReadString();
              break;
            }
            case 74: {
              CounterpartyExecutionId = input.ReadString();
              break;
            }
            case 82: {
              SideCode = input.ReadString();
              break;
            }
            case 90: {
              ExecutionCcy = input.ReadString();
              break;
            }
            case 98: {
              ExecutionStatus = input.ReadString();
              break;
            }
            case 106: {
              ExecutionPrc = input.ReadString();
              break;
            }
            case 114: {
              ExecutionQty = input.ReadString();
              break;
            }
            case 122: {
              ExecutionVal = input.ReadString();
              break;
            }
            case 130: {
              LeavesQty = input.ReadString();
              break;
            }
            case 138: {
              AveragePrc = input.ReadString();
              break;
            }
            case 146: {
              LegType = input.ReadString();
              break;
            }
            case 154: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 162: {
              AddedBy = input.ReadString();
              break;
            }
            case 170: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 178: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasExecutionId {
        get { return result.HasExecutionId; }
      }
      public string ExecutionId {
        get { return result.ExecutionId; }
        set { SetExecutionId(value); }
      }
      public Builder SetExecutionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionId = true;
        result.executionId_ = value;
        return this;
      }
      public Builder ClearExecutionId() {
        result.hasExecutionId = false;
        result.executionId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasOrderId {
        get { return result.HasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasReleaseId {
        get { return result.HasReleaseId; }
      }
      public string ReleaseId {
        get { return result.ReleaseId; }
        set { SetReleaseId(value); }
      }
      public Builder SetReleaseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseId = true;
        result.releaseId_ = value;
        return this;
      }
      public Builder ClearReleaseId() {
        result.hasReleaseId = false;
        result.releaseId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasClientOrderId {
        get { return result.HasClientOrderId; }
      }
      public string ClientOrderId {
        get { return result.ClientOrderId; }
        set { SetClientOrderId(value); }
      }
      public Builder SetClientOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClientOrderId = true;
        result.clientOrderId_ = value;
        return this;
      }
      public Builder ClearClientOrderId() {
        result.hasClientOrderId = false;
        result.clientOrderId_ = "";
        return this;
      }
      
      public bool HasCounterpartyExecutionId {
        get { return result.HasCounterpartyExecutionId; }
      }
      public string CounterpartyExecutionId {
        get { return result.CounterpartyExecutionId; }
        set { SetCounterpartyExecutionId(value); }
      }
      public Builder SetCounterpartyExecutionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCounterpartyExecutionId = true;
        result.counterpartyExecutionId_ = value;
        return this;
      }
      public Builder ClearCounterpartyExecutionId() {
        result.hasCounterpartyExecutionId = false;
        result.counterpartyExecutionId_ = "";
        return this;
      }
      
      public bool HasSideCode {
        get { return result.HasSideCode; }
      }
      public string SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = "";
        return this;
      }
      
      public bool HasExecutionCcy {
        get { return result.HasExecutionCcy; }
      }
      public string ExecutionCcy {
        get { return result.ExecutionCcy; }
        set { SetExecutionCcy(value); }
      }
      public Builder SetExecutionCcy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionCcy = true;
        result.executionCcy_ = value;
        return this;
      }
      public Builder ClearExecutionCcy() {
        result.hasExecutionCcy = false;
        result.executionCcy_ = "";
        return this;
      }
      
      public bool HasExecutionStatus {
        get { return result.HasExecutionStatus; }
      }
      public string ExecutionStatus {
        get { return result.ExecutionStatus; }
        set { SetExecutionStatus(value); }
      }
      public Builder SetExecutionStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionStatus = true;
        result.executionStatus_ = value;
        return this;
      }
      public Builder ClearExecutionStatus() {
        result.hasExecutionStatus = false;
        result.executionStatus_ = "";
        return this;
      }
      
      public bool HasExecutionPrc {
        get { return result.HasExecutionPrc; }
      }
      public string ExecutionPrc {
        get { return result.ExecutionPrc; }
        set { SetExecutionPrc(value); }
      }
      public Builder SetExecutionPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionPrc = true;
        result.executionPrc_ = value;
        return this;
      }
      public Builder ClearExecutionPrc() {
        result.hasExecutionPrc = false;
        result.executionPrc_ = "0";
        return this;
      }
      
      public bool HasExecutionQty {
        get { return result.HasExecutionQty; }
      }
      public string ExecutionQty {
        get { return result.ExecutionQty; }
        set { SetExecutionQty(value); }
      }
      public Builder SetExecutionQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionQty = true;
        result.executionQty_ = value;
        return this;
      }
      public Builder ClearExecutionQty() {
        result.hasExecutionQty = false;
        result.executionQty_ = "0";
        return this;
      }
      
      public bool HasExecutionVal {
        get { return result.HasExecutionVal; }
      }
      public string ExecutionVal {
        get { return result.ExecutionVal; }
        set { SetExecutionVal(value); }
      }
      public Builder SetExecutionVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionVal = true;
        result.executionVal_ = value;
        return this;
      }
      public Builder ClearExecutionVal() {
        result.hasExecutionVal = false;
        result.executionVal_ = "0";
        return this;
      }
      
      public bool HasLeavesQty {
        get { return result.HasLeavesQty; }
      }
      public string LeavesQty {
        get { return result.LeavesQty; }
        set { SetLeavesQty(value); }
      }
      public Builder SetLeavesQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLeavesQty = true;
        result.leavesQty_ = value;
        return this;
      }
      public Builder ClearLeavesQty() {
        result.hasLeavesQty = false;
        result.leavesQty_ = "0";
        return this;
      }
      
      public bool HasAveragePrc {
        get { return result.HasAveragePrc; }
      }
      public string AveragePrc {
        get { return result.AveragePrc; }
        set { SetAveragePrc(value); }
      }
      public Builder SetAveragePrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAveragePrc = true;
        result.averagePrc_ = value;
        return this;
      }
      public Builder ClearAveragePrc() {
        result.hasAveragePrc = false;
        result.averagePrc_ = "0";
        return this;
      }
      
      public bool HasLegType {
        get { return result.HasLegType; }
      }
      public string LegType {
        get { return result.LegType; }
        set { SetLegType(value); }
      }
      public Builder SetLegType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLegType = true;
        result.legType_ = value;
        return this;
      }
      public Builder ClearLegType() {
        result.hasLegType = false;
        result.legType_ = "1";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static ExecutionData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class InstrumentData : pb::GeneratedMessage<InstrumentData, InstrumentData.Builder> {
    private static readonly InstrumentData defaultInstance = new Builder().BuildPartial();
    public static InstrumentData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InstrumentData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InstrumentData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InstrumentData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InstrumentData, InstrumentData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InstrumentData__FieldAccessorTable; }
    }
    
    public const int InstrumentIdFieldNumber = 1;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int InstrumentTypeFieldNumber = 2;
    private bool hasInstrumentType;
    private string instrumentType_ = "";
    public bool HasInstrumentType {
      get { return hasInstrumentType; }
    }
    public string InstrumentType {
      get { return instrumentType_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SymbolFieldNumber = 4;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int CusipFieldNumber = 5;
    private bool hasCusip;
    private string cusip_ = "";
    public bool HasCusip {
      get { return hasCusip; }
    }
    public string Cusip {
      get { return cusip_; }
    }
    
    public const int SedolFieldNumber = 6;
    private bool hasSedol;
    private string sedol_ = "";
    public bool HasSedol {
      get { return hasSedol; }
    }
    public string Sedol {
      get { return sedol_; }
    }
    
    public const int IsinFieldNumber = 7;
    private bool hasIsin;
    private string isin_ = "";
    public bool HasIsin {
      get { return hasIsin; }
    }
    public string Isin {
      get { return isin_; }
    }
    
    public const int RicFieldNumber = 8;
    private bool hasRic;
    private string ric_ = "";
    public bool HasRic {
      get { return hasRic; }
    }
    public string Ric {
      get { return ric_; }
    }
    
    public const int CfiCodeFieldNumber = 9;
    private bool hasCfiCode;
    private string cfiCode_ = "";
    public bool HasCfiCode {
      get { return hasCfiCode; }
    }
    public string CfiCode {
      get { return cfiCode_; }
    }
    
    public const int SecurityIdFieldNumber = 10;
    private bool hasSecurityId;
    private string securityId_ = "";
    public bool HasSecurityId {
      get { return hasSecurityId; }
    }
    public string SecurityId {
      get { return securityId_; }
    }
    
    public const int SecurityTypeFieldNumber = 11;
    private bool hasSecurityType;
    private string securityType_ = "";
    public bool HasSecurityType {
      get { return hasSecurityType; }
    }
    public string SecurityType {
      get { return securityType_; }
    }
    
    public const int SecurityDescFieldNumber = 12;
    private bool hasSecurityDesc;
    private string securityDesc_ = "";
    public bool HasSecurityDesc {
      get { return hasSecurityDesc; }
    }
    public string SecurityDesc {
      get { return securityDesc_; }
    }
    
    public const int SecurityExchangeFieldNumber = 13;
    private bool hasSecurityExchange;
    private string securityExchange_ = "";
    public bool HasSecurityExchange {
      get { return hasSecurityExchange; }
    }
    public string SecurityExchange {
      get { return securityExchange_; }
    }
    
    public const int MaturityMonthYearFieldNumber = 14;
    private bool hasMaturityMonthYear;
    private string maturityMonthYear_ = "";
    public bool HasMaturityMonthYear {
      get { return hasMaturityMonthYear; }
    }
    public string MaturityMonthYear {
      get { return maturityMonthYear_; }
    }
    
    public const int BaseCcyFieldNumber = 15;
    private bool hasBaseCcy;
    private string baseCcy_ = "";
    public bool HasBaseCcy {
      get { return hasBaseCcy; }
    }
    public string BaseCcy {
      get { return baseCcy_; }
    }
    
    public const int LastPrcFieldNumber = 16;
    private bool hasLastPrc;
    private string lastPrc_ = "0";
    public bool HasLastPrc {
      get { return hasLastPrc; }
    }
    public string LastPrc {
      get { return lastPrc_; }
    }
    
    public const int MarkPrcFieldNumber = 17;
    private bool hasMarkPrc;
    private string markPrc_ = "0";
    public bool HasMarkPrc {
      get { return hasMarkPrc; }
    }
    public string MarkPrc {
      get { return markPrc_; }
    }
    
    public const int MarkDatetimeFieldNumber = 18;
    private bool hasMarkDatetime;
    private string markDatetime_ = "";
    public bool HasMarkDatetime {
      get { return hasMarkDatetime; }
    }
    public string MarkDatetime {
      get { return markDatetime_; }
    }
    
    public const int MultiplierFieldNumber = 19;
    private bool hasMultiplier;
    private string multiplier_ = "";
    public bool HasMultiplier {
      get { return hasMultiplier; }
    }
    public string Multiplier {
      get { return multiplier_; }
    }
    
    public const int ExchangePriceFactorFieldNumber = 20;
    private bool hasExchangePriceFactor;
    private string exchangePriceFactor_ = "";
    public bool HasExchangePriceFactor {
      get { return hasExchangePriceFactor; }
    }
    public string ExchangePriceFactor {
      get { return exchangePriceFactor_; }
    }
    
    public const int RolloverDatetimeFieldNumber = 21;
    private bool hasRolloverDatetime;
    private string rolloverDatetime_ = "";
    public bool HasRolloverDatetime {
      get { return hasRolloverDatetime; }
    }
    public string RolloverDatetime {
      get { return rolloverDatetime_; }
    }
    
    public const int IsActiveFieldNumber = 22;
    private bool hasIsActive;
    private string isActive_ = "";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public const int AddedDatetimeFieldNumber = 23;
    private bool hasAddedDatetime;
    private string addedDatetime_ = "";
    public bool HasAddedDatetime {
      get { return hasAddedDatetime; }
    }
    public string AddedDatetime {
      get { return addedDatetime_; }
    }
    
    public const int AddedByFieldNumber = 24;
    private bool hasAddedBy;
    private string addedBy_ = "";
    public bool HasAddedBy {
      get { return hasAddedBy; }
    }
    public string AddedBy {
      get { return addedBy_; }
    }
    
    public const int UpdatedDatetimeFieldNumber = 25;
    private bool hasUpdatedDatetime;
    private string updatedDatetime_ = "";
    public bool HasUpdatedDatetime {
      get { return hasUpdatedDatetime; }
    }
    public string UpdatedDatetime {
      get { return updatedDatetime_; }
    }
    
    public const int UpdatedByFieldNumber = 26;
    private bool hasUpdatedBy;
    private string updatedBy_ = "";
    public bool HasUpdatedBy {
      get { return hasUpdatedBy; }
    }
    public string UpdatedBy {
      get { return updatedBy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInstrumentId) {
        output.WriteString(1, InstrumentId);
      }
      if (HasInstrumentType) {
        output.WriteString(2, InstrumentType);
      }
      if (HasName) {
        output.WriteString(3, Name);
      }
      if (HasSymbol) {
        output.WriteString(4, Symbol);
      }
      if (HasCusip) {
        output.WriteString(5, Cusip);
      }
      if (HasSedol) {
        output.WriteString(6, Sedol);
      }
      if (HasIsin) {
        output.WriteString(7, Isin);
      }
      if (HasRic) {
        output.WriteString(8, Ric);
      }
      if (HasCfiCode) {
        output.WriteString(9, CfiCode);
      }
      if (HasSecurityId) {
        output.WriteString(10, SecurityId);
      }
      if (HasSecurityType) {
        output.WriteString(11, SecurityType);
      }
      if (HasSecurityDesc) {
        output.WriteString(12, SecurityDesc);
      }
      if (HasSecurityExchange) {
        output.WriteString(13, SecurityExchange);
      }
      if (HasMaturityMonthYear) {
        output.WriteString(14, MaturityMonthYear);
      }
      if (HasBaseCcy) {
        output.WriteString(15, BaseCcy);
      }
      if (HasLastPrc) {
        output.WriteString(16, LastPrc);
      }
      if (HasMarkPrc) {
        output.WriteString(17, MarkPrc);
      }
      if (HasMarkDatetime) {
        output.WriteString(18, MarkDatetime);
      }
      if (HasMultiplier) {
        output.WriteString(19, Multiplier);
      }
      if (HasExchangePriceFactor) {
        output.WriteString(20, ExchangePriceFactor);
      }
      if (HasRolloverDatetime) {
        output.WriteString(21, RolloverDatetime);
      }
      if (HasIsActive) {
        output.WriteString(22, IsActive);
      }
      if (HasAddedDatetime) {
        output.WriteString(23, AddedDatetime);
      }
      if (HasAddedBy) {
        output.WriteString(24, AddedBy);
      }
      if (HasUpdatedDatetime) {
        output.WriteString(25, UpdatedDatetime);
      }
      if (HasUpdatedBy) {
        output.WriteString(26, UpdatedBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstrumentId);
        }
        if (HasInstrumentType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentType);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (HasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Symbol);
        }
        if (HasCusip) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Cusip);
        }
        if (HasSedol) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Sedol);
        }
        if (HasIsin) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Isin);
        }
        if (HasRic) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Ric);
        }
        if (HasCfiCode) {
          size += pb::CodedOutputStream.ComputeStringSize(9, CfiCode);
        }
        if (HasSecurityId) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SecurityId);
        }
        if (HasSecurityType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, SecurityType);
        }
        if (HasSecurityDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(12, SecurityDesc);
        }
        if (HasSecurityExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(13, SecurityExchange);
        }
        if (HasMaturityMonthYear) {
          size += pb::CodedOutputStream.ComputeStringSize(14, MaturityMonthYear);
        }
        if (HasBaseCcy) {
          size += pb::CodedOutputStream.ComputeStringSize(15, BaseCcy);
        }
        if (HasLastPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(16, LastPrc);
        }
        if (HasMarkPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(17, MarkPrc);
        }
        if (HasMarkDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(18, MarkDatetime);
        }
        if (HasMultiplier) {
          size += pb::CodedOutputStream.ComputeStringSize(19, Multiplier);
        }
        if (HasExchangePriceFactor) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ExchangePriceFactor);
        }
        if (HasRolloverDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(21, RolloverDatetime);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(22, IsActive);
        }
        if (HasAddedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(23, AddedDatetime);
        }
        if (HasAddedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(24, AddedBy);
        }
        if (HasUpdatedDatetime) {
          size += pb::CodedOutputStream.ComputeStringSize(25, UpdatedDatetime);
        }
        if (HasUpdatedBy) {
          size += pb::CodedOutputStream.ComputeStringSize(26, UpdatedBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InstrumentData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InstrumentData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InstrumentData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InstrumentData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InstrumentData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InstrumentData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InstrumentData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InstrumentData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InstrumentData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InstrumentData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InstrumentData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InstrumentData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InstrumentData result = new InstrumentData();
      
      protected override InstrumentData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InstrumentData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.InstrumentData.Descriptor; }
      }
      
      public override InstrumentData DefaultInstanceForType {
        get { return global::quantmodel.InstrumentData.DefaultInstance; }
      }
      
      public override InstrumentData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InstrumentData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InstrumentData) {
          return MergeFrom((InstrumentData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InstrumentData other) {
        if (other == global::quantmodel.InstrumentData.DefaultInstance) return this;
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasInstrumentType) {
          InstrumentType = other.InstrumentType;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasCusip) {
          Cusip = other.Cusip;
        }
        if (other.HasSedol) {
          Sedol = other.Sedol;
        }
        if (other.HasIsin) {
          Isin = other.Isin;
        }
        if (other.HasRic) {
          Ric = other.Ric;
        }
        if (other.HasCfiCode) {
          CfiCode = other.CfiCode;
        }
        if (other.HasSecurityId) {
          SecurityId = other.SecurityId;
        }
        if (other.HasSecurityType) {
          SecurityType = other.SecurityType;
        }
        if (other.HasSecurityDesc) {
          SecurityDesc = other.SecurityDesc;
        }
        if (other.HasSecurityExchange) {
          SecurityExchange = other.SecurityExchange;
        }
        if (other.HasMaturityMonthYear) {
          MaturityMonthYear = other.MaturityMonthYear;
        }
        if (other.HasBaseCcy) {
          BaseCcy = other.BaseCcy;
        }
        if (other.HasLastPrc) {
          LastPrc = other.LastPrc;
        }
        if (other.HasMarkPrc) {
          MarkPrc = other.MarkPrc;
        }
        if (other.HasMarkDatetime) {
          MarkDatetime = other.MarkDatetime;
        }
        if (other.HasMultiplier) {
          Multiplier = other.Multiplier;
        }
        if (other.HasExchangePriceFactor) {
          ExchangePriceFactor = other.ExchangePriceFactor;
        }
        if (other.HasRolloverDatetime) {
          RolloverDatetime = other.RolloverDatetime;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        if (other.HasAddedDatetime) {
          AddedDatetime = other.AddedDatetime;
        }
        if (other.HasAddedBy) {
          AddedBy = other.AddedBy;
        }
        if (other.HasUpdatedDatetime) {
          UpdatedDatetime = other.UpdatedDatetime;
        }
        if (other.HasUpdatedBy) {
          UpdatedBy = other.UpdatedBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InstrumentId = input.ReadString();
              break;
            }
            case 18: {
              InstrumentType = input.ReadString();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 34: {
              Symbol = input.ReadString();
              break;
            }
            case 42: {
              Cusip = input.ReadString();
              break;
            }
            case 50: {
              Sedol = input.ReadString();
              break;
            }
            case 58: {
              Isin = input.ReadString();
              break;
            }
            case 66: {
              Ric = input.ReadString();
              break;
            }
            case 74: {
              CfiCode = input.ReadString();
              break;
            }
            case 82: {
              SecurityId = input.ReadString();
              break;
            }
            case 90: {
              SecurityType = input.ReadString();
              break;
            }
            case 98: {
              SecurityDesc = input.ReadString();
              break;
            }
            case 106: {
              SecurityExchange = input.ReadString();
              break;
            }
            case 114: {
              MaturityMonthYear = input.ReadString();
              break;
            }
            case 122: {
              BaseCcy = input.ReadString();
              break;
            }
            case 130: {
              LastPrc = input.ReadString();
              break;
            }
            case 138: {
              MarkPrc = input.ReadString();
              break;
            }
            case 146: {
              MarkDatetime = input.ReadString();
              break;
            }
            case 154: {
              Multiplier = input.ReadString();
              break;
            }
            case 162: {
              ExchangePriceFactor = input.ReadString();
              break;
            }
            case 170: {
              RolloverDatetime = input.ReadString();
              break;
            }
            case 178: {
              IsActive = input.ReadString();
              break;
            }
            case 186: {
              AddedDatetime = input.ReadString();
              break;
            }
            case 194: {
              AddedBy = input.ReadString();
              break;
            }
            case 202: {
              UpdatedDatetime = input.ReadString();
              break;
            }
            case 210: {
              UpdatedBy = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasInstrumentType {
        get { return result.HasInstrumentType; }
      }
      public string InstrumentType {
        get { return result.InstrumentType; }
        set { SetInstrumentType(value); }
      }
      public Builder SetInstrumentType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentType = true;
        result.instrumentType_ = value;
        return this;
      }
      public Builder ClearInstrumentType() {
        result.hasInstrumentType = false;
        result.instrumentType_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.HasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasCusip {
        get { return result.HasCusip; }
      }
      public string Cusip {
        get { return result.Cusip; }
        set { SetCusip(value); }
      }
      public Builder SetCusip(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCusip = true;
        result.cusip_ = value;
        return this;
      }
      public Builder ClearCusip() {
        result.hasCusip = false;
        result.cusip_ = "";
        return this;
      }
      
      public bool HasSedol {
        get { return result.HasSedol; }
      }
      public string Sedol {
        get { return result.Sedol; }
        set { SetSedol(value); }
      }
      public Builder SetSedol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSedol = true;
        result.sedol_ = value;
        return this;
      }
      public Builder ClearSedol() {
        result.hasSedol = false;
        result.sedol_ = "";
        return this;
      }
      
      public bool HasIsin {
        get { return result.HasIsin; }
      }
      public string Isin {
        get { return result.Isin; }
        set { SetIsin(value); }
      }
      public Builder SetIsin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsin = true;
        result.isin_ = value;
        return this;
      }
      public Builder ClearIsin() {
        result.hasIsin = false;
        result.isin_ = "";
        return this;
      }
      
      public bool HasRic {
        get { return result.HasRic; }
      }
      public string Ric {
        get { return result.Ric; }
        set { SetRic(value); }
      }
      public Builder SetRic(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRic = true;
        result.ric_ = value;
        return this;
      }
      public Builder ClearRic() {
        result.hasRic = false;
        result.ric_ = "";
        return this;
      }
      
      public bool HasCfiCode {
        get { return result.HasCfiCode; }
      }
      public string CfiCode {
        get { return result.CfiCode; }
        set { SetCfiCode(value); }
      }
      public Builder SetCfiCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCfiCode = true;
        result.cfiCode_ = value;
        return this;
      }
      public Builder ClearCfiCode() {
        result.hasCfiCode = false;
        result.cfiCode_ = "";
        return this;
      }
      
      public bool HasSecurityId {
        get { return result.HasSecurityId; }
      }
      public string SecurityId {
        get { return result.SecurityId; }
        set { SetSecurityId(value); }
      }
      public Builder SetSecurityId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityId = true;
        result.securityId_ = value;
        return this;
      }
      public Builder ClearSecurityId() {
        result.hasSecurityId = false;
        result.securityId_ = "";
        return this;
      }
      
      public bool HasSecurityType {
        get { return result.HasSecurityType; }
      }
      public string SecurityType {
        get { return result.SecurityType; }
        set { SetSecurityType(value); }
      }
      public Builder SetSecurityType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityType = true;
        result.securityType_ = value;
        return this;
      }
      public Builder ClearSecurityType() {
        result.hasSecurityType = false;
        result.securityType_ = "";
        return this;
      }
      
      public bool HasSecurityDesc {
        get { return result.HasSecurityDesc; }
      }
      public string SecurityDesc {
        get { return result.SecurityDesc; }
        set { SetSecurityDesc(value); }
      }
      public Builder SetSecurityDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityDesc = true;
        result.securityDesc_ = value;
        return this;
      }
      public Builder ClearSecurityDesc() {
        result.hasSecurityDesc = false;
        result.securityDesc_ = "";
        return this;
      }
      
      public bool HasSecurityExchange {
        get { return result.HasSecurityExchange; }
      }
      public string SecurityExchange {
        get { return result.SecurityExchange; }
        set { SetSecurityExchange(value); }
      }
      public Builder SetSecurityExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityExchange = true;
        result.securityExchange_ = value;
        return this;
      }
      public Builder ClearSecurityExchange() {
        result.hasSecurityExchange = false;
        result.securityExchange_ = "";
        return this;
      }
      
      public bool HasMaturityMonthYear {
        get { return result.HasMaturityMonthYear; }
      }
      public string MaturityMonthYear {
        get { return result.MaturityMonthYear; }
        set { SetMaturityMonthYear(value); }
      }
      public Builder SetMaturityMonthYear(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMaturityMonthYear = true;
        result.maturityMonthYear_ = value;
        return this;
      }
      public Builder ClearMaturityMonthYear() {
        result.hasMaturityMonthYear = false;
        result.maturityMonthYear_ = "";
        return this;
      }
      
      public bool HasBaseCcy {
        get { return result.HasBaseCcy; }
      }
      public string BaseCcy {
        get { return result.BaseCcy; }
        set { SetBaseCcy(value); }
      }
      public Builder SetBaseCcy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBaseCcy = true;
        result.baseCcy_ = value;
        return this;
      }
      public Builder ClearBaseCcy() {
        result.hasBaseCcy = false;
        result.baseCcy_ = "";
        return this;
      }
      
      public bool HasLastPrc {
        get { return result.HasLastPrc; }
      }
      public string LastPrc {
        get { return result.LastPrc; }
        set { SetLastPrc(value); }
      }
      public Builder SetLastPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLastPrc = true;
        result.lastPrc_ = value;
        return this;
      }
      public Builder ClearLastPrc() {
        result.hasLastPrc = false;
        result.lastPrc_ = "0";
        return this;
      }
      
      public bool HasMarkPrc {
        get { return result.HasMarkPrc; }
      }
      public string MarkPrc {
        get { return result.MarkPrc; }
        set { SetMarkPrc(value); }
      }
      public Builder SetMarkPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMarkPrc = true;
        result.markPrc_ = value;
        return this;
      }
      public Builder ClearMarkPrc() {
        result.hasMarkPrc = false;
        result.markPrc_ = "0";
        return this;
      }
      
      public bool HasMarkDatetime {
        get { return result.HasMarkDatetime; }
      }
      public string MarkDatetime {
        get { return result.MarkDatetime; }
        set { SetMarkDatetime(value); }
      }
      public Builder SetMarkDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMarkDatetime = true;
        result.markDatetime_ = value;
        return this;
      }
      public Builder ClearMarkDatetime() {
        result.hasMarkDatetime = false;
        result.markDatetime_ = "";
        return this;
      }
      
      public bool HasMultiplier {
        get { return result.HasMultiplier; }
      }
      public string Multiplier {
        get { return result.Multiplier; }
        set { SetMultiplier(value); }
      }
      public Builder SetMultiplier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMultiplier = true;
        result.multiplier_ = value;
        return this;
      }
      public Builder ClearMultiplier() {
        result.hasMultiplier = false;
        result.multiplier_ = "";
        return this;
      }
      
      public bool HasExchangePriceFactor {
        get { return result.HasExchangePriceFactor; }
      }
      public string ExchangePriceFactor {
        get { return result.ExchangePriceFactor; }
        set { SetExchangePriceFactor(value); }
      }
      public Builder SetExchangePriceFactor(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExchangePriceFactor = true;
        result.exchangePriceFactor_ = value;
        return this;
      }
      public Builder ClearExchangePriceFactor() {
        result.hasExchangePriceFactor = false;
        result.exchangePriceFactor_ = "";
        return this;
      }
      
      public bool HasRolloverDatetime {
        get { return result.HasRolloverDatetime; }
      }
      public string RolloverDatetime {
        get { return result.RolloverDatetime; }
        set { SetRolloverDatetime(value); }
      }
      public Builder SetRolloverDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRolloverDatetime = true;
        result.rolloverDatetime_ = value;
        return this;
      }
      public Builder ClearRolloverDatetime() {
        result.hasRolloverDatetime = false;
        result.rolloverDatetime_ = "";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "";
        return this;
      }
      
      public bool HasAddedDatetime {
        get { return result.HasAddedDatetime; }
      }
      public string AddedDatetime {
        get { return result.AddedDatetime; }
        set { SetAddedDatetime(value); }
      }
      public Builder SetAddedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedDatetime = true;
        result.addedDatetime_ = value;
        return this;
      }
      public Builder ClearAddedDatetime() {
        result.hasAddedDatetime = false;
        result.addedDatetime_ = "";
        return this;
      }
      
      public bool HasAddedBy {
        get { return result.HasAddedBy; }
      }
      public string AddedBy {
        get { return result.AddedBy; }
        set { SetAddedBy(value); }
      }
      public Builder SetAddedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAddedBy = true;
        result.addedBy_ = value;
        return this;
      }
      public Builder ClearAddedBy() {
        result.hasAddedBy = false;
        result.addedBy_ = "";
        return this;
      }
      
      public bool HasUpdatedDatetime {
        get { return result.HasUpdatedDatetime; }
      }
      public string UpdatedDatetime {
        get { return result.UpdatedDatetime; }
        set { SetUpdatedDatetime(value); }
      }
      public Builder SetUpdatedDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedDatetime = true;
        result.updatedDatetime_ = value;
        return this;
      }
      public Builder ClearUpdatedDatetime() {
        result.hasUpdatedDatetime = false;
        result.updatedDatetime_ = "";
        return this;
      }
      
      public bool HasUpdatedBy {
        get { return result.HasUpdatedBy; }
      }
      public string UpdatedBy {
        get { return result.UpdatedBy; }
        set { SetUpdatedBy(value); }
      }
      public Builder SetUpdatedBy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUpdatedBy = true;
        result.updatedBy_ = value;
        return this;
      }
      public Builder ClearUpdatedBy() {
        result.hasUpdatedBy = false;
        result.updatedBy_ = "";
        return this;
      }
    }
    static InstrumentData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class SignalData : pb::GeneratedMessage<SignalData, SignalData.Builder> {
    private static readonly SignalData defaultInstance = new Builder().BuildPartial();
    public static SignalData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SignalData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SignalData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_SignalData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SignalData, SignalData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_SignalData__FieldAccessorTable; }
    }
    
    public const int ExternalOrderIdFieldNumber = 1;
    private bool hasExternalOrderId;
    private string externalOrderId_ = "";
    public bool HasExternalOrderId {
      get { return hasExternalOrderId; }
    }
    public string ExternalOrderId {
      get { return externalOrderId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 2;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int SignalIdFieldNumber = 3;
    private bool hasSignalId;
    private string signalId_ = "";
    public bool HasSignalId {
      get { return hasSignalId; }
    }
    public string SignalId {
      get { return signalId_; }
    }
    
    public const int InstrumentIdFieldNumber = 4;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int SideCodeFieldNumber = 5;
    private bool hasSideCode;
    private string sideCode_ = "";
    public bool HasSideCode {
      get { return hasSideCode; }
    }
    public string SideCode {
      get { return sideCode_; }
    }
    
    public const int SignalQtyFieldNumber = 6;
    private bool hasSignalQty;
    private string signalQty_ = "";
    public bool HasSignalQty {
      get { return hasSignalQty; }
    }
    public string SignalQty {
      get { return signalQty_; }
    }
    
    public const int OrderTypeFieldNumber = 7;
    private bool hasOrderType;
    private string orderType_ = "";
    public bool HasOrderType {
      get { return hasOrderType; }
    }
    public string OrderType {
      get { return orderType_; }
    }
    
    public const int LimitPrcFieldNumber = 8;
    private bool hasLimitPrc;
    private string limitPrc_ = "0";
    public bool HasLimitPrc {
      get { return hasLimitPrc; }
    }
    public string LimitPrc {
      get { return limitPrc_; }
    }
    
    public const int StopPrcFieldNumber = 9;
    private bool hasStopPrc;
    private string stopPrc_ = "0";
    public bool HasStopPrc {
      get { return hasStopPrc; }
    }
    public string StopPrc {
      get { return stopPrc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasExternalOrderId) {
        output.WriteString(1, ExternalOrderId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(2, InvestmentSystemId);
      }
      if (HasSignalId) {
        output.WriteString(3, SignalId);
      }
      if (HasInstrumentId) {
        output.WriteString(4, InstrumentId);
      }
      if (HasSideCode) {
        output.WriteString(5, SideCode);
      }
      if (HasSignalQty) {
        output.WriteString(6, SignalQty);
      }
      if (HasOrderType) {
        output.WriteString(7, OrderType);
      }
      if (HasLimitPrc) {
        output.WriteString(8, LimitPrc);
      }
      if (HasStopPrc) {
        output.WriteString(9, StopPrc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasExternalOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ExternalOrderId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InvestmentSystemId);
        }
        if (HasSignalId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SignalId);
        }
        if (HasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentId);
        }
        if (HasSideCode) {
          size += pb::CodedOutputStream.ComputeStringSize(5, SideCode);
        }
        if (HasSignalQty) {
          size += pb::CodedOutputStream.ComputeStringSize(6, SignalQty);
        }
        if (HasOrderType) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OrderType);
        }
        if (HasLimitPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(8, LimitPrc);
        }
        if (HasStopPrc) {
          size += pb::CodedOutputStream.ComputeStringSize(9, StopPrc);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SignalData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignalData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignalData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignalData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignalData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignalData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SignalData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SignalData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SignalData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignalData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SignalData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SignalData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SignalData result = new SignalData();
      
      protected override SignalData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SignalData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.SignalData.Descriptor; }
      }
      
      public override SignalData DefaultInstanceForType {
        get { return global::quantmodel.SignalData.DefaultInstance; }
      }
      
      public override SignalData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SignalData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SignalData) {
          return MergeFrom((SignalData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SignalData other) {
        if (other == global::quantmodel.SignalData.DefaultInstance) return this;
        if (other.HasExternalOrderId) {
          ExternalOrderId = other.ExternalOrderId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasSignalId) {
          SignalId = other.SignalId;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasSideCode) {
          SideCode = other.SideCode;
        }
        if (other.HasSignalQty) {
          SignalQty = other.SignalQty;
        }
        if (other.HasOrderType) {
          OrderType = other.OrderType;
        }
        if (other.HasLimitPrc) {
          LimitPrc = other.LimitPrc;
        }
        if (other.HasStopPrc) {
          StopPrc = other.StopPrc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ExternalOrderId = input.ReadString();
              break;
            }
            case 18: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 26: {
              SignalId = input.ReadString();
              break;
            }
            case 34: {
              InstrumentId = input.ReadString();
              break;
            }
            case 42: {
              SideCode = input.ReadString();
              break;
            }
            case 50: {
              SignalQty = input.ReadString();
              break;
            }
            case 58: {
              OrderType = input.ReadString();
              break;
            }
            case 66: {
              LimitPrc = input.ReadString();
              break;
            }
            case 74: {
              StopPrc = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasExternalOrderId {
        get { return result.HasExternalOrderId; }
      }
      public string ExternalOrderId {
        get { return result.ExternalOrderId; }
        set { SetExternalOrderId(value); }
      }
      public Builder SetExternalOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExternalOrderId = true;
        result.externalOrderId_ = value;
        return this;
      }
      public Builder ClearExternalOrderId() {
        result.hasExternalOrderId = false;
        result.externalOrderId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasSignalId {
        get { return result.HasSignalId; }
      }
      public string SignalId {
        get { return result.SignalId; }
        set { SetSignalId(value); }
      }
      public Builder SetSignalId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSignalId = true;
        result.signalId_ = value;
        return this;
      }
      public Builder ClearSignalId() {
        result.hasSignalId = false;
        result.signalId_ = "";
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.HasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasSideCode {
        get { return result.HasSideCode; }
      }
      public string SideCode {
        get { return result.SideCode; }
        set { SetSideCode(value); }
      }
      public Builder SetSideCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSideCode = true;
        result.sideCode_ = value;
        return this;
      }
      public Builder ClearSideCode() {
        result.hasSideCode = false;
        result.sideCode_ = "";
        return this;
      }
      
      public bool HasSignalQty {
        get { return result.HasSignalQty; }
      }
      public string SignalQty {
        get { return result.SignalQty; }
        set { SetSignalQty(value); }
      }
      public Builder SetSignalQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSignalQty = true;
        result.signalQty_ = value;
        return this;
      }
      public Builder ClearSignalQty() {
        result.hasSignalQty = false;
        result.signalQty_ = "";
        return this;
      }
      
      public bool HasOrderType {
        get { return result.HasOrderType; }
      }
      public string OrderType {
        get { return result.OrderType; }
        set { SetOrderType(value); }
      }
      public Builder SetOrderType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderType = true;
        result.orderType_ = value;
        return this;
      }
      public Builder ClearOrderType() {
        result.hasOrderType = false;
        result.orderType_ = "";
        return this;
      }
      
      public bool HasLimitPrc {
        get { return result.HasLimitPrc; }
      }
      public string LimitPrc {
        get { return result.LimitPrc; }
        set { SetLimitPrc(value); }
      }
      public Builder SetLimitPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLimitPrc = true;
        result.limitPrc_ = value;
        return this;
      }
      public Builder ClearLimitPrc() {
        result.hasLimitPrc = false;
        result.limitPrc_ = "0";
        return this;
      }
      
      public bool HasStopPrc {
        get { return result.HasStopPrc; }
      }
      public string StopPrc {
        get { return result.StopPrc; }
        set { SetStopPrc(value); }
      }
      public Builder SetStopPrc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopPrc = true;
        result.stopPrc_ = value;
        return this;
      }
      public Builder ClearStopPrc() {
        result.hasStopPrc = false;
        result.stopPrc_ = "0";
        return this;
      }
    }
    static SignalData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemData : pb::GeneratedMessage<InvestmentSystemData, InvestmentSystemData.Builder> {
    private static readonly InvestmentSystemData defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemData, InvestmentSystemData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemData__FieldAccessorTable; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 1;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int IsActiveFieldNumber = 3;
    private bool hasIsActive;
    private string isActive_ = "";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasInvestmentSystemId) {
        output.WriteString(1, InvestmentSystemId);
      }
      if (HasName) {
        output.WriteString(2, Name);
      }
      if (HasIsActive) {
        output.WriteString(3, IsActive);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InvestmentSystemId);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(3, IsActive);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemData result = new InvestmentSystemData();
      
      protected override InvestmentSystemData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.InvestmentSystemData.Descriptor; }
      }
      
      public override InvestmentSystemData DefaultInstanceForType {
        get { return global::quantmodel.InvestmentSystemData.DefaultInstance; }
      }
      
      public override InvestmentSystemData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemData) {
          return MergeFrom((InvestmentSystemData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemData other) {
        if (other == global::quantmodel.InvestmentSystemData.DefaultInstance) return this;
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 18: {
              Name = input.ReadString();
              break;
            }
            case 26: {
              IsActive = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "";
        return this;
      }
    }
    static InvestmentSystemData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class StrategyData : pb::GeneratedMessage<StrategyData, StrategyData.Builder> {
    private static readonly StrategyData defaultInstance = new Builder().BuildPartial();
    public static StrategyData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StrategyData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override StrategyData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_StrategyData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StrategyData, StrategyData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_StrategyData__FieldAccessorTable; }
    }
    
    public const int StrategyIdFieldNumber = 1;
    private bool hasStrategyId;
    private string strategyId_ = "";
    public bool HasStrategyId {
      get { return hasStrategyId; }
    }
    public string StrategyId {
      get { return strategyId_; }
    }
    
    public const int InvestmentSystemIdFieldNumber = 2;
    private bool hasInvestmentSystemId;
    private string investmentSystemId_ = "";
    public bool HasInvestmentSystemId {
      get { return hasInvestmentSystemId; }
    }
    public string InvestmentSystemId {
      get { return investmentSystemId_; }
    }
    
    public const int SignalIdFieldNumber = 3;
    private bool hasSignalId;
    private string signalId_ = "";
    public bool HasSignalId {
      get { return hasSignalId; }
    }
    public string SignalId {
      get { return signalId_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DefaultWeightFieldNumber = 5;
    private bool hasDefaultWeight;
    private string defaultWeight_ = "";
    public bool HasDefaultWeight {
      get { return hasDefaultWeight; }
    }
    public string DefaultWeight {
      get { return defaultWeight_; }
    }
    
    public const int IsActiveFieldNumber = 6;
    private bool hasIsActive;
    private string isActive_ = "";
    public bool HasIsActive {
      get { return hasIsActive; }
    }
    public string IsActive {
      get { return isActive_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasStrategyId) {
        output.WriteString(1, StrategyId);
      }
      if (HasInvestmentSystemId) {
        output.WriteString(2, InvestmentSystemId);
      }
      if (HasSignalId) {
        output.WriteString(3, SignalId);
      }
      if (HasName) {
        output.WriteString(4, Name);
      }
      if (HasDefaultWeight) {
        output.WriteString(5, DefaultWeight);
      }
      if (HasIsActive) {
        output.WriteString(6, IsActive);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasStrategyId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, StrategyId);
        }
        if (HasInvestmentSystemId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InvestmentSystemId);
        }
        if (HasSignalId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SignalId);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (HasDefaultWeight) {
          size += pb::CodedOutputStream.ComputeStringSize(5, DefaultWeight);
        }
        if (HasIsActive) {
          size += pb::CodedOutputStream.ComputeStringSize(6, IsActive);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StrategyData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StrategyData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StrategyData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StrategyData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StrategyData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StrategyData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StrategyData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StrategyData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StrategyData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StrategyData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StrategyData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<StrategyData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      StrategyData result = new StrategyData();
      
      protected override StrategyData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new StrategyData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.StrategyData.Descriptor; }
      }
      
      public override StrategyData DefaultInstanceForType {
        get { return global::quantmodel.StrategyData.DefaultInstance; }
      }
      
      public override StrategyData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        StrategyData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StrategyData) {
          return MergeFrom((StrategyData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StrategyData other) {
        if (other == global::quantmodel.StrategyData.DefaultInstance) return this;
        if (other.HasStrategyId) {
          StrategyId = other.StrategyId;
        }
        if (other.HasInvestmentSystemId) {
          InvestmentSystemId = other.InvestmentSystemId;
        }
        if (other.HasSignalId) {
          SignalId = other.SignalId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDefaultWeight) {
          DefaultWeight = other.DefaultWeight;
        }
        if (other.HasIsActive) {
          IsActive = other.IsActive;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              StrategyId = input.ReadString();
              break;
            }
            case 18: {
              InvestmentSystemId = input.ReadString();
              break;
            }
            case 26: {
              SignalId = input.ReadString();
              break;
            }
            case 34: {
              Name = input.ReadString();
              break;
            }
            case 42: {
              DefaultWeight = input.ReadString();
              break;
            }
            case 50: {
              IsActive = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasStrategyId {
        get { return result.HasStrategyId; }
      }
      public string StrategyId {
        get { return result.StrategyId; }
        set { SetStrategyId(value); }
      }
      public Builder SetStrategyId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStrategyId = true;
        result.strategyId_ = value;
        return this;
      }
      public Builder ClearStrategyId() {
        result.hasStrategyId = false;
        result.strategyId_ = "";
        return this;
      }
      
      public bool HasInvestmentSystemId {
        get { return result.HasInvestmentSystemId; }
      }
      public string InvestmentSystemId {
        get { return result.InvestmentSystemId; }
        set { SetInvestmentSystemId(value); }
      }
      public Builder SetInvestmentSystemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInvestmentSystemId = true;
        result.investmentSystemId_ = value;
        return this;
      }
      public Builder ClearInvestmentSystemId() {
        result.hasInvestmentSystemId = false;
        result.investmentSystemId_ = "";
        return this;
      }
      
      public bool HasSignalId {
        get { return result.HasSignalId; }
      }
      public string SignalId {
        get { return result.SignalId; }
        set { SetSignalId(value); }
      }
      public Builder SetSignalId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSignalId = true;
        result.signalId_ = value;
        return this;
      }
      public Builder ClearSignalId() {
        result.hasSignalId = false;
        result.signalId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDefaultWeight {
        get { return result.HasDefaultWeight; }
      }
      public string DefaultWeight {
        get { return result.DefaultWeight; }
        set { SetDefaultWeight(value); }
      }
      public Builder SetDefaultWeight(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDefaultWeight = true;
        result.defaultWeight_ = value;
        return this;
      }
      public Builder ClearDefaultWeight() {
        result.hasDefaultWeight = false;
        result.defaultWeight_ = "";
        return this;
      }
      
      public bool HasIsActive {
        get { return result.HasIsActive; }
      }
      public string IsActive {
        get { return result.IsActive; }
        set { SetIsActive(value); }
      }
      public Builder SetIsActive(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsActive = true;
        result.isActive_ = value;
        return this;
      }
      public Builder ClearIsActive() {
        result.hasIsActive = false;
        result.isActive_ = "";
        return this;
      }
    }
    static StrategyData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class AccountStrategyData : pb::GeneratedMessage<AccountStrategyData, AccountStrategyData.Builder> {
    private static readonly AccountStrategyData defaultInstance = new Builder().BuildPartial();
    public static AccountStrategyData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountStrategyData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AccountStrategyData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountStrategyData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountStrategyData, AccountStrategyData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_AccountStrategyData__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private string accountId_ = "";
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public string AccountId {
      get { return accountId_; }
    }
    
    public const int StrategyIdFieldNumber = 2;
    private bool hasStrategyId;
    private string strategyId_ = "";
    public bool HasStrategyId {
      get { return hasStrategyId; }
    }
    public string StrategyId {
      get { return strategyId_; }
    }
    
    public const int WeightFieldNumber = 3;
    private bool hasWeight;
    private string weight_ = "";
    public bool HasWeight {
      get { return hasWeight; }
    }
    public string Weight {
      get { return weight_; }
    }
    
    public const int IsEnabledFieldNumber = 4;
    private bool hasIsEnabled;
    private string isEnabled_ = "";
    public bool HasIsEnabled {
      get { return hasIsEnabled; }
    }
    public string IsEnabled {
      get { return isEnabled_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteString(1, AccountId);
      }
      if (HasStrategyId) {
        output.WriteString(2, StrategyId);
      }
      if (HasWeight) {
        output.WriteString(3, Weight);
      }
      if (HasIsEnabled) {
        output.WriteString(4, IsEnabled);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AccountId);
        }
        if (HasStrategyId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, StrategyId);
        }
        if (HasWeight) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Weight);
        }
        if (HasIsEnabled) {
          size += pb::CodedOutputStream.ComputeStringSize(4, IsEnabled);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountStrategyData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountStrategyData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountStrategyData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountStrategyData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountStrategyData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AccountStrategyData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AccountStrategyData result = new AccountStrategyData();
      
      protected override AccountStrategyData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AccountStrategyData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.AccountStrategyData.Descriptor; }
      }
      
      public override AccountStrategyData DefaultInstanceForType {
        get { return global::quantmodel.AccountStrategyData.DefaultInstance; }
      }
      
      public override AccountStrategyData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AccountStrategyData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountStrategyData) {
          return MergeFrom((AccountStrategyData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountStrategyData other) {
        if (other == global::quantmodel.AccountStrategyData.DefaultInstance) return this;
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasStrategyId) {
          StrategyId = other.StrategyId;
        }
        if (other.HasWeight) {
          Weight = other.Weight;
        }
        if (other.HasIsEnabled) {
          IsEnabled = other.IsEnabled;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              AccountId = input.ReadString();
              break;
            }
            case 18: {
              StrategyId = input.ReadString();
              break;
            }
            case 26: {
              Weight = input.ReadString();
              break;
            }
            case 34: {
              IsEnabled = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
        get { return result.HasAccountId; }
      }
      public string AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = "";
        return this;
      }
      
      public bool HasStrategyId {
        get { return result.HasStrategyId; }
      }
      public string StrategyId {
        get { return result.StrategyId; }
        set { SetStrategyId(value); }
      }
      public Builder SetStrategyId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStrategyId = true;
        result.strategyId_ = value;
        return this;
      }
      public Builder ClearStrategyId() {
        result.hasStrategyId = false;
        result.strategyId_ = "";
        return this;
      }
      
      public bool HasWeight {
        get { return result.HasWeight; }
      }
      public string Weight {
        get { return result.Weight; }
        set { SetWeight(value); }
      }
      public Builder SetWeight(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasWeight = true;
        result.weight_ = value;
        return this;
      }
      public Builder ClearWeight() {
        result.hasWeight = false;
        result.weight_ = "";
        return this;
      }
      
      public bool HasIsEnabled {
        get { return result.HasIsEnabled; }
      }
      public string IsEnabled {
        get { return result.IsEnabled; }
        set { SetIsEnabled(value); }
      }
      public Builder SetIsEnabled(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIsEnabled = true;
        result.isEnabled_ = value;
        return this;
      }
      public Builder ClearIsEnabled() {
        result.hasIsEnabled = false;
        result.isEnabled_ = "";
        return this;
      }
    }
    static AccountStrategyData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ExecutionReportData : pb::GeneratedMessage<ExecutionReportData, ExecutionReportData.Builder> {
    private static readonly ExecutionReportData defaultInstance = new Builder().BuildPartial();
    public static ExecutionReportData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecutionReportData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ExecutionReportData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ExecutionReportData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecutionReportData, ExecutionReportData.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ExecutionReportData__FieldAccessorTable; }
    }
    
    public const int ReleaseIdFieldNumber = 1;
    private bool hasReleaseId;
    private string releaseId_ = "";
    public bool HasReleaseId {
      get { return hasReleaseId; }
    }
    public string ReleaseId {
      get { return releaseId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int SendingTmFieldNumber = 3;
    private bool hasSendingTm;
    private string sendingTm_ = "";
    public bool HasSendingTm {
      get { return hasSendingTm; }
    }
    public string SendingTm {
      get { return sendingTm_; }
    }
    
    public const int ExecIDFieldNumber = 4;
    private bool hasExecID;
    private string execID_ = "";
    public bool HasExecID {
      get { return hasExecID; }
    }
    public string ExecID {
      get { return execID_; }
    }
    
    public const int OrderIDFieldNumber = 5;
    private bool hasOrderID;
    private string orderID_ = "";
    public bool HasOrderID {
      get { return hasOrderID; }
    }
    public string OrderID {
      get { return orderID_; }
    }
    
    public const int ClOrdIDFieldNumber = 6;
    private bool hasClOrdID;
    private string clOrdID_ = "";
    public bool HasClOrdID {
      get { return hasClOrdID; }
    }
    public string ClOrdID {
      get { return clOrdID_; }
    }
    
    public const int OrigClOrdIDFieldNumber = 7;
    private bool hasOrigClOrdID;
    private string origClOrdID_ = "";
    public bool HasOrigClOrdID {
      get { return hasOrigClOrdID; }
    }
    public string OrigClOrdID {
      get { return origClOrdID_; }
    }
    
    public const int ExecRefIDFieldNumber = 8;
    private bool hasExecRefID;
    private string execRefID_ = "";
    public bool HasExecRefID {
      get { return hasExecRefID; }
    }
    public string ExecRefID {
      get { return execRefID_; }
    }
    
    public const int OrdTypeFieldNumber = 9;
    private bool hasOrdType;
    private string ordType_ = "";
    public bool HasOrdType {
      get { return hasOrdType; }
    }
    public string OrdType {
      get { return ordType_; }
    }
    
    public const int ExecTypeFieldNumber = 10;
    private bool hasExecType;
    private string execType_ = "";
    public bool HasExecType {
      get { return hasExecType; }
    }
    public string ExecType {
      get { return execType_; }
    }
    
    public const int ExecTransTypeFieldNumber = 11;
    private bool hasExecTransType;
    private string execTransType_ = "";
    public bool HasExecTransType {
      get { return hasExecTransType; }
    }
    public string ExecTransType {
      get { return execTransType_; }
    }
    
    public const int MultiLegReportingTypeFieldNumber = 12;
    private bool hasMultiLegReportingType;
    private string multiLegReportingType_ = "1";
    public bool HasMultiLegReportingType {
      get { return hasMultiLegReportingType; }
    }
    public string MultiLegReportingType {
      get { return multiLegReportingType_; }
    }
    
    public const int SecurityIDFieldNumber = 13;
    private bool hasSecurityID;
    private string securityID_ = "";
    public bool HasSecurityID {
      get { return hasSecurityID; }
    }
    public string SecurityID {
      get { return securityID_; }
    }
    
    public const int SecurityTypeFieldNumber = 14;
    private bool hasSecurityType;
    private string securityType_ = "";
    public bool HasSecurityType {
      get { return hasSecurityType; }
    }
    public string SecurityType {
      get { return securityType_; }
    }
    
    public const int IDSourceFieldNumber = 15;
    private bool hasIDSource;
    private string iDSource_ = "";
    public bool HasIDSource {
      get { return hasIDSource; }
    }
    public string IDSource {
      get { return iDSource_; }
    }
    
    public const int AccountFieldNumber = 16;
    private bool hasAccount;
    private string account_ = "";
    public bool HasAccount {
      get { return hasAccount; }
    }
    public string Account {
      get { return account_; }
    }
    
    public const int OrdStatusFieldNumber = 17;
    private bool hasOrdStatus;
    private string ordStatus_ = "";
    public bool HasOrdStatus {
      get { return hasOrdStatus; }
    }
    public string OrdStatus {
      get { return ordStatus_; }
    }
    
    public const int SymbolFieldNumber = 18;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int SideFieldNumber = 19;
    private bool hasSide;
    private string side_ = "";
    public bool HasSide {
      get { return hasSide; }
    }
    public string Side {
      get { return side_; }
    }
    
    public const int TimeInForceFieldNumber = 20;
    private bool hasTimeInForce;
    private string timeInForce_ = "";
    public bool HasTimeInForce {
      get { return hasTimeInForce; }
    }
    public string TimeInForce {
      get { return timeInForce_; }
    }
    
    public const int MaturityMonthYearFieldNumber = 21;
    private bool hasMaturityMonthYear;
    private string maturityMonthYear_ = "";
    public bool HasMaturityMonthYear {
      get { return hasMaturityMonthYear; }
    }
    public string MaturityMonthYear {
      get { return maturityMonthYear_; }
    }
    
    public const int TransactTimeFieldNumber = 22;
    private bool hasTransactTime;
    private string transactTime_ = "";
    public bool HasTransactTime {
      get { return hasTransactTime; }
    }
    public string TransactTime {
      get { return transactTime_; }
    }
    
    public const int TextFieldNumber = 23;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int CumQtyFieldNumber = 24;
    private bool hasCumQty;
    private string cumQty_ = "0";
    public bool HasCumQty {
      get { return hasCumQty; }
    }
    public string CumQty {
      get { return cumQty_; }
    }
    
    public const int OrderQtyFieldNumber = 25;
    private bool hasOrderQty;
    private string orderQty_ = "0";
    public bool HasOrderQty {
      get { return hasOrderQty; }
    }
    public string OrderQty {
      get { return orderQty_; }
    }
    
    public const int LeavesQtyFieldNumber = 26;
    private bool hasLeavesQty;
    private string leavesQty_ = "0";
    public bool HasLeavesQty {
      get { return hasLeavesQty; }
    }
    public string LeavesQty {
      get { return leavesQty_; }
    }
    
    public const int LastSharesFieldNumber = 27;
    private bool hasLastShares;
    private string lastShares_ = "0";
    public bool HasLastShares {
      get { return hasLastShares; }
    }
    public string LastShares {
      get { return lastShares_; }
    }
    
    public const int PriceFieldNumber = 28;
    private bool hasPrice;
    private string price_ = "0";
    public bool HasPrice {
      get { return hasPrice; }
    }
    public string Price {
      get { return price_; }
    }
    
    public const int AvgPxFieldNumber = 29;
    private bool hasAvgPx;
    private string avgPx_ = "0";
    public bool HasAvgPx {
      get { return hasAvgPx; }
    }
    public string AvgPx {
      get { return avgPx_; }
    }
    
    public const int LastPxFieldNumber = 30;
    private bool hasLastPx;
    private string lastPx_ = "0";
    public bool HasLastPx {
      get { return hasLastPx; }
    }
    public string LastPx {
      get { return lastPx_; }
    }
    
    public const int StopPxFieldNumber = 31;
    private bool hasStopPx;
    private string stopPx_ = "0";
    public bool HasStopPx {
      get { return hasStopPx; }
    }
    public string StopPx {
      get { return stopPx_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasReleaseId) {
        output.WriteString(1, ReleaseId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      if (HasSendingTm) {
        output.WriteString(3, SendingTm);
      }
      if (HasExecID) {
        output.WriteString(4, ExecID);
      }
      if (HasOrderID) {
        output.WriteString(5, OrderID);
      }
      if (HasClOrdID) {
        output.WriteString(6, ClOrdID);
      }
      if (HasOrigClOrdID) {
        output.WriteString(7, OrigClOrdID);
      }
      if (HasExecRefID) {
        output.WriteString(8, ExecRefID);
      }
      if (HasOrdType) {
        output.WriteString(9, OrdType);
      }
      if (HasExecType) {
        output.WriteString(10, ExecType);
      }
      if (HasExecTransType) {
        output.WriteString(11, ExecTransType);
      }
      if (HasMultiLegReportingType) {
        output.WriteString(12, MultiLegReportingType);
      }
      if (HasSecurityID) {
        output.WriteString(13, SecurityID);
      }
      if (HasSecurityType) {
        output.WriteString(14, SecurityType);
      }
      if (HasIDSource) {
        output.WriteString(15, IDSource);
      }
      if (HasAccount) {
        output.WriteString(16, Account);
      }
      if (HasOrdStatus) {
        output.WriteString(17, OrdStatus);
      }
      if (HasSymbol) {
        output.WriteString(18, Symbol);
      }
      if (HasSide) {
        output.WriteString(19, Side);
      }
      if (HasTimeInForce) {
        output.WriteString(20, TimeInForce);
      }
      if (HasMaturityMonthYear) {
        output.WriteString(21, MaturityMonthYear);
      }
      if (HasTransactTime) {
        output.WriteString(22, TransactTime);
      }
      if (HasText) {
        output.WriteString(23, Text);
      }
      if (HasCumQty) {
        output.WriteString(24, CumQty);
      }
      if (HasOrderQty) {
        output.WriteString(25, OrderQty);
      }
      if (HasLeavesQty) {
        output.WriteString(26, LeavesQty);
      }
      if (HasLastShares) {
        output.WriteString(27, LastShares);
      }
      if (HasPrice) {
        output.WriteString(28, Price);
      }
      if (HasAvgPx) {
        output.WriteString(29, AvgPx);
      }
      if (HasLastPx) {
        output.WriteString(30, LastPx);
      }
      if (HasStopPx) {
        output.WriteString(31, StopPx);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasReleaseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ReleaseId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (HasSendingTm) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SendingTm);
        }
        if (HasExecID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ExecID);
        }
        if (HasOrderID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderID);
        }
        if (HasClOrdID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClOrdID);
        }
        if (HasOrigClOrdID) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OrigClOrdID);
        }
        if (HasExecRefID) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ExecRefID);
        }
        if (HasOrdType) {
          size += pb::CodedOutputStream.ComputeStringSize(9, OrdType);
        }
        if (HasExecType) {
          size += pb::CodedOutputStream.ComputeStringSize(10, ExecType);
        }
        if (HasExecTransType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ExecTransType);
        }
        if (HasMultiLegReportingType) {
          size += pb::CodedOutputStream.ComputeStringSize(12, MultiLegReportingType);
        }
        if (HasSecurityID) {
          size += pb::CodedOutputStream.ComputeStringSize(13, SecurityID);
        }
        if (HasSecurityType) {
          size += pb::CodedOutputStream.ComputeStringSize(14, SecurityType);
        }
        if (HasIDSource) {
          size += pb::CodedOutputStream.ComputeStringSize(15, IDSource);
        }
        if (HasAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Account);
        }
        if (HasOrdStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(17, OrdStatus);
        }
        if (HasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Symbol);
        }
        if (HasSide) {
          size += pb::CodedOutputStream.ComputeStringSize(19, Side);
        }
        if (HasTimeInForce) {
          size += pb::CodedOutputStream.ComputeStringSize(20, TimeInForce);
        }
        if (HasMaturityMonthYear) {
          size += pb::CodedOutputStream.ComputeStringSize(21, MaturityMonthYear);
        }
        if (HasTransactTime) {
          size += pb::CodedOutputStream.ComputeStringSize(22, TransactTime);
        }
        if (HasText) {
          size += pb::CodedOutputStream.ComputeStringSize(23, Text);
        }
        if (HasCumQty) {
          size += pb::CodedOutputStream.ComputeStringSize(24, CumQty);
        }
        if (HasOrderQty) {
          size += pb::CodedOutputStream.ComputeStringSize(25, OrderQty);
        }
        if (HasLeavesQty) {
          size += pb::CodedOutputStream.ComputeStringSize(26, LeavesQty);
        }
        if (HasLastShares) {
          size += pb::CodedOutputStream.ComputeStringSize(27, LastShares);
        }
        if (HasPrice) {
          size += pb::CodedOutputStream.ComputeStringSize(28, Price);
        }
        if (HasAvgPx) {
          size += pb::CodedOutputStream.ComputeStringSize(29, AvgPx);
        }
        if (HasLastPx) {
          size += pb::CodedOutputStream.ComputeStringSize(30, LastPx);
        }
        if (HasStopPx) {
          size += pb::CodedOutputStream.ComputeStringSize(31, StopPx);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecutionReportData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecutionReportData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecutionReportData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecutionReportData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecutionReportData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ExecutionReportData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ExecutionReportData result = new ExecutionReportData();
      
      protected override ExecutionReportData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ExecutionReportData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ExecutionReportData.Descriptor; }
      }
      
      public override ExecutionReportData DefaultInstanceForType {
        get { return global::quantmodel.ExecutionReportData.DefaultInstance; }
      }
      
      public override ExecutionReportData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ExecutionReportData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecutionReportData) {
          return MergeFrom((ExecutionReportData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecutionReportData other) {
        if (other == global::quantmodel.ExecutionReportData.DefaultInstance) return this;
        if (other.HasReleaseId) {
          ReleaseId = other.ReleaseId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasSendingTm) {
          SendingTm = other.SendingTm;
        }
        if (other.HasExecID) {
          ExecID = other.ExecID;
        }
        if (other.HasOrderID) {
          OrderID = other.OrderID;
        }
        if (other.HasClOrdID) {
          ClOrdID = other.ClOrdID;
        }
        if (other.HasOrigClOrdID) {
          OrigClOrdID = other.OrigClOrdID;
        }
        if (other.HasExecRefID) {
          ExecRefID = other.ExecRefID;
        }
        if (other.HasOrdType) {
          OrdType = other.OrdType;
        }
        if (other.HasExecType) {
          ExecType = other.ExecType;
        }
        if (other.HasExecTransType) {
          ExecTransType = other.ExecTransType;
        }
        if (other.HasMultiLegReportingType) {
          MultiLegReportingType = other.MultiLegReportingType;
        }
        if (other.HasSecurityID) {
          SecurityID = other.SecurityID;
        }
        if (other.HasSecurityType) {
          SecurityType = other.SecurityType;
        }
        if (other.HasIDSource) {
          IDSource = other.IDSource;
        }
        if (other.HasAccount) {
          Account = other.Account;
        }
        if (other.HasOrdStatus) {
          OrdStatus = other.OrdStatus;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasSide) {
          Side = other.Side;
        }
        if (other.HasTimeInForce) {
          TimeInForce = other.TimeInForce;
        }
        if (other.HasMaturityMonthYear) {
          MaturityMonthYear = other.MaturityMonthYear;
        }
        if (other.HasTransactTime) {
          TransactTime = other.TransactTime;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasCumQty) {
          CumQty = other.CumQty;
        }
        if (other.HasOrderQty) {
          OrderQty = other.OrderQty;
        }
        if (other.HasLeavesQty) {
          LeavesQty = other.LeavesQty;
        }
        if (other.HasLastShares) {
          LastShares = other.LastShares;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasAvgPx) {
          AvgPx = other.AvgPx;
        }
        if (other.HasLastPx) {
          LastPx = other.LastPx;
        }
        if (other.HasStopPx) {
          StopPx = other.StopPx;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ReleaseId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
            case 26: {
              SendingTm = input.ReadString();
              break;
            }
            case 34: {
              ExecID = input.ReadString();
              break;
            }
            case 42: {
              OrderID = input.ReadString();
              break;
            }
            case 50: {
              ClOrdID = input.ReadString();
              break;
            }
            case 58: {
              OrigClOrdID = input.ReadString();
              break;
            }
            case 66: {
              ExecRefID = input.ReadString();
              break;
            }
            case 74: {
              OrdType = input.ReadString();
              break;
            }
            case 82: {
              ExecType = input.ReadString();
              break;
            }
            case 90: {
              ExecTransType = input.ReadString();
              break;
            }
            case 98: {
              MultiLegReportingType = input.ReadString();
              break;
            }
            case 106: {
              SecurityID = input.ReadString();
              break;
            }
            case 114: {
              SecurityType = input.ReadString();
              break;
            }
            case 122: {
              IDSource = input.ReadString();
              break;
            }
            case 130: {
              Account = input.ReadString();
              break;
            }
            case 138: {
              OrdStatus = input.ReadString();
              break;
            }
            case 146: {
              Symbol = input.ReadString();
              break;
            }
            case 154: {
              Side = input.ReadString();
              break;
            }
            case 162: {
              TimeInForce = input.ReadString();
              break;
            }
            case 170: {
              MaturityMonthYear = input.ReadString();
              break;
            }
            case 178: {
              TransactTime = input.ReadString();
              break;
            }
            case 186: {
              Text = input.ReadString();
              break;
            }
            case 194: {
              CumQty = input.ReadString();
              break;
            }
            case 202: {
              OrderQty = input.ReadString();
              break;
            }
            case 210: {
              LeavesQty = input.ReadString();
              break;
            }
            case 218: {
              LastShares = input.ReadString();
              break;
            }
            case 226: {
              Price = input.ReadString();
              break;
            }
            case 234: {
              AvgPx = input.ReadString();
              break;
            }
            case 242: {
              LastPx = input.ReadString();
              break;
            }
            case 250: {
              StopPx = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasReleaseId {
        get { return result.HasReleaseId; }
      }
      public string ReleaseId {
        get { return result.ReleaseId; }
        set { SetReleaseId(value); }
      }
      public Builder SetReleaseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseId = true;
        result.releaseId_ = value;
        return this;
      }
      public Builder ClearReleaseId() {
        result.hasReleaseId = false;
        result.releaseId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasSendingTm {
        get { return result.HasSendingTm; }
      }
      public string SendingTm {
        get { return result.SendingTm; }
        set { SetSendingTm(value); }
      }
      public Builder SetSendingTm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSendingTm = true;
        result.sendingTm_ = value;
        return this;
      }
      public Builder ClearSendingTm() {
        result.hasSendingTm = false;
        result.sendingTm_ = "";
        return this;
      }
      
      public bool HasExecID {
        get { return result.HasExecID; }
      }
      public string ExecID {
        get { return result.ExecID; }
        set { SetExecID(value); }
      }
      public Builder SetExecID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecID = true;
        result.execID_ = value;
        return this;
      }
      public Builder ClearExecID() {
        result.hasExecID = false;
        result.execID_ = "";
        return this;
      }
      
      public bool HasOrderID {
        get { return result.HasOrderID; }
      }
      public string OrderID {
        get { return result.OrderID; }
        set { SetOrderID(value); }
      }
      public Builder SetOrderID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderID = true;
        result.orderID_ = value;
        return this;
      }
      public Builder ClearOrderID() {
        result.hasOrderID = false;
        result.orderID_ = "";
        return this;
      }
      
      public bool HasClOrdID {
        get { return result.HasClOrdID; }
      }
      public string ClOrdID {
        get { return result.ClOrdID; }
        set { SetClOrdID(value); }
      }
      public Builder SetClOrdID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClOrdID = true;
        result.clOrdID_ = value;
        return this;
      }
      public Builder ClearClOrdID() {
        result.hasClOrdID = false;
        result.clOrdID_ = "";
        return this;
      }
      
      public bool HasOrigClOrdID {
        get { return result.HasOrigClOrdID; }
      }
      public string OrigClOrdID {
        get { return result.OrigClOrdID; }
        set { SetOrigClOrdID(value); }
      }
      public Builder SetOrigClOrdID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrigClOrdID = true;
        result.origClOrdID_ = value;
        return this;
      }
      public Builder ClearOrigClOrdID() {
        result.hasOrigClOrdID = false;
        result.origClOrdID_ = "";
        return this;
      }
      
      public bool HasExecRefID {
        get { return result.HasExecRefID; }
      }
      public string ExecRefID {
        get { return result.ExecRefID; }
        set { SetExecRefID(value); }
      }
      public Builder SetExecRefID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecRefID = true;
        result.execRefID_ = value;
        return this;
      }
      public Builder ClearExecRefID() {
        result.hasExecRefID = false;
        result.execRefID_ = "";
        return this;
      }
      
      public bool HasOrdType {
        get { return result.HasOrdType; }
      }
      public string OrdType {
        get { return result.OrdType; }
        set { SetOrdType(value); }
      }
      public Builder SetOrdType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrdType = true;
        result.ordType_ = value;
        return this;
      }
      public Builder ClearOrdType() {
        result.hasOrdType = false;
        result.ordType_ = "";
        return this;
      }
      
      public bool HasExecType {
        get { return result.HasExecType; }
      }
      public string ExecType {
        get { return result.ExecType; }
        set { SetExecType(value); }
      }
      public Builder SetExecType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecType = true;
        result.execType_ = value;
        return this;
      }
      public Builder ClearExecType() {
        result.hasExecType = false;
        result.execType_ = "";
        return this;
      }
      
      public bool HasExecTransType {
        get { return result.HasExecTransType; }
      }
      public string ExecTransType {
        get { return result.ExecTransType; }
        set { SetExecTransType(value); }
      }
      public Builder SetExecTransType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecTransType = true;
        result.execTransType_ = value;
        return this;
      }
      public Builder ClearExecTransType() {
        result.hasExecTransType = false;
        result.execTransType_ = "";
        return this;
      }
      
      public bool HasMultiLegReportingType {
        get { return result.HasMultiLegReportingType; }
      }
      public string MultiLegReportingType {
        get { return result.MultiLegReportingType; }
        set { SetMultiLegReportingType(value); }
      }
      public Builder SetMultiLegReportingType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMultiLegReportingType = true;
        result.multiLegReportingType_ = value;
        return this;
      }
      public Builder ClearMultiLegReportingType() {
        result.hasMultiLegReportingType = false;
        result.multiLegReportingType_ = "1";
        return this;
      }
      
      public bool HasSecurityID {
        get { return result.HasSecurityID; }
      }
      public string SecurityID {
        get { return result.SecurityID; }
        set { SetSecurityID(value); }
      }
      public Builder SetSecurityID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityID = true;
        result.securityID_ = value;
        return this;
      }
      public Builder ClearSecurityID() {
        result.hasSecurityID = false;
        result.securityID_ = "";
        return this;
      }
      
      public bool HasSecurityType {
        get { return result.HasSecurityType; }
      }
      public string SecurityType {
        get { return result.SecurityType; }
        set { SetSecurityType(value); }
      }
      public Builder SetSecurityType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSecurityType = true;
        result.securityType_ = value;
        return this;
      }
      public Builder ClearSecurityType() {
        result.hasSecurityType = false;
        result.securityType_ = "";
        return this;
      }
      
      public bool HasIDSource {
        get { return result.HasIDSource; }
      }
      public string IDSource {
        get { return result.IDSource; }
        set { SetIDSource(value); }
      }
      public Builder SetIDSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIDSource = true;
        result.iDSource_ = value;
        return this;
      }
      public Builder ClearIDSource() {
        result.hasIDSource = false;
        result.iDSource_ = "";
        return this;
      }
      
      public bool HasAccount {
        get { return result.HasAccount; }
      }
      public string Account {
        get { return result.Account; }
        set { SetAccount(value); }
      }
      public Builder SetAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccount = true;
        result.account_ = value;
        return this;
      }
      public Builder ClearAccount() {
        result.hasAccount = false;
        result.account_ = "";
        return this;
      }
      
      public bool HasOrdStatus {
        get { return result.HasOrdStatus; }
      }
      public string OrdStatus {
        get { return result.OrdStatus; }
        set { SetOrdStatus(value); }
      }
      public Builder SetOrdStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrdStatus = true;
        result.ordStatus_ = value;
        return this;
      }
      public Builder ClearOrdStatus() {
        result.hasOrdStatus = false;
        result.ordStatus_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.HasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasSide {
        get { return result.HasSide; }
      }
      public string Side {
        get { return result.Side; }
        set { SetSide(value); }
      }
      public Builder SetSide(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSide = true;
        result.side_ = value;
        return this;
      }
      public Builder ClearSide() {
        result.hasSide = false;
        result.side_ = "";
        return this;
      }
      
      public bool HasTimeInForce {
        get { return result.HasTimeInForce; }
      }
      public string TimeInForce {
        get { return result.TimeInForce; }
        set { SetTimeInForce(value); }
      }
      public Builder SetTimeInForce(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimeInForce = true;
        result.timeInForce_ = value;
        return this;
      }
      public Builder ClearTimeInForce() {
        result.hasTimeInForce = false;
        result.timeInForce_ = "";
        return this;
      }
      
      public bool HasMaturityMonthYear {
        get { return result.HasMaturityMonthYear; }
      }
      public string MaturityMonthYear {
        get { return result.MaturityMonthYear; }
        set { SetMaturityMonthYear(value); }
      }
      public Builder SetMaturityMonthYear(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMaturityMonthYear = true;
        result.maturityMonthYear_ = value;
        return this;
      }
      public Builder ClearMaturityMonthYear() {
        result.hasMaturityMonthYear = false;
        result.maturityMonthYear_ = "";
        return this;
      }
      
      public bool HasTransactTime {
        get { return result.HasTransactTime; }
      }
      public string TransactTime {
        get { return result.TransactTime; }
        set { SetTransactTime(value); }
      }
      public Builder SetTransactTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTransactTime = true;
        result.transactTime_ = value;
        return this;
      }
      public Builder ClearTransactTime() {
        result.hasTransactTime = false;
        result.transactTime_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.HasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasCumQty {
        get { return result.HasCumQty; }
      }
      public string CumQty {
        get { return result.CumQty; }
        set { SetCumQty(value); }
      }
      public Builder SetCumQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCumQty = true;
        result.cumQty_ = value;
        return this;
      }
      public Builder ClearCumQty() {
        result.hasCumQty = false;
        result.cumQty_ = "0";
        return this;
      }
      
      public bool HasOrderQty {
        get { return result.HasOrderQty; }
      }
      public string OrderQty {
        get { return result.OrderQty; }
        set { SetOrderQty(value); }
      }
      public Builder SetOrderQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderQty = true;
        result.orderQty_ = value;
        return this;
      }
      public Builder ClearOrderQty() {
        result.hasOrderQty = false;
        result.orderQty_ = "0";
        return this;
      }
      
      public bool HasLeavesQty {
        get { return result.HasLeavesQty; }
      }
      public string LeavesQty {
        get { return result.LeavesQty; }
        set { SetLeavesQty(value); }
      }
      public Builder SetLeavesQty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLeavesQty = true;
        result.leavesQty_ = value;
        return this;
      }
      public Builder ClearLeavesQty() {
        result.hasLeavesQty = false;
        result.leavesQty_ = "0";
        return this;
      }
      
      public bool HasLastShares {
        get { return result.HasLastShares; }
      }
      public string LastShares {
        get { return result.LastShares; }
        set { SetLastShares(value); }
      }
      public Builder SetLastShares(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLastShares = true;
        result.lastShares_ = value;
        return this;
      }
      public Builder ClearLastShares() {
        result.hasLastShares = false;
        result.lastShares_ = "0";
        return this;
      }
      
      public bool HasPrice {
        get { return result.HasPrice; }
      }
      public string Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        result.hasPrice = false;
        result.price_ = "0";
        return this;
      }
      
      public bool HasAvgPx {
        get { return result.HasAvgPx; }
      }
      public string AvgPx {
        get { return result.AvgPx; }
        set { SetAvgPx(value); }
      }
      public Builder SetAvgPx(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAvgPx = true;
        result.avgPx_ = value;
        return this;
      }
      public Builder ClearAvgPx() {
        result.hasAvgPx = false;
        result.avgPx_ = "0";
        return this;
      }
      
      public bool HasLastPx {
        get { return result.HasLastPx; }
      }
      public string LastPx {
        get { return result.LastPx; }
        set { SetLastPx(value); }
      }
      public Builder SetLastPx(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLastPx = true;
        result.lastPx_ = value;
        return this;
      }
      public Builder ClearLastPx() {
        result.hasLastPx = false;
        result.lastPx_ = "0";
        return this;
      }
      
      public bool HasStopPx {
        get { return result.HasStopPx; }
      }
      public string StopPx {
        get { return result.StopPx; }
        set { SetStopPx(value); }
      }
      public Builder SetStopPx(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStopPx = true;
        result.stopPx_ = value;
        return this;
      }
      public Builder ClearStopPx() {
        result.hasStopPx = false;
        result.stopPx_ = "0";
        return this;
      }
    }
    static ExecutionReportData() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DraftOrderMessage : pb::GeneratedMessage<DraftOrderMessage, DraftOrderMessage.Builder> {
    private static readonly DraftOrderMessage defaultInstance = new Builder().BuildPartial();
    public static DraftOrderMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DraftOrderMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DraftOrderMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftOrderMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DraftOrderMessage, DraftOrderMessage.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DraftOrderMessage__FieldAccessorTable; }
    }
    
    public const int DraftOrderDataFieldNumber = 1;
    private bool hasDraftOrderData;
    private global::quantmodel.DraftOrderData draftOrderData_ = global::quantmodel.DraftOrderData.DefaultInstance;
    public bool HasDraftOrderData {
      get { return hasDraftOrderData; }
    }
    public global::quantmodel.DraftOrderData DraftOrderData {
      get { return draftOrderData_; }
    }
    
    public const int DraftAllocationDataFieldNumber = 2;
    private pbc::PopsicleList<global::quantmodel.DraftAllocationData> draftAllocationData_ = new pbc::PopsicleList<global::quantmodel.DraftAllocationData>();
    public scg::IList<global::quantmodel.DraftAllocationData> DraftAllocationDataList {
      get { return draftAllocationData_; }
    }
    public int DraftAllocationDataCount {
      get { return draftAllocationData_.Count; }
    }
    public global::quantmodel.DraftAllocationData GetDraftAllocationData(int index) {
      return draftAllocationData_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasDraftOrderData) {
        output.WriteMessage(1, DraftOrderData);
      }
      foreach (global::quantmodel.DraftAllocationData element in DraftAllocationDataList) {
        output.WriteMessage(2, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasDraftOrderData) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, DraftOrderData);
        }
        foreach (global::quantmodel.DraftAllocationData element in DraftAllocationDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DraftOrderMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DraftOrderMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DraftOrderMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DraftOrderMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DraftOrderMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DraftOrderMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DraftOrderMessage result = new DraftOrderMessage();
      
      protected override DraftOrderMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DraftOrderMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DraftOrderMessage.Descriptor; }
      }
      
      public override DraftOrderMessage DefaultInstanceForType {
        get { return global::quantmodel.DraftOrderMessage.DefaultInstance; }
      }
      
      public override DraftOrderMessage BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.draftAllocationData_.MakeReadOnly();
        DraftOrderMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DraftOrderMessage) {
          return MergeFrom((DraftOrderMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DraftOrderMessage other) {
        if (other == global::quantmodel.DraftOrderMessage.DefaultInstance) return this;
        if (other.HasDraftOrderData) {
          MergeDraftOrderData(other.DraftOrderData);
        }
        if (other.draftAllocationData_.Count != 0) {
          base.AddRange(other.draftAllocationData_, result.draftAllocationData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::quantmodel.DraftOrderData.Builder subBuilder = global::quantmodel.DraftOrderData.CreateBuilder();
              if (HasDraftOrderData) {
                subBuilder.MergeFrom(DraftOrderData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DraftOrderData = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::quantmodel.DraftAllocationData.Builder subBuilder = global::quantmodel.DraftAllocationData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddDraftAllocationData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasDraftOrderData {
       get { return result.HasDraftOrderData; }
      }
      public global::quantmodel.DraftOrderData DraftOrderData {
        get { return result.DraftOrderData; }
        set { SetDraftOrderData(value); }
      }
      public Builder SetDraftOrderData(global::quantmodel.DraftOrderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDraftOrderData = true;
        result.draftOrderData_ = value;
        return this;
      }
      public Builder SetDraftOrderData(global::quantmodel.DraftOrderData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDraftOrderData = true;
        result.draftOrderData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDraftOrderData(global::quantmodel.DraftOrderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDraftOrderData &&
            result.draftOrderData_ != global::quantmodel.DraftOrderData.DefaultInstance) {
            result.draftOrderData_ = global::quantmodel.DraftOrderData.CreateBuilder(result.draftOrderData_).MergeFrom(value).BuildPartial();
        } else {
          result.draftOrderData_ = value;
        }
        result.hasDraftOrderData = true;
        return this;
      }
      public Builder ClearDraftOrderData() {
        result.hasDraftOrderData = false;
        result.draftOrderData_ = global::quantmodel.DraftOrderData.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.DraftAllocationData> DraftAllocationDataList {
        get { return result.draftAllocationData_; }
      }
      public int DraftAllocationDataCount {
        get { return result.DraftAllocationDataCount; }
      }
      public global::quantmodel.DraftAllocationData GetDraftAllocationData(int index) {
        return result.GetDraftAllocationData(index);
      }
      public Builder SetDraftAllocationData(int index, global::quantmodel.DraftAllocationData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.draftAllocationData_[index] = value;
        return this;
      }
      public Builder SetDraftAllocationData(int index, global::quantmodel.DraftAllocationData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.draftAllocationData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDraftAllocationData(global::quantmodel.DraftAllocationData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.draftAllocationData_.Add(value);
        return this;
      }
      public Builder AddDraftAllocationData(global::quantmodel.DraftAllocationData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.draftAllocationData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDraftAllocationData(scg::IEnumerable<global::quantmodel.DraftAllocationData> values) {
        base.AddRange(values, result.draftAllocationData_);
        return this;
      }
      public Builder ClearDraftAllocationData() {
        result.draftAllocationData_.Clear();
        return this;
      }
    }
    static DraftOrderMessage() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class OrderMessage : pb::GeneratedMessage<OrderMessage, OrderMessage.Builder> {
    private static readonly OrderMessage defaultInstance = new Builder().BuildPartial();
    public static OrderMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrderMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OrderMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_OrderMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrderMessage, OrderMessage.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_OrderMessage__FieldAccessorTable; }
    }
    
    public const int OrderDataFieldNumber = 1;
    private bool hasOrderData;
    private global::quantmodel.OrderData orderData_ = global::quantmodel.OrderData.DefaultInstance;
    public bool HasOrderData {
      get { return hasOrderData; }
    }
    public global::quantmodel.OrderData OrderData {
      get { return orderData_; }
    }
    
    public const int AllocationDataFieldNumber = 2;
    private pbc::PopsicleList<global::quantmodel.AllocationData> allocationData_ = new pbc::PopsicleList<global::quantmodel.AllocationData>();
    public scg::IList<global::quantmodel.AllocationData> AllocationDataList {
      get { return allocationData_; }
    }
    public int AllocationDataCount {
      get { return allocationData_.Count; }
    }
    public global::quantmodel.AllocationData GetAllocationData(int index) {
      return allocationData_[index];
    }
    
    public const int ReleaseDataFieldNumber = 3;
    private pbc::PopsicleList<global::quantmodel.ReleaseData> releaseData_ = new pbc::PopsicleList<global::quantmodel.ReleaseData>();
    public scg::IList<global::quantmodel.ReleaseData> ReleaseDataList {
      get { return releaseData_; }
    }
    public int ReleaseDataCount {
      get { return releaseData_.Count; }
    }
    public global::quantmodel.ReleaseData GetReleaseData(int index) {
      return releaseData_[index];
    }
    
    public const int ExecutionDataFieldNumber = 4;
    private pbc::PopsicleList<global::quantmodel.ExecutionData> executionData_ = new pbc::PopsicleList<global::quantmodel.ExecutionData>();
    public scg::IList<global::quantmodel.ExecutionData> ExecutionDataList {
      get { return executionData_; }
    }
    public int ExecutionDataCount {
      get { return executionData_.Count; }
    }
    public global::quantmodel.ExecutionData GetExecutionData(int index) {
      return executionData_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOrderData) {
        output.WriteMessage(1, OrderData);
      }
      foreach (global::quantmodel.AllocationData element in AllocationDataList) {
        output.WriteMessage(2, element);
      }
      foreach (global::quantmodel.ReleaseData element in ReleaseDataList) {
        output.WriteMessage(3, element);
      }
      foreach (global::quantmodel.ExecutionData element in ExecutionDataList) {
        output.WriteMessage(4, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOrderData) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, OrderData);
        }
        foreach (global::quantmodel.AllocationData element in AllocationDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::quantmodel.ReleaseData element in ReleaseDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::quantmodel.ExecutionData element in ExecutionDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OrderMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrderMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrderMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrderMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrderMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OrderMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OrderMessage result = new OrderMessage();
      
      protected override OrderMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OrderMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.OrderMessage.Descriptor; }
      }
      
      public override OrderMessage DefaultInstanceForType {
        get { return global::quantmodel.OrderMessage.DefaultInstance; }
      }
      
      public override OrderMessage BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.allocationData_.MakeReadOnly();
        result.releaseData_.MakeReadOnly();
        result.executionData_.MakeReadOnly();
        OrderMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrderMessage) {
          return MergeFrom((OrderMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrderMessage other) {
        if (other == global::quantmodel.OrderMessage.DefaultInstance) return this;
        if (other.HasOrderData) {
          MergeOrderData(other.OrderData);
        }
        if (other.allocationData_.Count != 0) {
          base.AddRange(other.allocationData_, result.allocationData_);
        }
        if (other.releaseData_.Count != 0) {
          base.AddRange(other.releaseData_, result.releaseData_);
        }
        if (other.executionData_.Count != 0) {
          base.AddRange(other.executionData_, result.executionData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::quantmodel.OrderData.Builder subBuilder = global::quantmodel.OrderData.CreateBuilder();
              if (HasOrderData) {
                subBuilder.MergeFrom(OrderData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OrderData = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::quantmodel.AllocationData.Builder subBuilder = global::quantmodel.AllocationData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAllocationData(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              global::quantmodel.ReleaseData.Builder subBuilder = global::quantmodel.ReleaseData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddReleaseData(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::quantmodel.ExecutionData.Builder subBuilder = global::quantmodel.ExecutionData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddExecutionData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasOrderData {
       get { return result.HasOrderData; }
      }
      public global::quantmodel.OrderData OrderData {
        get { return result.OrderData; }
        set { SetOrderData(value); }
      }
      public Builder SetOrderData(global::quantmodel.OrderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrderData = true;
        result.orderData_ = value;
        return this;
      }
      public Builder SetOrderData(global::quantmodel.OrderData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOrderData = true;
        result.orderData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrderData(global::quantmodel.OrderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOrderData &&
            result.orderData_ != global::quantmodel.OrderData.DefaultInstance) {
            result.orderData_ = global::quantmodel.OrderData.CreateBuilder(result.orderData_).MergeFrom(value).BuildPartial();
        } else {
          result.orderData_ = value;
        }
        result.hasOrderData = true;
        return this;
      }
      public Builder ClearOrderData() {
        result.hasOrderData = false;
        result.orderData_ = global::quantmodel.OrderData.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.AllocationData> AllocationDataList {
        get { return result.allocationData_; }
      }
      public int AllocationDataCount {
        get { return result.AllocationDataCount; }
      }
      public global::quantmodel.AllocationData GetAllocationData(int index) {
        return result.GetAllocationData(index);
      }
      public Builder SetAllocationData(int index, global::quantmodel.AllocationData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.allocationData_[index] = value;
        return this;
      }
      public Builder SetAllocationData(int index, global::quantmodel.AllocationData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.allocationData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllocationData(global::quantmodel.AllocationData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.allocationData_.Add(value);
        return this;
      }
      public Builder AddAllocationData(global::quantmodel.AllocationData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.allocationData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllocationData(scg::IEnumerable<global::quantmodel.AllocationData> values) {
        base.AddRange(values, result.allocationData_);
        return this;
      }
      public Builder ClearAllocationData() {
        result.allocationData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.ReleaseData> ReleaseDataList {
        get { return result.releaseData_; }
      }
      public int ReleaseDataCount {
        get { return result.ReleaseDataCount; }
      }
      public global::quantmodel.ReleaseData GetReleaseData(int index) {
        return result.GetReleaseData(index);
      }
      public Builder SetReleaseData(int index, global::quantmodel.ReleaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.releaseData_[index] = value;
        return this;
      }
      public Builder SetReleaseData(int index, global::quantmodel.ReleaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.releaseData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReleaseData(global::quantmodel.ReleaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.releaseData_.Add(value);
        return this;
      }
      public Builder AddReleaseData(global::quantmodel.ReleaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.releaseData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReleaseData(scg::IEnumerable<global::quantmodel.ReleaseData> values) {
        base.AddRange(values, result.releaseData_);
        return this;
      }
      public Builder ClearReleaseData() {
        result.releaseData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.ExecutionData> ExecutionDataList {
        get { return result.executionData_; }
      }
      public int ExecutionDataCount {
        get { return result.ExecutionDataCount; }
      }
      public global::quantmodel.ExecutionData GetExecutionData(int index) {
        return result.GetExecutionData(index);
      }
      public Builder SetExecutionData(int index, global::quantmodel.ExecutionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.executionData_[index] = value;
        return this;
      }
      public Builder SetExecutionData(int index, global::quantmodel.ExecutionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.executionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExecutionData(global::quantmodel.ExecutionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.executionData_.Add(value);
        return this;
      }
      public Builder AddExecutionData(global::quantmodel.ExecutionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.executionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExecutionData(scg::IEnumerable<global::quantmodel.ExecutionData> values) {
        base.AddRange(values, result.executionData_);
        return this;
      }
      public Builder ClearExecutionData() {
        result.executionData_.Clear();
        return this;
      }
    }
    static OrderMessage() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DatabaseEngineRequest : pb::GeneratedMessage<DatabaseEngineRequest, DatabaseEngineRequest.Builder> {
    private static readonly DatabaseEngineRequest defaultInstance = new Builder().BuildPartial();
    public static DatabaseEngineRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DatabaseEngineRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DatabaseEngineRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DatabaseEngineRequest, DatabaseEngineRequest.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum QueryType {
        SELECT = 1,
        UPDATE = 2,
      }
      
      public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
        private static readonly Query defaultInstance = new Builder().BuildPartial();
        public static Query DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Query DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override Query ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineRequest_Query__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
          get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineRequest_Query__FieldAccessorTable; }
        }
        
        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::quantmodel.DatabaseEngineRequest.Types.QueryType type_ = global::quantmodel.DatabaseEngineRequest.Types.QueryType.SELECT;
        public bool HasType {
          get { return hasType; }
        }
        public global::quantmodel.DatabaseEngineRequest.Types.QueryType Type {
          get { return type_; }
        }
        
        public const int QueryIdFieldNumber = 2;
        private bool hasQueryId;
        private string queryId_ = "";
        public bool HasQueryId {
          get { return hasQueryId; }
        }
        public string QueryId {
          get { return queryId_; }
        }
        
        public const int QueryStrFieldNumber = 3;
        private bool hasQueryStr;
        private string queryStr_ = "";
        public bool HasQueryStr {
          get { return hasQueryStr; }
        }
        public string QueryStr {
          get { return queryStr_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasType) {
            output.WriteEnum(1, (int) Type);
          }
          if (HasQueryId) {
            output.WriteString(2, QueryId);
          }
          if (HasQueryStr) {
            output.WriteString(3, QueryStr);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (HasQueryId) {
              size += pb::CodedOutputStream.ComputeStringSize(2, QueryId);
            }
            if (HasQueryStr) {
              size += pb::CodedOutputStream.ComputeStringSize(3, QueryStr);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Query ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Query ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Query prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          Query result = new Query();
          
          protected override Query MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new Query();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::quantmodel.DatabaseEngineRequest.Types.Query.Descriptor; }
          }
          
          public override Query DefaultInstanceForType {
            get { return global::quantmodel.DatabaseEngineRequest.Types.Query.DefaultInstance; }
          }
          
          public override Query BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            Query returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Query) {
              return MergeFrom((Query) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Query other) {
            if (other == global::quantmodel.DatabaseEngineRequest.Types.Query.DefaultInstance) return this;
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasQueryId) {
              QueryId = other.QueryId;
            }
            if (other.HasQueryStr) {
              QueryStr = other.QueryStr;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            pb::UnknownFieldSet.Builder unknownFields = null;
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                  break;
                }
                case 8: {
                  int rawValue = input.ReadEnum();
                  if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DatabaseEngineRequest.Types.QueryType), rawValue)) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong) rawValue);
                  } else {
                    Type = (global::quantmodel.DatabaseEngineRequest.Types.QueryType) rawValue;
                  }
                  break;
                }
                case 18: {
                  QueryId = input.ReadString();
                  break;
                }
                case 26: {
                  QueryStr = input.ReadString();
                  break;
                }
              }
            }
          }
          
          
          public bool HasType {
           get { return result.HasType; }
          }
          public global::quantmodel.DatabaseEngineRequest.Types.QueryType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::quantmodel.DatabaseEngineRequest.Types.QueryType value) {
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            result.hasType = false;
            result.type_ = global::quantmodel.DatabaseEngineRequest.Types.QueryType.SELECT;
            return this;
          }
          
          public bool HasQueryId {
            get { return result.HasQueryId; }
          }
          public string QueryId {
            get { return result.QueryId; }
            set { SetQueryId(value); }
          }
          public Builder SetQueryId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasQueryId = true;
            result.queryId_ = value;
            return this;
          }
          public Builder ClearQueryId() {
            result.hasQueryId = false;
            result.queryId_ = "";
            return this;
          }
          
          public bool HasQueryStr {
            get { return result.HasQueryStr; }
          }
          public string QueryStr {
            get { return result.QueryStr; }
            set { SetQueryStr(value); }
          }
          public Builder SetQueryStr(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasQueryStr = true;
            result.queryStr_ = value;
            return this;
          }
          public Builder ClearQueryStr() {
            result.hasQueryStr = false;
            result.queryStr_ = "";
            return this;
          }
        }
        static Query() {
          object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int QueryFieldNumber = 3;
    private pbc::PopsicleList<global::quantmodel.DatabaseEngineRequest.Types.Query> query_ = new pbc::PopsicleList<global::quantmodel.DatabaseEngineRequest.Types.Query>();
    public scg::IList<global::quantmodel.DatabaseEngineRequest.Types.Query> QueryList {
      get { return query_; }
    }
    public int QueryCount {
      get { return query_.Count; }
    }
    public global::quantmodel.DatabaseEngineRequest.Types.Query GetQuery(int index) {
      return query_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      foreach (global::quantmodel.DatabaseEngineRequest.Types.Query element in QueryList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        foreach (global::quantmodel.DatabaseEngineRequest.Types.Query element in QueryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DatabaseEngineRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DatabaseEngineRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseEngineRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DatabaseEngineRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DatabaseEngineRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DatabaseEngineRequest result = new DatabaseEngineRequest();
      
      protected override DatabaseEngineRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DatabaseEngineRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DatabaseEngineRequest.Descriptor; }
      }
      
      public override DatabaseEngineRequest DefaultInstanceForType {
        get { return global::quantmodel.DatabaseEngineRequest.DefaultInstance; }
      }
      
      public override DatabaseEngineRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.query_.MakeReadOnly();
        DatabaseEngineRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DatabaseEngineRequest) {
          return MergeFrom((DatabaseEngineRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DatabaseEngineRequest other) {
        if (other == global::quantmodel.DatabaseEngineRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.query_.Count != 0) {
          base.AddRange(other.query_, result.query_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 26: {
              global::quantmodel.DatabaseEngineRequest.Types.Query.Builder subBuilder = global::quantmodel.DatabaseEngineRequest.Types.Query.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddQuery(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.DatabaseEngineRequest.Types.Query> QueryList {
        get { return result.query_; }
      }
      public int QueryCount {
        get { return result.QueryCount; }
      }
      public global::quantmodel.DatabaseEngineRequest.Types.Query GetQuery(int index) {
        return result.GetQuery(index);
      }
      public Builder SetQuery(int index, global::quantmodel.DatabaseEngineRequest.Types.Query value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.query_[index] = value;
        return this;
      }
      public Builder SetQuery(int index, global::quantmodel.DatabaseEngineRequest.Types.Query.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.query_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuery(global::quantmodel.DatabaseEngineRequest.Types.Query value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.query_.Add(value);
        return this;
      }
      public Builder AddQuery(global::quantmodel.DatabaseEngineRequest.Types.Query.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.query_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuery(scg::IEnumerable<global::quantmodel.DatabaseEngineRequest.Types.Query> values) {
        base.AddRange(values, result.query_);
        return this;
      }
      public Builder ClearQuery() {
        result.query_.Clear();
        return this;
      }
    }
    static DatabaseEngineRequest() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DatabaseEngineResponse : pb::GeneratedMessage<DatabaseEngineResponse, DatabaseEngineResponse.Builder> {
    private static readonly DatabaseEngineResponse defaultInstance = new Builder().BuildPartial();
    public static DatabaseEngineResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DatabaseEngineResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DatabaseEngineResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DatabaseEngineResponse, DatabaseEngineResponse.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public sealed partial class ResultSet : pb::GeneratedMessage<ResultSet, ResultSet.Builder> {
        private static readonly ResultSet defaultInstance = new Builder().BuildPartial();
        public static ResultSet DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ResultSet DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override ResultSet ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ResultSet, ResultSet.Builder> InternalFieldAccessors {
          get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet__FieldAccessorTable; }
        }
        
        #region Nested types
        public static class Types {
          public sealed partial class Row : pb::GeneratedMessage<Row, Row.Builder> {
            private static readonly Row defaultInstance = new Builder().BuildPartial();
            public static Row DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Row DefaultInstanceForType {
              get { return defaultInstance; }
            }
            
            protected override Row ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Row, Row.Builder> InternalFieldAccessors {
              get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row__FieldAccessorTable; }
            }
            
            #region Nested types
            public static class Types {
              public sealed partial class Column : pb::GeneratedMessage<Column, Column.Builder> {
                private static readonly Column defaultInstance = new Builder().BuildPartial();
                public static Column DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override Column DefaultInstanceForType {
                  get { return defaultInstance; }
                }
                
                protected override Column ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<Column, Column.Builder> InternalFieldAccessors {
                  get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DatabaseEngineResponse_ResultSet_Row_Column__FieldAccessorTable; }
                }
                
                public const int ColumnIdFieldNumber = 1;
                private bool hasColumnId;
                private int columnId_ = 0;
                public bool HasColumnId {
                  get { return hasColumnId; }
                }
                public int ColumnId {
                  get { return columnId_; }
                }
                
                public const int NameFieldNumber = 2;
                private bool hasName;
                private string name_ = "";
                public bool HasName {
                  get { return hasName; }
                }
                public string Name {
                  get { return name_; }
                }
                
                public const int ValueFieldNumber = 3;
                private bool hasValue;
                private string value_ = "";
                public bool HasValue {
                  get { return hasValue; }
                }
                public string Value {
                  get { return value_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::CodedOutputStream output) {
                  int size = SerializedSize;
                  if (HasColumnId) {
                    output.WriteInt32(1, ColumnId);
                  }
                  if (HasName) {
                    output.WriteString(2, Name);
                  }
                  if (HasValue) {
                    output.WriteString(3, Value);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    
                    size = 0;
                    if (HasColumnId) {
                      size += pb::CodedOutputStream.ComputeInt32Size(1, ColumnId);
                    }
                    if (HasName) {
                      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
                    }
                    if (HasValue) {
                      size += pb::CodedOutputStream.ComputeStringSize(3, Value);
                    }
                    size += UnknownFields.SerializedSize;
                    memoizedSerializedSize = size;
                    return size;
                  }
                }
                
                public static Column ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Column ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Column ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Column ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Column ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Column ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static Column ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static Column ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static Column ParseFrom(pb::CodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Column ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(Column prototype) {
                  return (Builder) new Builder().MergeFrom(prototype);
                }
                
                public sealed partial class Builder : pb::GeneratedBuilder<Column, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {}
                  
                  Column result = new Column();
                  
                  protected override Column MessageBeingBuilt {
                    get { return result; }
                  }
                  
                  public override Builder Clear() {
                    result = new Column();
                    return this;
                  }
                  
                  public override Builder Clone() {
                    return new Builder().MergeFrom(result);
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Descriptor; }
                  }
                  
                  public override Column DefaultInstanceForType {
                    get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.DefaultInstance; }
                  }
                  
                  public override Column BuildPartial() {
                    if (result == null) {
                      throw new global::System.InvalidOperationException("build() has already been called on this Builder");
                    }
                    Column returnMe = result;
                    result = null;
                    return returnMe;
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is Column) {
                      return MergeFrom((Column) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(Column other) {
                    if (other == global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.DefaultInstance) return this;
                    if (other.HasColumnId) {
                      ColumnId = other.ColumnId;
                    }
                    if (other.HasName) {
                      Name = other.Name;
                    }
                    if (other.HasValue) {
                      Value = other.Value;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::CodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    while (true) {
                      uint tag = input.ReadTag();
                      switch (tag) {
                        case 0: {
                          if (unknownFields != null) {
                            this.UnknownFields = unknownFields.Build();
                          }
                          return this;
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                          break;
                        }
                        case 8: {
                          ColumnId = input.ReadInt32();
                          break;
                        }
                        case 18: {
                          Name = input.ReadString();
                          break;
                        }
                        case 26: {
                          Value = input.ReadString();
                          break;
                        }
                      }
                    }
                  }
                  
                  
                  public bool HasColumnId {
                    get { return result.HasColumnId; }
                  }
                  public int ColumnId {
                    get { return result.ColumnId; }
                    set { SetColumnId(value); }
                  }
                  public Builder SetColumnId(int value) {
                    result.hasColumnId = true;
                    result.columnId_ = value;
                    return this;
                  }
                  public Builder ClearColumnId() {
                    result.hasColumnId = false;
                    result.columnId_ = 0;
                    return this;
                  }
                  
                  public bool HasName {
                    get { return result.HasName; }
                  }
                  public string Name {
                    get { return result.Name; }
                    set { SetName(value); }
                  }
                  public Builder SetName(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    result.hasName = true;
                    result.name_ = value;
                    return this;
                  }
                  public Builder ClearName() {
                    result.hasName = false;
                    result.name_ = "";
                    return this;
                  }
                  
                  public bool HasValue {
                    get { return result.HasValue; }
                  }
                  public string Value {
                    get { return result.Value; }
                    set { SetValue(value); }
                  }
                  public Builder SetValue(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    result.hasValue = true;
                    result.value_ = value;
                    return this;
                  }
                  public Builder ClearValue() {
                    result.hasValue = false;
                    result.value_ = "";
                    return this;
                  }
                }
                static Column() {
                  object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public const int RowIdFieldNumber = 1;
            private bool hasRowId;
            private int rowId_ = 0;
            public bool HasRowId {
              get { return hasRowId; }
            }
            public int RowId {
              get { return rowId_; }
            }
            
            public const int ColumnFieldNumber = 2;
            private pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column> column_ = new pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column>();
            public scg::IList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column> ColumnList {
              get { return column_; }
            }
            public int ColumnCount {
              get { return column_.Count; }
            }
            public global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column GetColumn(int index) {
              return column_[index];
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::CodedOutputStream output) {
              int size = SerializedSize;
              if (HasRowId) {
                output.WriteInt32(1, RowId);
              }
              foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column element in ColumnList) {
                output.WriteMessage(2, element);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (HasRowId) {
                  size += pb::CodedOutputStream.ComputeInt32Size(1, RowId);
                }
                foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column element in ColumnList) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Row ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Row ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Row ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Row ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Row ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Row ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Row ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Row ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Row ParseFrom(pb::CodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Row ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Row prototype) {
              return (Builder) new Builder().MergeFrom(prototype);
            }
            
            public sealed partial class Builder : pb::GeneratedBuilder<Row, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {}
              
              Row result = new Row();
              
              protected override Row MessageBeingBuilt {
                get { return result; }
              }
              
              public override Builder Clear() {
                result = new Row();
                return this;
              }
              
              public override Builder Clone() {
                return new Builder().MergeFrom(result);
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Descriptor; }
              }
              
              public override Row DefaultInstanceForType {
                get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.DefaultInstance; }
              }
              
              public override Row BuildPartial() {
                if (result == null) {
                  throw new global::System.InvalidOperationException("build() has already been called on this Builder");
                }
                result.column_.MakeReadOnly();
                Row returnMe = result;
                result = null;
                return returnMe;
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Row) {
                  return MergeFrom((Row) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Row other) {
                if (other == global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.DefaultInstance) return this;
                if (other.HasRowId) {
                  RowId = other.RowId;
                }
                if (other.column_.Count != 0) {
                  base.AddRange(other.column_, result.column_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::CodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                pb::UnknownFieldSet.Builder unknownFields = null;
                while (true) {
                  uint tag = input.ReadTag();
                  switch (tag) {
                    case 0: {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                      break;
                    }
                    case 8: {
                      RowId = input.ReadInt32();
                      break;
                    }
                    case 18: {
                      global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Builder subBuilder = global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.CreateBuilder();
                      input.ReadMessage(subBuilder, extensionRegistry);
                      AddColumn(subBuilder.BuildPartial());
                      break;
                    }
                  }
                }
              }
              
              
              public bool HasRowId {
                get { return result.HasRowId; }
              }
              public int RowId {
                get { return result.RowId; }
                set { SetRowId(value); }
              }
              public Builder SetRowId(int value) {
                result.hasRowId = true;
                result.rowId_ = value;
                return this;
              }
              public Builder ClearRowId() {
                result.hasRowId = false;
                result.rowId_ = 0;
                return this;
              }
              
              public pbc::IPopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column> ColumnList {
                get { return result.column_; }
              }
              public int ColumnCount {
                get { return result.ColumnCount; }
              }
              public global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column GetColumn(int index) {
                return result.GetColumn(index);
              }
              public Builder SetColumn(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                result.column_[index] = value;
                return this;
              }
              public Builder SetColumn(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                result.column_[index] = builderForValue.Build();
                return this;
              }
              public Builder AddColumn(global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                result.column_.Add(value);
                return this;
              }
              public Builder AddColumn(global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                result.column_.Add(builderForValue.Build());
                return this;
              }
              public Builder AddRangeColumn(scg::IEnumerable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Types.Column> values) {
                base.AddRange(values, result.column_);
                return this;
              }
              public Builder ClearColumn() {
                result.column_.Clear();
                return this;
              }
            }
            static Row() {
              object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int QueryIdFieldNumber = 1;
        private bool hasQueryId;
        private string queryId_ = "";
        public bool HasQueryId {
          get { return hasQueryId; }
        }
        public string QueryId {
          get { return queryId_; }
        }
        
        public const int RowFieldNumber = 2;
        private pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row> row_ = new pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row>();
        public scg::IList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row> RowList {
          get { return row_; }
        }
        public int RowCount {
          get { return row_.Count; }
        }
        public global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row GetRow(int index) {
          return row_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasQueryId) {
            output.WriteString(1, QueryId);
          }
          foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row element in RowList) {
            output.WriteMessage(2, element);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasQueryId) {
              size += pb::CodedOutputStream.ComputeStringSize(1, QueryId);
            }
            foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row element in RowList) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static ResultSet ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResultSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResultSet ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResultSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResultSet ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResultSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ResultSet ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ResultSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ResultSet ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResultSet ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ResultSet prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilder<ResultSet, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          ResultSet result = new ResultSet();
          
          protected override ResultSet MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new ResultSet();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Descriptor; }
          }
          
          public override ResultSet DefaultInstanceForType {
            get { return global::quantmodel.DatabaseEngineResponse.Types.ResultSet.DefaultInstance; }
          }
          
          public override ResultSet BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            result.row_.MakeReadOnly();
            ResultSet returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ResultSet) {
              return MergeFrom((ResultSet) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ResultSet other) {
            if (other == global::quantmodel.DatabaseEngineResponse.Types.ResultSet.DefaultInstance) return this;
            if (other.HasQueryId) {
              QueryId = other.QueryId;
            }
            if (other.row_.Count != 0) {
              base.AddRange(other.row_, result.row_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            pb::UnknownFieldSet.Builder unknownFields = null;
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                  break;
                }
                case 10: {
                  QueryId = input.ReadString();
                  break;
                }
                case 18: {
                  global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Builder subBuilder = global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.CreateBuilder();
                  input.ReadMessage(subBuilder, extensionRegistry);
                  AddRow(subBuilder.BuildPartial());
                  break;
                }
              }
            }
          }
          
          
          public bool HasQueryId {
            get { return result.HasQueryId; }
          }
          public string QueryId {
            get { return result.QueryId; }
            set { SetQueryId(value); }
          }
          public Builder SetQueryId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasQueryId = true;
            result.queryId_ = value;
            return this;
          }
          public Builder ClearQueryId() {
            result.hasQueryId = false;
            result.queryId_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row> RowList {
            get { return result.row_; }
          }
          public int RowCount {
            get { return result.RowCount; }
          }
          public global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row GetRow(int index) {
            return result.GetRow(index);
          }
          public Builder SetRow(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.row_[index] = value;
            return this;
          }
          public Builder SetRow(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            result.row_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddRow(global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.row_.Add(value);
            return this;
          }
          public Builder AddRow(global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            result.row_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeRow(scg::IEnumerable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Types.Row> values) {
            base.AddRange(values, result.row_);
            return this;
          }
          public Builder ClearRow() {
            result.row_.Clear();
            return this;
          }
        }
        static ResultSet() {
          object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int ResultSetFieldNumber = 4;
    private pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet> resultSet_ = new pbc::PopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet>();
    public scg::IList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet> ResultSetList {
      get { return resultSet_; }
    }
    public int ResultSetCount {
      get { return resultSet_.Count; }
    }
    public global::quantmodel.DatabaseEngineResponse.Types.ResultSet GetResultSet(int index) {
      return resultSet_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet element in ResultSetList) {
        output.WriteMessage(4, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        foreach (global::quantmodel.DatabaseEngineResponse.Types.ResultSet element in ResultSetList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DatabaseEngineResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DatabaseEngineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseEngineResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DatabaseEngineResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DatabaseEngineResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DatabaseEngineResponse result = new DatabaseEngineResponse();
      
      protected override DatabaseEngineResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DatabaseEngineResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DatabaseEngineResponse.Descriptor; }
      }
      
      public override DatabaseEngineResponse DefaultInstanceForType {
        get { return global::quantmodel.DatabaseEngineResponse.DefaultInstance; }
      }
      
      public override DatabaseEngineResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.resultSet_.MakeReadOnly();
        DatabaseEngineResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DatabaseEngineResponse) {
          return MergeFrom((DatabaseEngineResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DatabaseEngineResponse other) {
        if (other == global::quantmodel.DatabaseEngineResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.resultSet_.Count != 0) {
          base.AddRange(other.resultSet_, result.resultSet_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 34: {
              global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Builder subBuilder = global::quantmodel.DatabaseEngineResponse.Types.ResultSet.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddResultSet(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.DatabaseEngineResponse.Types.ResultSet> ResultSetList {
        get { return result.resultSet_; }
      }
      public int ResultSetCount {
        get { return result.ResultSetCount; }
      }
      public global::quantmodel.DatabaseEngineResponse.Types.ResultSet GetResultSet(int index) {
        return result.GetResultSet(index);
      }
      public Builder SetResultSet(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.resultSet_[index] = value;
        return this;
      }
      public Builder SetResultSet(int index, global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.resultSet_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResultSet(global::quantmodel.DatabaseEngineResponse.Types.ResultSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.resultSet_.Add(value);
        return this;
      }
      public Builder AddResultSet(global::quantmodel.DatabaseEngineResponse.Types.ResultSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.resultSet_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResultSet(scg::IEnumerable<global::quantmodel.DatabaseEngineResponse.Types.ResultSet> values) {
        base.AddRange(values, result.resultSet_);
        return this;
      }
      public Builder ClearResultSet() {
        result.resultSet_.Clear();
        return this;
      }
    }
    static DatabaseEngineResponse() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DealingEngineRequest : pb::GeneratedMessage<DealingEngineRequest, DealingEngineRequest.Builder> {
    private static readonly DealingEngineRequest defaultInstance = new Builder().BuildPartial();
    public static DealingEngineRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DealingEngineRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DealingEngineRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DealingEngineRequest, DealingEngineRequest.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum RequestType {
        EXECUTE_SIGNAL = 1,
        EXECUTE_DRAFT_ORDER = 2,
        CREATE_DRAFT_ORDER = 3,
        CREATE_ORDER = 4,
        UPDATE_ORDER = 5,
        CANCEL_ORDER = 6,
        RELEASE_ORDER = 7,
        CREATE_RELEASE = 8,
        VALIDATE_RELEASE = 9,
        CANCEL_RELEASE = 10,
        REPLACE_RELEASE = 11,
        RELEASE_REJECTED = 12,
        CANCEL_REJECTED = 13,
        RELEASE_RESTATED = 14,
        RELEASE_CANCELED = 15,
        RELEASE_REPLACED = 16,
        CREATE_EXECUTION = 17,
        EXECUTION_CANCELED = 18,
        BROADCAST_DATA = 19,
        ACTIVE_SET = 20,
        QUERY_ORDER = 21,
        QUERY_RELEASE = 22,
        QUERY_EXECUTION = 23,
        ROLLOVER = 24,
        CURRENT_STATUS = 25,
        UPDATE_STATUS = 26,
        MARKETDATA_SUBSCRIBE = 27,
        MARKETDATA_UNSUBSCRIBE = 28,
        FIXENGINE_LOGIN = 29,
        FIXENGINE_LOGOUT = 30,
        LOGOUT_FIXENGINE = 31,
        LOGIN_FIXENGINE = 32,
        RELOAD_STATIC_DATA = 33,
        SHUTDOWN = 34,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::quantmodel.DealingEngineRequest.Types.RequestType type_ = global::quantmodel.DealingEngineRequest.Types.RequestType.EXECUTE_SIGNAL;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.DealingEngineRequest.Types.RequestType Type {
      get { return type_; }
    }
    
    public const int DraftOrderFieldNumber = 4;
    private bool hasDraftOrder;
    private global::quantmodel.DraftOrderMessage draftOrder_ = global::quantmodel.DraftOrderMessage.DefaultInstance;
    public bool HasDraftOrder {
      get { return hasDraftOrder; }
    }
    public global::quantmodel.DraftOrderMessage DraftOrder {
      get { return draftOrder_; }
    }
    
    public const int OrderFieldNumber = 5;
    private bool hasOrder;
    private global::quantmodel.OrderMessage order_ = global::quantmodel.OrderMessage.DefaultInstance;
    public bool HasOrder {
      get { return hasOrder; }
    }
    public global::quantmodel.OrderMessage Order {
      get { return order_; }
    }
    
    public const int ExecutionReportDataFieldNumber = 6;
    private bool hasExecutionReportData;
    private global::quantmodel.ExecutionReportData executionReportData_ = global::quantmodel.ExecutionReportData.DefaultInstance;
    public bool HasExecutionReportData {
      get { return hasExecutionReportData; }
    }
    public global::quantmodel.ExecutionReportData ExecutionReportData {
      get { return executionReportData_; }
    }
    
    public const int FixEngineDataFieldNumber = 7;
    private bool hasFixEngineData;
    private global::quantmodel.FixEngineData fixEngineData_ = global::quantmodel.FixEngineData.DefaultInstance;
    public bool HasFixEngineData {
      get { return hasFixEngineData; }
    }
    public global::quantmodel.FixEngineData FixEngineData {
      get { return fixEngineData_; }
    }
    
    public const int InstrumentDataFieldNumber = 8;
    private pbc::PopsicleList<global::quantmodel.InstrumentData> instrumentData_ = new pbc::PopsicleList<global::quantmodel.InstrumentData>();
    public scg::IList<global::quantmodel.InstrumentData> InstrumentDataList {
      get { return instrumentData_; }
    }
    public int InstrumentDataCount {
      get { return instrumentData_.Count; }
    }
    public global::quantmodel.InstrumentData GetInstrumentData(int index) {
      return instrumentData_[index];
    }
    
    public const int AccountDataFieldNumber = 9;
    private pbc::PopsicleList<global::quantmodel.AccountData> accountData_ = new pbc::PopsicleList<global::quantmodel.AccountData>();
    public scg::IList<global::quantmodel.AccountData> AccountDataList {
      get { return accountData_; }
    }
    public int AccountDataCount {
      get { return accountData_.Count; }
    }
    public global::quantmodel.AccountData GetAccountData(int index) {
      return accountData_[index];
    }
    
    public const int InvestmentSystemDataFieldNumber = 10;
    private pbc::PopsicleList<global::quantmodel.InvestmentSystemData> investmentSystemData_ = new pbc::PopsicleList<global::quantmodel.InvestmentSystemData>();
    public scg::IList<global::quantmodel.InvestmentSystemData> InvestmentSystemDataList {
      get { return investmentSystemData_; }
    }
    public int InvestmentSystemDataCount {
      get { return investmentSystemData_.Count; }
    }
    public global::quantmodel.InvestmentSystemData GetInvestmentSystemData(int index) {
      return investmentSystemData_[index];
    }
    
    public const int SignalDataFieldNumber = 11;
    private pbc::PopsicleList<global::quantmodel.SignalData> signalData_ = new pbc::PopsicleList<global::quantmodel.SignalData>();
    public scg::IList<global::quantmodel.SignalData> SignalDataList {
      get { return signalData_; }
    }
    public int SignalDataCount {
      get { return signalData_.Count; }
    }
    public global::quantmodel.SignalData GetSignalData(int index) {
      return signalData_[index];
    }
    
    public const int SystemParameterDataFieldNumber = 12;
    private bool hasSystemParameterData;
    private global::quantmodel.SystemParameterData systemParameterData_ = global::quantmodel.SystemParameterData.DefaultInstance;
    public bool HasSystemParameterData {
      get { return hasSystemParameterData; }
    }
    public global::quantmodel.SystemParameterData SystemParameterData {
      get { return systemParameterData_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      if (HasDraftOrder) {
        output.WriteMessage(4, DraftOrder);
      }
      if (HasOrder) {
        output.WriteMessage(5, Order);
      }
      if (HasExecutionReportData) {
        output.WriteMessage(6, ExecutionReportData);
      }
      if (HasFixEngineData) {
        output.WriteMessage(7, FixEngineData);
      }
      foreach (global::quantmodel.InstrumentData element in InstrumentDataList) {
        output.WriteMessage(8, element);
      }
      foreach (global::quantmodel.AccountData element in AccountDataList) {
        output.WriteMessage(9, element);
      }
      foreach (global::quantmodel.InvestmentSystemData element in InvestmentSystemDataList) {
        output.WriteMessage(10, element);
      }
      foreach (global::quantmodel.SignalData element in SignalDataList) {
        output.WriteMessage(11, element);
      }
      if (HasSystemParameterData) {
        output.WriteMessage(12, SystemParameterData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (HasDraftOrder) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, DraftOrder);
        }
        if (HasOrder) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Order);
        }
        if (HasExecutionReportData) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, ExecutionReportData);
        }
        if (HasFixEngineData) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, FixEngineData);
        }
        foreach (global::quantmodel.InstrumentData element in InstrumentDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::quantmodel.AccountData element in AccountDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::quantmodel.InvestmentSystemData element in InvestmentSystemDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        foreach (global::quantmodel.SignalData element in SignalDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        if (HasSystemParameterData) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, SystemParameterData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DealingEngineRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DealingEngineRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DealingEngineRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DealingEngineRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DealingEngineRequest result = new DealingEngineRequest();
      
      protected override DealingEngineRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DealingEngineRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DealingEngineRequest.Descriptor; }
      }
      
      public override DealingEngineRequest DefaultInstanceForType {
        get { return global::quantmodel.DealingEngineRequest.DefaultInstance; }
      }
      
      public override DealingEngineRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.instrumentData_.MakeReadOnly();
        result.accountData_.MakeReadOnly();
        result.investmentSystemData_.MakeReadOnly();
        result.signalData_.MakeReadOnly();
        DealingEngineRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DealingEngineRequest) {
          return MergeFrom((DealingEngineRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DealingEngineRequest other) {
        if (other == global::quantmodel.DealingEngineRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDraftOrder) {
          MergeDraftOrder(other.DraftOrder);
        }
        if (other.HasOrder) {
          MergeOrder(other.Order);
        }
        if (other.HasExecutionReportData) {
          MergeExecutionReportData(other.ExecutionReportData);
        }
        if (other.HasFixEngineData) {
          MergeFixEngineData(other.FixEngineData);
        }
        if (other.instrumentData_.Count != 0) {
          base.AddRange(other.instrumentData_, result.instrumentData_);
        }
        if (other.accountData_.Count != 0) {
          base.AddRange(other.accountData_, result.accountData_);
        }
        if (other.investmentSystemData_.Count != 0) {
          base.AddRange(other.investmentSystemData_, result.investmentSystemData_);
        }
        if (other.signalData_.Count != 0) {
          base.AddRange(other.signalData_, result.signalData_);
        }
        if (other.HasSystemParameterData) {
          MergeSystemParameterData(other.SystemParameterData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DealingEngineRequest.Types.RequestType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.DealingEngineRequest.Types.RequestType) rawValue;
              }
              break;
            }
            case 34: {
              global::quantmodel.DraftOrderMessage.Builder subBuilder = global::quantmodel.DraftOrderMessage.CreateBuilder();
              if (HasDraftOrder) {
                subBuilder.MergeFrom(DraftOrder);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DraftOrder = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::quantmodel.OrderMessage.Builder subBuilder = global::quantmodel.OrderMessage.CreateBuilder();
              if (HasOrder) {
                subBuilder.MergeFrom(Order);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Order = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::quantmodel.ExecutionReportData.Builder subBuilder = global::quantmodel.ExecutionReportData.CreateBuilder();
              if (HasExecutionReportData) {
                subBuilder.MergeFrom(ExecutionReportData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExecutionReportData = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::quantmodel.FixEngineData.Builder subBuilder = global::quantmodel.FixEngineData.CreateBuilder();
              if (HasFixEngineData) {
                subBuilder.MergeFrom(FixEngineData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FixEngineData = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::quantmodel.InstrumentData.Builder subBuilder = global::quantmodel.InstrumentData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddInstrumentData(subBuilder.BuildPartial());
              break;
            }
            case 74: {
              global::quantmodel.AccountData.Builder subBuilder = global::quantmodel.AccountData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAccountData(subBuilder.BuildPartial());
              break;
            }
            case 82: {
              global::quantmodel.InvestmentSystemData.Builder subBuilder = global::quantmodel.InvestmentSystemData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddInvestmentSystemData(subBuilder.BuildPartial());
              break;
            }
            case 90: {
              global::quantmodel.SignalData.Builder subBuilder = global::quantmodel.SignalData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSignalData(subBuilder.BuildPartial());
              break;
            }
            case 98: {
              global::quantmodel.SystemParameterData.Builder subBuilder = global::quantmodel.SystemParameterData.CreateBuilder();
              if (HasSystemParameterData) {
                subBuilder.MergeFrom(SystemParameterData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SystemParameterData = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.DealingEngineRequest.Types.RequestType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.DealingEngineRequest.Types.RequestType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.DealingEngineRequest.Types.RequestType.EXECUTE_SIGNAL;
        return this;
      }
      
      public bool HasDraftOrder {
       get { return result.HasDraftOrder; }
      }
      public global::quantmodel.DraftOrderMessage DraftOrder {
        get { return result.DraftOrder; }
        set { SetDraftOrder(value); }
      }
      public Builder SetDraftOrder(global::quantmodel.DraftOrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDraftOrder = true;
        result.draftOrder_ = value;
        return this;
      }
      public Builder SetDraftOrder(global::quantmodel.DraftOrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDraftOrder = true;
        result.draftOrder_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDraftOrder(global::quantmodel.DraftOrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDraftOrder &&
            result.draftOrder_ != global::quantmodel.DraftOrderMessage.DefaultInstance) {
            result.draftOrder_ = global::quantmodel.DraftOrderMessage.CreateBuilder(result.draftOrder_).MergeFrom(value).BuildPartial();
        } else {
          result.draftOrder_ = value;
        }
        result.hasDraftOrder = true;
        return this;
      }
      public Builder ClearDraftOrder() {
        result.hasDraftOrder = false;
        result.draftOrder_ = global::quantmodel.DraftOrderMessage.DefaultInstance;
        return this;
      }
      
      public bool HasOrder {
       get { return result.HasOrder; }
      }
      public global::quantmodel.OrderMessage Order {
        get { return result.Order; }
        set { SetOrder(value); }
      }
      public Builder SetOrder(global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOrder = true;
        result.order_ = value;
        return this;
      }
      public Builder SetOrder(global::quantmodel.OrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOrder = true;
        result.order_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrder(global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOrder &&
            result.order_ != global::quantmodel.OrderMessage.DefaultInstance) {
            result.order_ = global::quantmodel.OrderMessage.CreateBuilder(result.order_).MergeFrom(value).BuildPartial();
        } else {
          result.order_ = value;
        }
        result.hasOrder = true;
        return this;
      }
      public Builder ClearOrder() {
        result.hasOrder = false;
        result.order_ = global::quantmodel.OrderMessage.DefaultInstance;
        return this;
      }
      
      public bool HasExecutionReportData {
       get { return result.HasExecutionReportData; }
      }
      public global::quantmodel.ExecutionReportData ExecutionReportData {
        get { return result.ExecutionReportData; }
        set { SetExecutionReportData(value); }
      }
      public Builder SetExecutionReportData(global::quantmodel.ExecutionReportData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExecutionReportData = true;
        result.executionReportData_ = value;
        return this;
      }
      public Builder SetExecutionReportData(global::quantmodel.ExecutionReportData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasExecutionReportData = true;
        result.executionReportData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExecutionReportData(global::quantmodel.ExecutionReportData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasExecutionReportData &&
            result.executionReportData_ != global::quantmodel.ExecutionReportData.DefaultInstance) {
            result.executionReportData_ = global::quantmodel.ExecutionReportData.CreateBuilder(result.executionReportData_).MergeFrom(value).BuildPartial();
        } else {
          result.executionReportData_ = value;
        }
        result.hasExecutionReportData = true;
        return this;
      }
      public Builder ClearExecutionReportData() {
        result.hasExecutionReportData = false;
        result.executionReportData_ = global::quantmodel.ExecutionReportData.DefaultInstance;
        return this;
      }
      
      public bool HasFixEngineData {
       get { return result.HasFixEngineData; }
      }
      public global::quantmodel.FixEngineData FixEngineData {
        get { return result.FixEngineData; }
        set { SetFixEngineData(value); }
      }
      public Builder SetFixEngineData(global::quantmodel.FixEngineData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFixEngineData = true;
        result.fixEngineData_ = value;
        return this;
      }
      public Builder SetFixEngineData(global::quantmodel.FixEngineData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasFixEngineData = true;
        result.fixEngineData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFixEngineData(global::quantmodel.FixEngineData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasFixEngineData &&
            result.fixEngineData_ != global::quantmodel.FixEngineData.DefaultInstance) {
            result.fixEngineData_ = global::quantmodel.FixEngineData.CreateBuilder(result.fixEngineData_).MergeFrom(value).BuildPartial();
        } else {
          result.fixEngineData_ = value;
        }
        result.hasFixEngineData = true;
        return this;
      }
      public Builder ClearFixEngineData() {
        result.hasFixEngineData = false;
        result.fixEngineData_ = global::quantmodel.FixEngineData.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.InstrumentData> InstrumentDataList {
        get { return result.instrumentData_; }
      }
      public int InstrumentDataCount {
        get { return result.InstrumentDataCount; }
      }
      public global::quantmodel.InstrumentData GetInstrumentData(int index) {
        return result.GetInstrumentData(index);
      }
      public Builder SetInstrumentData(int index, global::quantmodel.InstrumentData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.instrumentData_[index] = value;
        return this;
      }
      public Builder SetInstrumentData(int index, global::quantmodel.InstrumentData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.instrumentData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInstrumentData(global::quantmodel.InstrumentData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.instrumentData_.Add(value);
        return this;
      }
      public Builder AddInstrumentData(global::quantmodel.InstrumentData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.instrumentData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInstrumentData(scg::IEnumerable<global::quantmodel.InstrumentData> values) {
        base.AddRange(values, result.instrumentData_);
        return this;
      }
      public Builder ClearInstrumentData() {
        result.instrumentData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.AccountData> AccountDataList {
        get { return result.accountData_; }
      }
      public int AccountDataCount {
        get { return result.AccountDataCount; }
      }
      public global::quantmodel.AccountData GetAccountData(int index) {
        return result.GetAccountData(index);
      }
      public Builder SetAccountData(int index, global::quantmodel.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.accountData_[index] = value;
        return this;
      }
      public Builder SetAccountData(int index, global::quantmodel.AccountData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.accountData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAccountData(global::quantmodel.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.accountData_.Add(value);
        return this;
      }
      public Builder AddAccountData(global::quantmodel.AccountData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.accountData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAccountData(scg::IEnumerable<global::quantmodel.AccountData> values) {
        base.AddRange(values, result.accountData_);
        return this;
      }
      public Builder ClearAccountData() {
        result.accountData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.InvestmentSystemData> InvestmentSystemDataList {
        get { return result.investmentSystemData_; }
      }
      public int InvestmentSystemDataCount {
        get { return result.InvestmentSystemDataCount; }
      }
      public global::quantmodel.InvestmentSystemData GetInvestmentSystemData(int index) {
        return result.GetInvestmentSystemData(index);
      }
      public Builder SetInvestmentSystemData(int index, global::quantmodel.InvestmentSystemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.investmentSystemData_[index] = value;
        return this;
      }
      public Builder SetInvestmentSystemData(int index, global::quantmodel.InvestmentSystemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.investmentSystemData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInvestmentSystemData(global::quantmodel.InvestmentSystemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.investmentSystemData_.Add(value);
        return this;
      }
      public Builder AddInvestmentSystemData(global::quantmodel.InvestmentSystemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.investmentSystemData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInvestmentSystemData(scg::IEnumerable<global::quantmodel.InvestmentSystemData> values) {
        base.AddRange(values, result.investmentSystemData_);
        return this;
      }
      public Builder ClearInvestmentSystemData() {
        result.investmentSystemData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.SignalData> SignalDataList {
        get { return result.signalData_; }
      }
      public int SignalDataCount {
        get { return result.SignalDataCount; }
      }
      public global::quantmodel.SignalData GetSignalData(int index) {
        return result.GetSignalData(index);
      }
      public Builder SetSignalData(int index, global::quantmodel.SignalData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.signalData_[index] = value;
        return this;
      }
      public Builder SetSignalData(int index, global::quantmodel.SignalData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.signalData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSignalData(global::quantmodel.SignalData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.signalData_.Add(value);
        return this;
      }
      public Builder AddSignalData(global::quantmodel.SignalData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.signalData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSignalData(scg::IEnumerable<global::quantmodel.SignalData> values) {
        base.AddRange(values, result.signalData_);
        return this;
      }
      public Builder ClearSignalData() {
        result.signalData_.Clear();
        return this;
      }
      
      public bool HasSystemParameterData {
       get { return result.HasSystemParameterData; }
      }
      public global::quantmodel.SystemParameterData SystemParameterData {
        get { return result.SystemParameterData; }
        set { SetSystemParameterData(value); }
      }
      public Builder SetSystemParameterData(global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSystemParameterData = true;
        result.systemParameterData_ = value;
        return this;
      }
      public Builder SetSystemParameterData(global::quantmodel.SystemParameterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSystemParameterData = true;
        result.systemParameterData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSystemParameterData(global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSystemParameterData &&
            result.systemParameterData_ != global::quantmodel.SystemParameterData.DefaultInstance) {
            result.systemParameterData_ = global::quantmodel.SystemParameterData.CreateBuilder(result.systemParameterData_).MergeFrom(value).BuildPartial();
        } else {
          result.systemParameterData_ = value;
        }
        result.hasSystemParameterData = true;
        return this;
      }
      public Builder ClearSystemParameterData() {
        result.hasSystemParameterData = false;
        result.systemParameterData_ = global::quantmodel.SystemParameterData.DefaultInstance;
        return this;
      }
    }
    static DealingEngineRequest() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DealingEngineResponse : pb::GeneratedMessage<DealingEngineResponse, DealingEngineResponse.Builder> {
    private static readonly DealingEngineResponse defaultInstance = new Builder().BuildPartial();
    public static DealingEngineResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DealingEngineResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DealingEngineResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DealingEngineResponse, DealingEngineResponse.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ResponseType {
        ACKNOWLEDGEMENT = 1,
        REJECT = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::quantmodel.DealingEngineResponse.Types.ResponseType type_ = global::quantmodel.DealingEngineResponse.Types.ResponseType.ACKNOWLEDGEMENT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.DealingEngineResponse.Types.ResponseType Type {
      get { return type_; }
    }
    
    public const int ErrorMsgFieldNumber = 5;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public const int DraftOrderFieldNumber = 6;
    private pbc::PopsicleList<global::quantmodel.DraftOrderMessage> draftOrder_ = new pbc::PopsicleList<global::quantmodel.DraftOrderMessage>();
    public scg::IList<global::quantmodel.DraftOrderMessage> DraftOrderList {
      get { return draftOrder_; }
    }
    public int DraftOrderCount {
      get { return draftOrder_.Count; }
    }
    public global::quantmodel.DraftOrderMessage GetDraftOrder(int index) {
      return draftOrder_[index];
    }
    
    public const int OrderFieldNumber = 7;
    private pbc::PopsicleList<global::quantmodel.OrderMessage> order_ = new pbc::PopsicleList<global::quantmodel.OrderMessage>();
    public scg::IList<global::quantmodel.OrderMessage> OrderList {
      get { return order_; }
    }
    public int OrderCount {
      get { return order_.Count; }
    }
    public global::quantmodel.OrderMessage GetOrder(int index) {
      return order_[index];
    }
    
    public const int PositionFieldNumber = 8;
    private pbc::PopsicleList<global::quantmodel.PositionOvernightData> position_ = new pbc::PopsicleList<global::quantmodel.PositionOvernightData>();
    public scg::IList<global::quantmodel.PositionOvernightData> PositionList {
      get { return position_; }
    }
    public int PositionCount {
      get { return position_.Count; }
    }
    public global::quantmodel.PositionOvernightData GetPosition(int index) {
      return position_[index];
    }
    
    public const int SystemParameterFieldNumber = 9;
    private pbc::PopsicleList<global::quantmodel.SystemParameterData> systemParameter_ = new pbc::PopsicleList<global::quantmodel.SystemParameterData>();
    public scg::IList<global::quantmodel.SystemParameterData> SystemParameterList {
      get { return systemParameter_; }
    }
    public int SystemParameterCount {
      get { return systemParameter_.Count; }
    }
    public global::quantmodel.SystemParameterData GetSystemParameter(int index) {
      return systemParameter_[index];
    }
    
    public const int AccountLimitFieldNumber = 10;
    private bool hasAccountLimit;
    private global::quantmodel.AccountLimitData accountLimit_ = global::quantmodel.AccountLimitData.DefaultInstance;
    public bool HasAccountLimit {
      get { return hasAccountLimit; }
    }
    public global::quantmodel.AccountLimitData AccountLimit {
      get { return accountLimit_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasErrorMsg) {
        output.WriteString(5, ErrorMsg);
      }
      foreach (global::quantmodel.DraftOrderMessage element in DraftOrderList) {
        output.WriteMessage(6, element);
      }
      foreach (global::quantmodel.OrderMessage element in OrderList) {
        output.WriteMessage(7, element);
      }
      foreach (global::quantmodel.PositionOvernightData element in PositionList) {
        output.WriteMessage(8, element);
      }
      foreach (global::quantmodel.SystemParameterData element in SystemParameterList) {
        output.WriteMessage(9, element);
      }
      if (HasAccountLimit) {
        output.WriteMessage(10, AccountLimit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasErrorMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ErrorMsg);
        }
        foreach (global::quantmodel.DraftOrderMessage element in DraftOrderList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::quantmodel.OrderMessage element in OrderList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::quantmodel.PositionOvernightData element in PositionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::quantmodel.SystemParameterData element in SystemParameterList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        if (HasAccountLimit) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, AccountLimit);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DealingEngineResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DealingEngineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DealingEngineResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DealingEngineResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DealingEngineResponse result = new DealingEngineResponse();
      
      protected override DealingEngineResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DealingEngineResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DealingEngineResponse.Descriptor; }
      }
      
      public override DealingEngineResponse DefaultInstanceForType {
        get { return global::quantmodel.DealingEngineResponse.DefaultInstance; }
      }
      
      public override DealingEngineResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.draftOrder_.MakeReadOnly();
        result.order_.MakeReadOnly();
        result.position_.MakeReadOnly();
        result.systemParameter_.MakeReadOnly();
        DealingEngineResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DealingEngineResponse) {
          return MergeFrom((DealingEngineResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DealingEngineResponse other) {
        if (other == global::quantmodel.DealingEngineResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        if (other.draftOrder_.Count != 0) {
          base.AddRange(other.draftOrder_, result.draftOrder_);
        }
        if (other.order_.Count != 0) {
          base.AddRange(other.order_, result.order_);
        }
        if (other.position_.Count != 0) {
          base.AddRange(other.position_, result.position_);
        }
        if (other.systemParameter_.Count != 0) {
          base.AddRange(other.systemParameter_, result.systemParameter_);
        }
        if (other.HasAccountLimit) {
          MergeAccountLimit(other.AccountLimit);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DealingEngineResponse.Types.ResponseType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.DealingEngineResponse.Types.ResponseType) rawValue;
              }
              break;
            }
            case 42: {
              ErrorMsg = input.ReadString();
              break;
            }
            case 50: {
              global::quantmodel.DraftOrderMessage.Builder subBuilder = global::quantmodel.DraftOrderMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddDraftOrder(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              global::quantmodel.OrderMessage.Builder subBuilder = global::quantmodel.OrderMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddOrder(subBuilder.BuildPartial());
              break;
            }
            case 66: {
              global::quantmodel.PositionOvernightData.Builder subBuilder = global::quantmodel.PositionOvernightData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPosition(subBuilder.BuildPartial());
              break;
            }
            case 74: {
              global::quantmodel.SystemParameterData.Builder subBuilder = global::quantmodel.SystemParameterData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSystemParameter(subBuilder.BuildPartial());
              break;
            }
            case 82: {
              global::quantmodel.AccountLimitData.Builder subBuilder = global::quantmodel.AccountLimitData.CreateBuilder();
              if (HasAccountLimit) {
                subBuilder.MergeFrom(AccountLimit);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountLimit = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.DealingEngineResponse.Types.ResponseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.DealingEngineResponse.Types.ResponseType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.DealingEngineResponse.Types.ResponseType.ACKNOWLEDGEMENT;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.HasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.DraftOrderMessage> DraftOrderList {
        get { return result.draftOrder_; }
      }
      public int DraftOrderCount {
        get { return result.DraftOrderCount; }
      }
      public global::quantmodel.DraftOrderMessage GetDraftOrder(int index) {
        return result.GetDraftOrder(index);
      }
      public Builder SetDraftOrder(int index, global::quantmodel.DraftOrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.draftOrder_[index] = value;
        return this;
      }
      public Builder SetDraftOrder(int index, global::quantmodel.DraftOrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.draftOrder_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDraftOrder(global::quantmodel.DraftOrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.draftOrder_.Add(value);
        return this;
      }
      public Builder AddDraftOrder(global::quantmodel.DraftOrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.draftOrder_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDraftOrder(scg::IEnumerable<global::quantmodel.DraftOrderMessage> values) {
        base.AddRange(values, result.draftOrder_);
        return this;
      }
      public Builder ClearDraftOrder() {
        result.draftOrder_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.OrderMessage> OrderList {
        get { return result.order_; }
      }
      public int OrderCount {
        get { return result.OrderCount; }
      }
      public global::quantmodel.OrderMessage GetOrder(int index) {
        return result.GetOrder(index);
      }
      public Builder SetOrder(int index, global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.order_[index] = value;
        return this;
      }
      public Builder SetOrder(int index, global::quantmodel.OrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.order_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOrder(global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.order_.Add(value);
        return this;
      }
      public Builder AddOrder(global::quantmodel.OrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.order_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOrder(scg::IEnumerable<global::quantmodel.OrderMessage> values) {
        base.AddRange(values, result.order_);
        return this;
      }
      public Builder ClearOrder() {
        result.order_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.PositionOvernightData> PositionList {
        get { return result.position_; }
      }
      public int PositionCount {
        get { return result.PositionCount; }
      }
      public global::quantmodel.PositionOvernightData GetPosition(int index) {
        return result.GetPosition(index);
      }
      public Builder SetPosition(int index, global::quantmodel.PositionOvernightData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.position_[index] = value;
        return this;
      }
      public Builder SetPosition(int index, global::quantmodel.PositionOvernightData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.position_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPosition(global::quantmodel.PositionOvernightData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.position_.Add(value);
        return this;
      }
      public Builder AddPosition(global::quantmodel.PositionOvernightData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.position_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePosition(scg::IEnumerable<global::quantmodel.PositionOvernightData> values) {
        base.AddRange(values, result.position_);
        return this;
      }
      public Builder ClearPosition() {
        result.position_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.SystemParameterData> SystemParameterList {
        get { return result.systemParameter_; }
      }
      public int SystemParameterCount {
        get { return result.SystemParameterCount; }
      }
      public global::quantmodel.SystemParameterData GetSystemParameter(int index) {
        return result.GetSystemParameter(index);
      }
      public Builder SetSystemParameter(int index, global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.systemParameter_[index] = value;
        return this;
      }
      public Builder SetSystemParameter(int index, global::quantmodel.SystemParameterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.systemParameter_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSystemParameter(global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.systemParameter_.Add(value);
        return this;
      }
      public Builder AddSystemParameter(global::quantmodel.SystemParameterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.systemParameter_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSystemParameter(scg::IEnumerable<global::quantmodel.SystemParameterData> values) {
        base.AddRange(values, result.systemParameter_);
        return this;
      }
      public Builder ClearSystemParameter() {
        result.systemParameter_.Clear();
        return this;
      }
      
      public bool HasAccountLimit {
       get { return result.HasAccountLimit; }
      }
      public global::quantmodel.AccountLimitData AccountLimit {
        get { return result.AccountLimit; }
        set { SetAccountLimit(value); }
      }
      public Builder SetAccountLimit(global::quantmodel.AccountLimitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountLimit = true;
        result.accountLimit_ = value;
        return this;
      }
      public Builder SetAccountLimit(global::quantmodel.AccountLimitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAccountLimit = true;
        result.accountLimit_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountLimit(global::quantmodel.AccountLimitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAccountLimit &&
            result.accountLimit_ != global::quantmodel.AccountLimitData.DefaultInstance) {
            result.accountLimit_ = global::quantmodel.AccountLimitData.CreateBuilder(result.accountLimit_).MergeFrom(value).BuildPartial();
        } else {
          result.accountLimit_ = value;
        }
        result.hasAccountLimit = true;
        return this;
      }
      public Builder ClearAccountLimit() {
        result.hasAccountLimit = false;
        result.accountLimit_ = global::quantmodel.AccountLimitData.DefaultInstance;
        return this;
      }
    }
    static DealingEngineResponse() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class DealingEngineBroadcast : pb::GeneratedMessage<DealingEngineBroadcast, DealingEngineBroadcast.Builder> {
    private static readonly DealingEngineBroadcast defaultInstance = new Builder().BuildPartial();
    public static DealingEngineBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DealingEngineBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DealingEngineBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DealingEngineBroadcast, DealingEngineBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_DealingEngineBroadcast__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum BroadcastType {
        EXECUTE_SIGNAL = 1,
        EXECUTE_DRAFT_ORDER = 2,
        CREATE_DRAFT_ORDER = 3,
        CREATE_ORDER = 4,
        UPDATE_ORDER = 5,
        CANCEL_ORDER = 6,
        RELEASE_ORDER = 7,
        CREATE_RELEASE = 8,
        VALIDATE_RELEASE = 9,
        CANCEL_RELEASE = 10,
        REPLACE_RELEASE = 11,
        RELEASE_REJECTED = 12,
        CANCEL_REJECTED = 13,
        RELEASE_RESTATED = 14,
        RELEASE_CANCELED = 15,
        RELEASE_REPLACED = 16,
        CREATE_EXECUTION = 17,
        EXECUTION_CANCELED = 18,
        BROADCAST_DATA = 19,
        ACTIVE_SET = 20,
        QUERY_ORDER = 21,
        QUERY_RELEASE = 22,
        QUERY_EXECUTION = 23,
        ROLLOVER = 24,
        CURRENT_STATUS = 25,
        UPDATE_STATUS = 26,
        MARKETDATA_SUBSCRIBE = 27,
        MARKETDATA_UNSUBSCRIBE = 28,
        FIXENGINE_LOGIN = 29,
        FIXENGINE_LOGOUT = 30,
        LOGOUT_FIXENGINE = 31,
        LOGIN_FIXENGINE = 32,
        RELOAD_STATIC_DATA = 33,
        SHUTDOWN = 34,
      }
      
    }
    #endregion
    
    public const int BroadcastIdFieldNumber = 1;
    private bool hasBroadcastId;
    private string broadcastId_ = "";
    public bool HasBroadcastId {
      get { return hasBroadcastId; }
    }
    public string BroadcastId {
      get { return broadcastId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::quantmodel.DealingEngineBroadcast.Types.BroadcastType type_ = global::quantmodel.DealingEngineBroadcast.Types.BroadcastType.EXECUTE_SIGNAL;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.DealingEngineBroadcast.Types.BroadcastType Type {
      get { return type_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int OrderFieldNumber = 4;
    private pbc::PopsicleList<global::quantmodel.OrderMessage> order_ = new pbc::PopsicleList<global::quantmodel.OrderMessage>();
    public scg::IList<global::quantmodel.OrderMessage> OrderList {
      get { return order_; }
    }
    public int OrderCount {
      get { return order_.Count; }
    }
    public global::quantmodel.OrderMessage GetOrder(int index) {
      return order_[index];
    }
    
    public const int FixEngineDataFieldNumber = 5;
    private pbc::PopsicleList<global::quantmodel.FixEngineData> fixEngineData_ = new pbc::PopsicleList<global::quantmodel.FixEngineData>();
    public scg::IList<global::quantmodel.FixEngineData> FixEngineDataList {
      get { return fixEngineData_; }
    }
    public int FixEngineDataCount {
      get { return fixEngineData_.Count; }
    }
    public global::quantmodel.FixEngineData GetFixEngineData(int index) {
      return fixEngineData_[index];
    }
    
    public const int PositionFieldNumber = 6;
    private pbc::PopsicleList<global::quantmodel.PositionOvernightData> position_ = new pbc::PopsicleList<global::quantmodel.PositionOvernightData>();
    public scg::IList<global::quantmodel.PositionOvernightData> PositionList {
      get { return position_; }
    }
    public int PositionCount {
      get { return position_.Count; }
    }
    public global::quantmodel.PositionOvernightData GetPosition(int index) {
      return position_[index];
    }
    
    public const int SystemParameterFieldNumber = 7;
    private pbc::PopsicleList<global::quantmodel.SystemParameterData> systemParameter_ = new pbc::PopsicleList<global::quantmodel.SystemParameterData>();
    public scg::IList<global::quantmodel.SystemParameterData> SystemParameterList {
      get { return systemParameter_; }
    }
    public int SystemParameterCount {
      get { return systemParameter_.Count; }
    }
    public global::quantmodel.SystemParameterData GetSystemParameter(int index) {
      return systemParameter_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBroadcastId) {
        output.WriteString(1, BroadcastId);
      }
      if (HasType) {
        output.WriteEnum(2, (int) Type);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      foreach (global::quantmodel.OrderMessage element in OrderList) {
        output.WriteMessage(4, element);
      }
      foreach (global::quantmodel.FixEngineData element in FixEngineDataList) {
        output.WriteMessage(5, element);
      }
      foreach (global::quantmodel.PositionOvernightData element in PositionList) {
        output.WriteMessage(6, element);
      }
      foreach (global::quantmodel.SystemParameterData element in SystemParameterList) {
        output.WriteMessage(7, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBroadcastId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BroadcastId);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        foreach (global::quantmodel.OrderMessage element in OrderList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::quantmodel.FixEngineData element in FixEngineDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::quantmodel.PositionOvernightData element in PositionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::quantmodel.SystemParameterData element in SystemParameterList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DealingEngineBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DealingEngineBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DealingEngineBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DealingEngineBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DealingEngineBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DealingEngineBroadcast result = new DealingEngineBroadcast();
      
      protected override DealingEngineBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DealingEngineBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.DealingEngineBroadcast.Descriptor; }
      }
      
      public override DealingEngineBroadcast DefaultInstanceForType {
        get { return global::quantmodel.DealingEngineBroadcast.DefaultInstance; }
      }
      
      public override DealingEngineBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.order_.MakeReadOnly();
        result.fixEngineData_.MakeReadOnly();
        result.position_.MakeReadOnly();
        result.systemParameter_.MakeReadOnly();
        DealingEngineBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DealingEngineBroadcast) {
          return MergeFrom((DealingEngineBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DealingEngineBroadcast other) {
        if (other == global::quantmodel.DealingEngineBroadcast.DefaultInstance) return this;
        if (other.HasBroadcastId) {
          BroadcastId = other.BroadcastId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.order_.Count != 0) {
          base.AddRange(other.order_, result.order_);
        }
        if (other.fixEngineData_.Count != 0) {
          base.AddRange(other.fixEngineData_, result.fixEngineData_);
        }
        if (other.position_.Count != 0) {
          base.AddRange(other.position_, result.position_);
        }
        if (other.systemParameter_.Count != 0) {
          base.AddRange(other.systemParameter_, result.systemParameter_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              BroadcastId = input.ReadString();
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.DealingEngineBroadcast.Types.BroadcastType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.DealingEngineBroadcast.Types.BroadcastType) rawValue;
              }
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 34: {
              global::quantmodel.OrderMessage.Builder subBuilder = global::quantmodel.OrderMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddOrder(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::quantmodel.FixEngineData.Builder subBuilder = global::quantmodel.FixEngineData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddFixEngineData(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::quantmodel.PositionOvernightData.Builder subBuilder = global::quantmodel.PositionOvernightData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPosition(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              global::quantmodel.SystemParameterData.Builder subBuilder = global::quantmodel.SystemParameterData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSystemParameter(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasBroadcastId {
        get { return result.HasBroadcastId; }
      }
      public string BroadcastId {
        get { return result.BroadcastId; }
        set { SetBroadcastId(value); }
      }
      public Builder SetBroadcastId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBroadcastId = true;
        result.broadcastId_ = value;
        return this;
      }
      public Builder ClearBroadcastId() {
        result.hasBroadcastId = false;
        result.broadcastId_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.DealingEngineBroadcast.Types.BroadcastType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.DealingEngineBroadcast.Types.BroadcastType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.DealingEngineBroadcast.Types.BroadcastType.EXECUTE_SIGNAL;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.OrderMessage> OrderList {
        get { return result.order_; }
      }
      public int OrderCount {
        get { return result.OrderCount; }
      }
      public global::quantmodel.OrderMessage GetOrder(int index) {
        return result.GetOrder(index);
      }
      public Builder SetOrder(int index, global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.order_[index] = value;
        return this;
      }
      public Builder SetOrder(int index, global::quantmodel.OrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.order_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOrder(global::quantmodel.OrderMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.order_.Add(value);
        return this;
      }
      public Builder AddOrder(global::quantmodel.OrderMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.order_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOrder(scg::IEnumerable<global::quantmodel.OrderMessage> values) {
        base.AddRange(values, result.order_);
        return this;
      }
      public Builder ClearOrder() {
        result.order_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.FixEngineData> FixEngineDataList {
        get { return result.fixEngineData_; }
      }
      public int FixEngineDataCount {
        get { return result.FixEngineDataCount; }
      }
      public global::quantmodel.FixEngineData GetFixEngineData(int index) {
        return result.GetFixEngineData(index);
      }
      public Builder SetFixEngineData(int index, global::quantmodel.FixEngineData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fixEngineData_[index] = value;
        return this;
      }
      public Builder SetFixEngineData(int index, global::quantmodel.FixEngineData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fixEngineData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFixEngineData(global::quantmodel.FixEngineData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fixEngineData_.Add(value);
        return this;
      }
      public Builder AddFixEngineData(global::quantmodel.FixEngineData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fixEngineData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFixEngineData(scg::IEnumerable<global::quantmodel.FixEngineData> values) {
        base.AddRange(values, result.fixEngineData_);
        return this;
      }
      public Builder ClearFixEngineData() {
        result.fixEngineData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.PositionOvernightData> PositionList {
        get { return result.position_; }
      }
      public int PositionCount {
        get { return result.PositionCount; }
      }
      public global::quantmodel.PositionOvernightData GetPosition(int index) {
        return result.GetPosition(index);
      }
      public Builder SetPosition(int index, global::quantmodel.PositionOvernightData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.position_[index] = value;
        return this;
      }
      public Builder SetPosition(int index, global::quantmodel.PositionOvernightData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.position_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPosition(global::quantmodel.PositionOvernightData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.position_.Add(value);
        return this;
      }
      public Builder AddPosition(global::quantmodel.PositionOvernightData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.position_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePosition(scg::IEnumerable<global::quantmodel.PositionOvernightData> values) {
        base.AddRange(values, result.position_);
        return this;
      }
      public Builder ClearPosition() {
        result.position_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::quantmodel.SystemParameterData> SystemParameterList {
        get { return result.systemParameter_; }
      }
      public int SystemParameterCount {
        get { return result.SystemParameterCount; }
      }
      public global::quantmodel.SystemParameterData GetSystemParameter(int index) {
        return result.GetSystemParameter(index);
      }
      public Builder SetSystemParameter(int index, global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.systemParameter_[index] = value;
        return this;
      }
      public Builder SetSystemParameter(int index, global::quantmodel.SystemParameterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.systemParameter_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSystemParameter(global::quantmodel.SystemParameterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.systemParameter_.Add(value);
        return this;
      }
      public Builder AddSystemParameter(global::quantmodel.SystemParameterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.systemParameter_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSystemParameter(scg::IEnumerable<global::quantmodel.SystemParameterData> values) {
        base.AddRange(values, result.systemParameter_);
        return this;
      }
      public Builder ClearSystemParameter() {
        result.systemParameter_.Clear();
        return this;
      }
    }
    static DealingEngineBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class FixEngineRequest : pb::GeneratedMessage<FixEngineRequest, FixEngineRequest.Builder> {
    private static readonly FixEngineRequest defaultInstance = new Builder().BuildPartial();
    public static FixEngineRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FixEngineRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FixEngineRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FixEngineRequest, FixEngineRequest.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum RequestType {
        CREATE_RELEASE = 1,
        CANCEL_RELEASE = 2,
        REPLACE_RELEASE = 3,
        DEFINE_SECURITY = 4,
        MARKETDATA_SUBSCRIBE = 5,
        FIXENGINE_LOGOUT = 6,
        FIXENGINE_LOGIN = 7,
        SEQUENCE_RESET = 8,
        RESEND_REQUEST = 9,
        TEST_REQUEST = 10,
        SHUTDOWN = 11,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::quantmodel.FixEngineRequest.Types.RequestType type_ = global::quantmodel.FixEngineRequest.Types.RequestType.CREATE_RELEASE;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.FixEngineRequest.Types.RequestType Type {
      get { return type_; }
    }
    
    public const int SessionIdFieldNumber = 4;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int ReleaseDataFieldNumber = 5;
    private bool hasReleaseData;
    private global::quantmodel.ReleaseData releaseData_ = global::quantmodel.ReleaseData.DefaultInstance;
    public bool HasReleaseData {
      get { return hasReleaseData; }
    }
    public global::quantmodel.ReleaseData ReleaseData {
      get { return releaseData_; }
    }
    
    public const int InstrumentDataFieldNumber = 6;
    private bool hasInstrumentData;
    private global::quantmodel.InstrumentData instrumentData_ = global::quantmodel.InstrumentData.DefaultInstance;
    public bool HasInstrumentData {
      get { return hasInstrumentData; }
    }
    public global::quantmodel.InstrumentData InstrumentData {
      get { return instrumentData_; }
    }
    
    public const int AccountDataFieldNumber = 7;
    private bool hasAccountData;
    private global::quantmodel.AccountData accountData_ = global::quantmodel.AccountData.DefaultInstance;
    public bool HasAccountData {
      get { return hasAccountData; }
    }
    public global::quantmodel.AccountData AccountData {
      get { return accountData_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      if (HasSessionId) {
        output.WriteString(4, SessionId);
      }
      if (HasReleaseData) {
        output.WriteMessage(5, ReleaseData);
      }
      if (HasInstrumentData) {
        output.WriteMessage(6, InstrumentData);
      }
      if (HasAccountData) {
        output.WriteMessage(7, AccountData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SessionId);
        }
        if (HasReleaseData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ReleaseData);
        }
        if (HasInstrumentData) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, InstrumentData);
        }
        if (HasAccountData) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, AccountData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FixEngineRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FixEngineRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FixEngineRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FixEngineRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FixEngineRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FixEngineRequest result = new FixEngineRequest();
      
      protected override FixEngineRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FixEngineRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FixEngineRequest.Descriptor; }
      }
      
      public override FixEngineRequest DefaultInstanceForType {
        get { return global::quantmodel.FixEngineRequest.DefaultInstance; }
      }
      
      public override FixEngineRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        FixEngineRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FixEngineRequest) {
          return MergeFrom((FixEngineRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FixEngineRequest other) {
        if (other == global::quantmodel.FixEngineRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasReleaseData) {
          MergeReleaseData(other.ReleaseData);
        }
        if (other.HasInstrumentData) {
          MergeInstrumentData(other.InstrumentData);
        }
        if (other.HasAccountData) {
          MergeAccountData(other.AccountData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.FixEngineRequest.Types.RequestType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.FixEngineRequest.Types.RequestType) rawValue;
              }
              break;
            }
            case 34: {
              SessionId = input.ReadString();
              break;
            }
            case 42: {
              global::quantmodel.ReleaseData.Builder subBuilder = global::quantmodel.ReleaseData.CreateBuilder();
              if (HasReleaseData) {
                subBuilder.MergeFrom(ReleaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReleaseData = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::quantmodel.InstrumentData.Builder subBuilder = global::quantmodel.InstrumentData.CreateBuilder();
              if (HasInstrumentData) {
                subBuilder.MergeFrom(InstrumentData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InstrumentData = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::quantmodel.AccountData.Builder subBuilder = global::quantmodel.AccountData.CreateBuilder();
              if (HasAccountData) {
                subBuilder.MergeFrom(AccountData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountData = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.FixEngineRequest.Types.RequestType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.FixEngineRequest.Types.RequestType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.FixEngineRequest.Types.RequestType.CREATE_RELEASE;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasReleaseData {
       get { return result.HasReleaseData; }
      }
      public global::quantmodel.ReleaseData ReleaseData {
        get { return result.ReleaseData; }
        set { SetReleaseData(value); }
      }
      public Builder SetReleaseData(global::quantmodel.ReleaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReleaseData = true;
        result.releaseData_ = value;
        return this;
      }
      public Builder SetReleaseData(global::quantmodel.ReleaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReleaseData = true;
        result.releaseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReleaseData(global::quantmodel.ReleaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReleaseData &&
            result.releaseData_ != global::quantmodel.ReleaseData.DefaultInstance) {
            result.releaseData_ = global::quantmodel.ReleaseData.CreateBuilder(result.releaseData_).MergeFrom(value).BuildPartial();
        } else {
          result.releaseData_ = value;
        }
        result.hasReleaseData = true;
        return this;
      }
      public Builder ClearReleaseData() {
        result.hasReleaseData = false;
        result.releaseData_ = global::quantmodel.ReleaseData.DefaultInstance;
        return this;
      }
      
      public bool HasInstrumentData {
       get { return result.HasInstrumentData; }
      }
      public global::quantmodel.InstrumentData InstrumentData {
        get { return result.InstrumentData; }
        set { SetInstrumentData(value); }
      }
      public Builder SetInstrumentData(global::quantmodel.InstrumentData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstrumentData = true;
        result.instrumentData_ = value;
        return this;
      }
      public Builder SetInstrumentData(global::quantmodel.InstrumentData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasInstrumentData = true;
        result.instrumentData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInstrumentData(global::quantmodel.InstrumentData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasInstrumentData &&
            result.instrumentData_ != global::quantmodel.InstrumentData.DefaultInstance) {
            result.instrumentData_ = global::quantmodel.InstrumentData.CreateBuilder(result.instrumentData_).MergeFrom(value).BuildPartial();
        } else {
          result.instrumentData_ = value;
        }
        result.hasInstrumentData = true;
        return this;
      }
      public Builder ClearInstrumentData() {
        result.hasInstrumentData = false;
        result.instrumentData_ = global::quantmodel.InstrumentData.DefaultInstance;
        return this;
      }
      
      public bool HasAccountData {
       get { return result.HasAccountData; }
      }
      public global::quantmodel.AccountData AccountData {
        get { return result.AccountData; }
        set { SetAccountData(value); }
      }
      public Builder SetAccountData(global::quantmodel.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountData = true;
        result.accountData_ = value;
        return this;
      }
      public Builder SetAccountData(global::quantmodel.AccountData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAccountData = true;
        result.accountData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountData(global::quantmodel.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAccountData &&
            result.accountData_ != global::quantmodel.AccountData.DefaultInstance) {
            result.accountData_ = global::quantmodel.AccountData.CreateBuilder(result.accountData_).MergeFrom(value).BuildPartial();
        } else {
          result.accountData_ = value;
        }
        result.hasAccountData = true;
        return this;
      }
      public Builder ClearAccountData() {
        result.hasAccountData = false;
        result.accountData_ = global::quantmodel.AccountData.DefaultInstance;
        return this;
      }
    }
    static FixEngineRequest() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class FixEngineResponse : pb::GeneratedMessage<FixEngineResponse, FixEngineResponse.Builder> {
    private static readonly FixEngineResponse defaultInstance = new Builder().BuildPartial();
    public static FixEngineResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FixEngineResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FixEngineResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FixEngineResponse, FixEngineResponse.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_FixEngineResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ResponseType {
        ACKNOWLEDGEMENT = 1,
        REJECT = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::quantmodel.FixEngineResponse.Types.ResponseType type_ = global::quantmodel.FixEngineResponse.Types.ResponseType.ACKNOWLEDGEMENT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.FixEngineResponse.Types.ResponseType Type {
      get { return type_; }
    }
    
    public const int ErrorMsgFieldNumber = 5;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasErrorMsg) {
        output.WriteString(5, ErrorMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasErrorMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ErrorMsg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FixEngineResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FixEngineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FixEngineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FixEngineResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FixEngineResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FixEngineResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FixEngineResponse result = new FixEngineResponse();
      
      protected override FixEngineResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FixEngineResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.FixEngineResponse.Descriptor; }
      }
      
      public override FixEngineResponse DefaultInstanceForType {
        get { return global::quantmodel.FixEngineResponse.DefaultInstance; }
      }
      
      public override FixEngineResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        FixEngineResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FixEngineResponse) {
          return MergeFrom((FixEngineResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FixEngineResponse other) {
        if (other == global::quantmodel.FixEngineResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.FixEngineResponse.Types.ResponseType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.FixEngineResponse.Types.ResponseType) rawValue;
              }
              break;
            }
            case 42: {
              ErrorMsg = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.FixEngineResponse.Types.ResponseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.FixEngineResponse.Types.ResponseType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.FixEngineResponse.Types.ResponseType.ACKNOWLEDGEMENT;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.HasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
    }
    static FixEngineResponse() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ClientAdapterRequest : pb::GeneratedMessage<ClientAdapterRequest, ClientAdapterRequest.Builder> {
    private static readonly ClientAdapterRequest defaultInstance = new Builder().BuildPartial();
    public static ClientAdapterRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientAdapterRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientAdapterRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientAdapterRequest, ClientAdapterRequest.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum RequestType {
        HEARTBEAT = 1,
        DATABASE = 2,
        DEALING = 3,
        SHUTDOWN = 4,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::quantmodel.ClientAdapterRequest.Types.RequestType type_ = global::quantmodel.ClientAdapterRequest.Types.RequestType.HEARTBEAT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.ClientAdapterRequest.Types.RequestType Type {
      get { return type_; }
    }
    
    public const int DealingRequestFieldNumber = 5;
    private bool hasDealingRequest;
    private global::quantmodel.DealingEngineRequest dealingRequest_ = global::quantmodel.DealingEngineRequest.DefaultInstance;
    public bool HasDealingRequest {
      get { return hasDealingRequest; }
    }
    public global::quantmodel.DealingEngineRequest DealingRequest {
      get { return dealingRequest_; }
    }
    
    public const int DatabaseRequestFieldNumber = 6;
    private bool hasDatabaseRequest;
    private global::quantmodel.DatabaseEngineRequest databaseRequest_ = global::quantmodel.DatabaseEngineRequest.DefaultInstance;
    public bool HasDatabaseRequest {
      get { return hasDatabaseRequest; }
    }
    public global::quantmodel.DatabaseEngineRequest DatabaseRequest {
      get { return databaseRequest_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasDealingRequest) {
        output.WriteMessage(5, DealingRequest);
      }
      if (HasDatabaseRequest) {
        output.WriteMessage(6, DatabaseRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasDealingRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, DealingRequest);
        }
        if (HasDatabaseRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, DatabaseRequest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientAdapterRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientAdapterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientAdapterRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientAdapterRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientAdapterRequest result = new ClientAdapterRequest();
      
      protected override ClientAdapterRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientAdapterRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ClientAdapterRequest.Descriptor; }
      }
      
      public override ClientAdapterRequest DefaultInstanceForType {
        get { return global::quantmodel.ClientAdapterRequest.DefaultInstance; }
      }
      
      public override ClientAdapterRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ClientAdapterRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientAdapterRequest) {
          return MergeFrom((ClientAdapterRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientAdapterRequest other) {
        if (other == global::quantmodel.ClientAdapterRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDealingRequest) {
          MergeDealingRequest(other.DealingRequest);
        }
        if (other.HasDatabaseRequest) {
          MergeDatabaseRequest(other.DatabaseRequest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.ClientAdapterRequest.Types.RequestType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.ClientAdapterRequest.Types.RequestType) rawValue;
              }
              break;
            }
            case 42: {
              global::quantmodel.DealingEngineRequest.Builder subBuilder = global::quantmodel.DealingEngineRequest.CreateBuilder();
              if (HasDealingRequest) {
                subBuilder.MergeFrom(DealingRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DealingRequest = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::quantmodel.DatabaseEngineRequest.Builder subBuilder = global::quantmodel.DatabaseEngineRequest.CreateBuilder();
              if (HasDatabaseRequest) {
                subBuilder.MergeFrom(DatabaseRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DatabaseRequest = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.ClientAdapterRequest.Types.RequestType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.ClientAdapterRequest.Types.RequestType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.ClientAdapterRequest.Types.RequestType.HEARTBEAT;
        return this;
      }
      
      public bool HasDealingRequest {
       get { return result.HasDealingRequest; }
      }
      public global::quantmodel.DealingEngineRequest DealingRequest {
        get { return result.DealingRequest; }
        set { SetDealingRequest(value); }
      }
      public Builder SetDealingRequest(global::quantmodel.DealingEngineRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDealingRequest = true;
        result.dealingRequest_ = value;
        return this;
      }
      public Builder SetDealingRequest(global::quantmodel.DealingEngineRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDealingRequest = true;
        result.dealingRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDealingRequest(global::quantmodel.DealingEngineRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDealingRequest &&
            result.dealingRequest_ != global::quantmodel.DealingEngineRequest.DefaultInstance) {
            result.dealingRequest_ = global::quantmodel.DealingEngineRequest.CreateBuilder(result.dealingRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.dealingRequest_ = value;
        }
        result.hasDealingRequest = true;
        return this;
      }
      public Builder ClearDealingRequest() {
        result.hasDealingRequest = false;
        result.dealingRequest_ = global::quantmodel.DealingEngineRequest.DefaultInstance;
        return this;
      }
      
      public bool HasDatabaseRequest {
       get { return result.HasDatabaseRequest; }
      }
      public global::quantmodel.DatabaseEngineRequest DatabaseRequest {
        get { return result.DatabaseRequest; }
        set { SetDatabaseRequest(value); }
      }
      public Builder SetDatabaseRequest(global::quantmodel.DatabaseEngineRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDatabaseRequest = true;
        result.databaseRequest_ = value;
        return this;
      }
      public Builder SetDatabaseRequest(global::quantmodel.DatabaseEngineRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDatabaseRequest = true;
        result.databaseRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDatabaseRequest(global::quantmodel.DatabaseEngineRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDatabaseRequest &&
            result.databaseRequest_ != global::quantmodel.DatabaseEngineRequest.DefaultInstance) {
            result.databaseRequest_ = global::quantmodel.DatabaseEngineRequest.CreateBuilder(result.databaseRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.databaseRequest_ = value;
        }
        result.hasDatabaseRequest = true;
        return this;
      }
      public Builder ClearDatabaseRequest() {
        result.hasDatabaseRequest = false;
        result.databaseRequest_ = global::quantmodel.DatabaseEngineRequest.DefaultInstance;
        return this;
      }
    }
    static ClientAdapterRequest() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ClientAdapterResponse : pb::GeneratedMessage<ClientAdapterResponse, ClientAdapterResponse.Builder> {
    private static readonly ClientAdapterResponse defaultInstance = new Builder().BuildPartial();
    public static ClientAdapterResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientAdapterResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientAdapterResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientAdapterResponse, ClientAdapterResponse.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ResponseType {
        ACKNOWLEDGEMENT = 1,
        REJECT = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private global::quantmodel.ClientAdapterResponse.Types.ResponseType type_ = global::quantmodel.ClientAdapterResponse.Types.ResponseType.ACKNOWLEDGEMENT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.ClientAdapterResponse.Types.ResponseType Type {
      get { return type_; }
    }
    
    public const int ErrorMsgFieldNumber = 6;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public const int DealingResponseFieldNumber = 7;
    private bool hasDealingResponse;
    private global::quantmodel.DealingEngineResponse dealingResponse_ = global::quantmodel.DealingEngineResponse.DefaultInstance;
    public bool HasDealingResponse {
      get { return hasDealingResponse; }
    }
    public global::quantmodel.DealingEngineResponse DealingResponse {
      get { return dealingResponse_; }
    }
    
    public const int DatabaseResponseFieldNumber = 8;
    private bool hasDatabaseResponse;
    private global::quantmodel.DatabaseEngineResponse databaseResponse_ = global::quantmodel.DatabaseEngineResponse.DefaultInstance;
    public bool HasDatabaseResponse {
      get { return hasDatabaseResponse; }
    }
    public global::quantmodel.DatabaseEngineResponse DatabaseResponse {
      get { return databaseResponse_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasSessionId) {
        output.WriteString(3, SessionId);
      }
      if (HasTimestamp) {
        output.WriteString(4, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(5, (int) Type);
      }
      if (HasErrorMsg) {
        output.WriteString(6, ErrorMsg);
      }
      if (HasDealingResponse) {
        output.WriteMessage(7, DealingResponse);
      }
      if (HasDatabaseResponse) {
        output.WriteMessage(8, DatabaseResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Type);
        }
        if (HasErrorMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ErrorMsg);
        }
        if (HasDealingResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, DealingResponse);
        }
        if (HasDatabaseResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, DatabaseResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientAdapterResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientAdapterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientAdapterResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientAdapterResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientAdapterResponse result = new ClientAdapterResponse();
      
      protected override ClientAdapterResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientAdapterResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ClientAdapterResponse.Descriptor; }
      }
      
      public override ClientAdapterResponse DefaultInstanceForType {
        get { return global::quantmodel.ClientAdapterResponse.DefaultInstance; }
      }
      
      public override ClientAdapterResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ClientAdapterResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientAdapterResponse) {
          return MergeFrom((ClientAdapterResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientAdapterResponse other) {
        if (other == global::quantmodel.ClientAdapterResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        if (other.HasDealingResponse) {
          MergeDealingResponse(other.DealingResponse);
        }
        if (other.HasDatabaseResponse) {
          MergeDatabaseResponse(other.DatabaseResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              SessionId = input.ReadString();
              break;
            }
            case 34: {
              Timestamp = input.ReadString();
              break;
            }
            case 40: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.ClientAdapterResponse.Types.ResponseType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.ClientAdapterResponse.Types.ResponseType) rawValue;
              }
              break;
            }
            case 50: {
              ErrorMsg = input.ReadString();
              break;
            }
            case 58: {
              global::quantmodel.DealingEngineResponse.Builder subBuilder = global::quantmodel.DealingEngineResponse.CreateBuilder();
              if (HasDealingResponse) {
                subBuilder.MergeFrom(DealingResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DealingResponse = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::quantmodel.DatabaseEngineResponse.Builder subBuilder = global::quantmodel.DatabaseEngineResponse.CreateBuilder();
              if (HasDatabaseResponse) {
                subBuilder.MergeFrom(DatabaseResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DatabaseResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.ClientAdapterResponse.Types.ResponseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.ClientAdapterResponse.Types.ResponseType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.ClientAdapterResponse.Types.ResponseType.ACKNOWLEDGEMENT;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.HasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
      
      public bool HasDealingResponse {
       get { return result.HasDealingResponse; }
      }
      public global::quantmodel.DealingEngineResponse DealingResponse {
        get { return result.DealingResponse; }
        set { SetDealingResponse(value); }
      }
      public Builder SetDealingResponse(global::quantmodel.DealingEngineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDealingResponse = true;
        result.dealingResponse_ = value;
        return this;
      }
      public Builder SetDealingResponse(global::quantmodel.DealingEngineResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDealingResponse = true;
        result.dealingResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDealingResponse(global::quantmodel.DealingEngineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDealingResponse &&
            result.dealingResponse_ != global::quantmodel.DealingEngineResponse.DefaultInstance) {
            result.dealingResponse_ = global::quantmodel.DealingEngineResponse.CreateBuilder(result.dealingResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.dealingResponse_ = value;
        }
        result.hasDealingResponse = true;
        return this;
      }
      public Builder ClearDealingResponse() {
        result.hasDealingResponse = false;
        result.dealingResponse_ = global::quantmodel.DealingEngineResponse.DefaultInstance;
        return this;
      }
      
      public bool HasDatabaseResponse {
       get { return result.HasDatabaseResponse; }
      }
      public global::quantmodel.DatabaseEngineResponse DatabaseResponse {
        get { return result.DatabaseResponse; }
        set { SetDatabaseResponse(value); }
      }
      public Builder SetDatabaseResponse(global::quantmodel.DatabaseEngineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDatabaseResponse = true;
        result.databaseResponse_ = value;
        return this;
      }
      public Builder SetDatabaseResponse(global::quantmodel.DatabaseEngineResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDatabaseResponse = true;
        result.databaseResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDatabaseResponse(global::quantmodel.DatabaseEngineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDatabaseResponse &&
            result.databaseResponse_ != global::quantmodel.DatabaseEngineResponse.DefaultInstance) {
            result.databaseResponse_ = global::quantmodel.DatabaseEngineResponse.CreateBuilder(result.databaseResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.databaseResponse_ = value;
        }
        result.hasDatabaseResponse = true;
        return this;
      }
      public Builder ClearDatabaseResponse() {
        result.hasDatabaseResponse = false;
        result.databaseResponse_ = global::quantmodel.DatabaseEngineResponse.DefaultInstance;
        return this;
      }
    }
    static ClientAdapterResponse() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class ClientAdapterBroadcast : pb::GeneratedMessage<ClientAdapterBroadcast, ClientAdapterBroadcast.Builder> {
    private static readonly ClientAdapterBroadcast defaultInstance = new Builder().BuildPartial();
    public static ClientAdapterBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientAdapterBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientAdapterBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientAdapterBroadcast, ClientAdapterBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_ClientAdapterBroadcast__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum BroadcastType {
        HEARTBEAT = 1,
        DATABASE = 2,
        DEALING = 3,
        MARKETDATA = 4,
        SHUTDOWN = 5,
      }
      
    }
    #endregion
    
    public const int BroadcastIdFieldNumber = 1;
    private bool hasBroadcastId;
    private string broadcastId_ = "";
    public bool HasBroadcastId {
      get { return hasBroadcastId; }
    }
    public string BroadcastId {
      get { return broadcastId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType type_ = global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType.HEARTBEAT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType Type {
      get { return type_; }
    }
    
    public const int DealingBroadcastFieldNumber = 4;
    private bool hasDealingBroadcast;
    private global::quantmodel.DealingEngineBroadcast dealingBroadcast_ = global::quantmodel.DealingEngineBroadcast.DefaultInstance;
    public bool HasDealingBroadcast {
      get { return hasDealingBroadcast; }
    }
    public global::quantmodel.DealingEngineBroadcast DealingBroadcast {
      get { return dealingBroadcast_; }
    }
    
    public const int MarketdataBroadcastFieldNumber = 5;
    private bool hasMarketdataBroadcast;
    private global::quantmodel.MarketDataBroadcast marketdataBroadcast_ = global::quantmodel.MarketDataBroadcast.DefaultInstance;
    public bool HasMarketdataBroadcast {
      get { return hasMarketdataBroadcast; }
    }
    public global::quantmodel.MarketDataBroadcast MarketdataBroadcast {
      get { return marketdataBroadcast_; }
    }
    
    public const int HeartbeatDataFieldNumber = 6;
    private bool hasHeartbeatData;
    private global::quantmodel.HeartbeatData heartbeatData_ = global::quantmodel.HeartbeatData.DefaultInstance;
    public bool HasHeartbeatData {
      get { return hasHeartbeatData; }
    }
    public global::quantmodel.HeartbeatData HeartbeatData {
      get { return heartbeatData_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBroadcastId) {
        output.WriteString(1, BroadcastId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      if (HasDealingBroadcast) {
        output.WriteMessage(4, DealingBroadcast);
      }
      if (HasMarketdataBroadcast) {
        output.WriteMessage(5, MarketdataBroadcast);
      }
      if (HasHeartbeatData) {
        output.WriteMessage(6, HeartbeatData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBroadcastId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BroadcastId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (HasDealingBroadcast) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, DealingBroadcast);
        }
        if (HasMarketdataBroadcast) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, MarketdataBroadcast);
        }
        if (HasHeartbeatData) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, HeartbeatData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientAdapterBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAdapterBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientAdapterBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientAdapterBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientAdapterBroadcast result = new ClientAdapterBroadcast();
      
      protected override ClientAdapterBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientAdapterBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.ClientAdapterBroadcast.Descriptor; }
      }
      
      public override ClientAdapterBroadcast DefaultInstanceForType {
        get { return global::quantmodel.ClientAdapterBroadcast.DefaultInstance; }
      }
      
      public override ClientAdapterBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ClientAdapterBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientAdapterBroadcast) {
          return MergeFrom((ClientAdapterBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientAdapterBroadcast other) {
        if (other == global::quantmodel.ClientAdapterBroadcast.DefaultInstance) return this;
        if (other.HasBroadcastId) {
          BroadcastId = other.BroadcastId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDealingBroadcast) {
          MergeDealingBroadcast(other.DealingBroadcast);
        }
        if (other.HasMarketdataBroadcast) {
          MergeMarketdataBroadcast(other.MarketdataBroadcast);
        }
        if (other.HasHeartbeatData) {
          MergeHeartbeatData(other.HeartbeatData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              BroadcastId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType) rawValue;
              }
              break;
            }
            case 34: {
              global::quantmodel.DealingEngineBroadcast.Builder subBuilder = global::quantmodel.DealingEngineBroadcast.CreateBuilder();
              if (HasDealingBroadcast) {
                subBuilder.MergeFrom(DealingBroadcast);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DealingBroadcast = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::quantmodel.MarketDataBroadcast.Builder subBuilder = global::quantmodel.MarketDataBroadcast.CreateBuilder();
              if (HasMarketdataBroadcast) {
                subBuilder.MergeFrom(MarketdataBroadcast);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MarketdataBroadcast = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::quantmodel.HeartbeatData.Builder subBuilder = global::quantmodel.HeartbeatData.CreateBuilder();
              if (HasHeartbeatData) {
                subBuilder.MergeFrom(HeartbeatData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeartbeatData = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasBroadcastId {
        get { return result.HasBroadcastId; }
      }
      public string BroadcastId {
        get { return result.BroadcastId; }
        set { SetBroadcastId(value); }
      }
      public Builder SetBroadcastId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBroadcastId = true;
        result.broadcastId_ = value;
        return this;
      }
      public Builder ClearBroadcastId() {
        result.hasBroadcastId = false;
        result.broadcastId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.ClientAdapterBroadcast.Types.BroadcastType.HEARTBEAT;
        return this;
      }
      
      public bool HasDealingBroadcast {
       get { return result.HasDealingBroadcast; }
      }
      public global::quantmodel.DealingEngineBroadcast DealingBroadcast {
        get { return result.DealingBroadcast; }
        set { SetDealingBroadcast(value); }
      }
      public Builder SetDealingBroadcast(global::quantmodel.DealingEngineBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDealingBroadcast = true;
        result.dealingBroadcast_ = value;
        return this;
      }
      public Builder SetDealingBroadcast(global::quantmodel.DealingEngineBroadcast.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDealingBroadcast = true;
        result.dealingBroadcast_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDealingBroadcast(global::quantmodel.DealingEngineBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDealingBroadcast &&
            result.dealingBroadcast_ != global::quantmodel.DealingEngineBroadcast.DefaultInstance) {
            result.dealingBroadcast_ = global::quantmodel.DealingEngineBroadcast.CreateBuilder(result.dealingBroadcast_).MergeFrom(value).BuildPartial();
        } else {
          result.dealingBroadcast_ = value;
        }
        result.hasDealingBroadcast = true;
        return this;
      }
      public Builder ClearDealingBroadcast() {
        result.hasDealingBroadcast = false;
        result.dealingBroadcast_ = global::quantmodel.DealingEngineBroadcast.DefaultInstance;
        return this;
      }
      
      public bool HasMarketdataBroadcast {
       get { return result.HasMarketdataBroadcast; }
      }
      public global::quantmodel.MarketDataBroadcast MarketdataBroadcast {
        get { return result.MarketdataBroadcast; }
        set { SetMarketdataBroadcast(value); }
      }
      public Builder SetMarketdataBroadcast(global::quantmodel.MarketDataBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMarketdataBroadcast = true;
        result.marketdataBroadcast_ = value;
        return this;
      }
      public Builder SetMarketdataBroadcast(global::quantmodel.MarketDataBroadcast.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasMarketdataBroadcast = true;
        result.marketdataBroadcast_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarketdataBroadcast(global::quantmodel.MarketDataBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasMarketdataBroadcast &&
            result.marketdataBroadcast_ != global::quantmodel.MarketDataBroadcast.DefaultInstance) {
            result.marketdataBroadcast_ = global::quantmodel.MarketDataBroadcast.CreateBuilder(result.marketdataBroadcast_).MergeFrom(value).BuildPartial();
        } else {
          result.marketdataBroadcast_ = value;
        }
        result.hasMarketdataBroadcast = true;
        return this;
      }
      public Builder ClearMarketdataBroadcast() {
        result.hasMarketdataBroadcast = false;
        result.marketdataBroadcast_ = global::quantmodel.MarketDataBroadcast.DefaultInstance;
        return this;
      }
      
      public bool HasHeartbeatData {
       get { return result.HasHeartbeatData; }
      }
      public global::quantmodel.HeartbeatData HeartbeatData {
        get { return result.HeartbeatData; }
        set { SetHeartbeatData(value); }
      }
      public Builder SetHeartbeatData(global::quantmodel.HeartbeatData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeartbeatData = true;
        result.heartbeatData_ = value;
        return this;
      }
      public Builder SetHeartbeatData(global::quantmodel.HeartbeatData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHeartbeatData = true;
        result.heartbeatData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeartbeatData(global::quantmodel.HeartbeatData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHeartbeatData &&
            result.heartbeatData_ != global::quantmodel.HeartbeatData.DefaultInstance) {
            result.heartbeatData_ = global::quantmodel.HeartbeatData.CreateBuilder(result.heartbeatData_).MergeFrom(value).BuildPartial();
        } else {
          result.heartbeatData_ = value;
        }
        result.hasHeartbeatData = true;
        return this;
      }
      public Builder ClearHeartbeatData() {
        result.hasHeartbeatData = false;
        result.heartbeatData_ = global::quantmodel.HeartbeatData.DefaultInstance;
        return this;
      }
    }
    static ClientAdapterBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemRequest : pb::GeneratedMessage<InvestmentSystemRequest, InvestmentSystemRequest.Builder> {
    private static readonly InvestmentSystemRequest defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemRequest, InvestmentSystemRequest.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum RequestType {
        HEARTBEAT = 1,
        COMMAND = 2,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::quantmodel.InvestmentSystemRequest.Types.RequestType type_ = global::quantmodel.InvestmentSystemRequest.Types.RequestType.HEARTBEAT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.InvestmentSystemRequest.Types.RequestType Type {
      get { return type_; }
    }
    
    public const int DelegateFieldNumber = 5;
    private bool hasDelegate;
    private string delegate_ = "";
    public bool HasDelegate {
      get { return hasDelegate; }
    }
    public string Delegate {
      get { return delegate_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRequestId) {
        output.WriteString(1, RequestId);
      }
      if (HasSessionId) {
        output.WriteString(2, SessionId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasDelegate) {
        output.WriteString(5, Delegate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RequestId);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasDelegate) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Delegate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemRequest result = new InvestmentSystemRequest();
      
      protected override InvestmentSystemRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.InvestmentSystemRequest.Descriptor; }
      }
      
      public override InvestmentSystemRequest DefaultInstanceForType {
        get { return global::quantmodel.InvestmentSystemRequest.DefaultInstance; }
      }
      
      public override InvestmentSystemRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemRequest) {
          return MergeFrom((InvestmentSystemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemRequest other) {
        if (other == global::quantmodel.InvestmentSystemRequest.DefaultInstance) return this;
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDelegate) {
          Delegate = other.Delegate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              RequestId = input.ReadString();
              break;
            }
            case 18: {
              SessionId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.InvestmentSystemRequest.Types.RequestType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.InvestmentSystemRequest.Types.RequestType) rawValue;
              }
              break;
            }
            case 42: {
              Delegate = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.InvestmentSystemRequest.Types.RequestType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.InvestmentSystemRequest.Types.RequestType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.InvestmentSystemRequest.Types.RequestType.HEARTBEAT;
        return this;
      }
      
      public bool HasDelegate {
        get { return result.HasDelegate; }
      }
      public string Delegate {
        get { return result.Delegate; }
        set { SetDelegate(value); }
      }
      public Builder SetDelegate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDelegate = true;
        result.delegate_ = value;
        return this;
      }
      public Builder ClearDelegate() {
        result.hasDelegate = false;
        result.delegate_ = "";
        return this;
      }
    }
    static InvestmentSystemRequest() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemResponse : pb::GeneratedMessage<InvestmentSystemResponse, InvestmentSystemResponse.Builder> {
    private static readonly InvestmentSystemResponse defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemResponse, InvestmentSystemResponse.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ResponseType {
        ACKNOWLEDGEMENT = 1,
        REJECT = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int ResponseIdFieldNumber = 1;
    private bool hasResponseId;
    private string responseId_ = "";
    public bool HasResponseId {
      get { return hasResponseId; }
    }
    public string ResponseId {
      get { return responseId_; }
    }
    
    public const int RequestIdFieldNumber = 2;
    private bool hasRequestId;
    private string requestId_ = "";
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public string RequestId {
      get { return requestId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::quantmodel.InvestmentSystemResponse.Types.ResponseType type_ = global::quantmodel.InvestmentSystemResponse.Types.ResponseType.ACKNOWLEDGEMENT;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.InvestmentSystemResponse.Types.ResponseType Type {
      get { return type_; }
    }
    
    public const int ErrorMsgFieldNumber = 5;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public const int SessionIdFieldNumber = 6;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int DelegateFieldNumber = 7;
    private bool hasDelegate;
    private pb::ByteString delegate_ = pb::ByteString.Empty;
    public bool HasDelegate {
      get { return hasDelegate; }
    }
    public pb::ByteString Delegate {
      get { return delegate_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResponseId) {
        output.WriteString(1, ResponseId);
      }
      if (HasRequestId) {
        output.WriteString(2, RequestId);
      }
      if (HasTimestamp) {
        output.WriteString(3, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(4, (int) Type);
      }
      if (HasErrorMsg) {
        output.WriteString(5, ErrorMsg);
      }
      if (HasSessionId) {
        output.WriteString(6, SessionId);
      }
      if (HasDelegate) {
        output.WriteBytes(7, Delegate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResponseId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResponseId);
        }
        if (HasRequestId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RequestId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        if (HasErrorMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ErrorMsg);
        }
        if (HasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, SessionId);
        }
        if (HasDelegate) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, Delegate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemResponse result = new InvestmentSystemResponse();
      
      protected override InvestmentSystemResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.InvestmentSystemResponse.Descriptor; }
      }
      
      public override InvestmentSystemResponse DefaultInstanceForType {
        get { return global::quantmodel.InvestmentSystemResponse.DefaultInstance; }
      }
      
      public override InvestmentSystemResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemResponse) {
          return MergeFrom((InvestmentSystemResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemResponse other) {
        if (other == global::quantmodel.InvestmentSystemResponse.DefaultInstance) return this;
        if (other.HasResponseId) {
          ResponseId = other.ResponseId;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasDelegate) {
          Delegate = other.Delegate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ResponseId = input.ReadString();
              break;
            }
            case 18: {
              RequestId = input.ReadString();
              break;
            }
            case 26: {
              Timestamp = input.ReadString();
              break;
            }
            case 32: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.InvestmentSystemResponse.Types.ResponseType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.InvestmentSystemResponse.Types.ResponseType) rawValue;
              }
              break;
            }
            case 42: {
              ErrorMsg = input.ReadString();
              break;
            }
            case 50: {
              SessionId = input.ReadString();
              break;
            }
            case 58: {
              Delegate = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasResponseId {
        get { return result.HasResponseId; }
      }
      public string ResponseId {
        get { return result.ResponseId; }
        set { SetResponseId(value); }
      }
      public Builder SetResponseId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseId = true;
        result.responseId_ = value;
        return this;
      }
      public Builder ClearResponseId() {
        result.hasResponseId = false;
        result.responseId_ = "";
        return this;
      }
      
      public bool HasRequestId {
        get { return result.HasRequestId; }
      }
      public string RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        result.hasRequestId = false;
        result.requestId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.InvestmentSystemResponse.Types.ResponseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.InvestmentSystemResponse.Types.ResponseType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.InvestmentSystemResponse.Types.ResponseType.ACKNOWLEDGEMENT;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.HasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
      
      public bool HasSessionId {
        get { return result.HasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasDelegate {
        get { return result.HasDelegate; }
      }
      public pb::ByteString Delegate {
        get { return result.Delegate; }
        set { SetDelegate(value); }
      }
      public Builder SetDelegate(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDelegate = true;
        result.delegate_ = value;
        return this;
      }
      public Builder ClearDelegate() {
        result.hasDelegate = false;
        result.delegate_ = pb::ByteString.Empty;
        return this;
      }
    }
    static InvestmentSystemResponse() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  public sealed partial class InvestmentSystemBroadcast : pb::GeneratedMessage<InvestmentSystemBroadcast, InvestmentSystemBroadcast.Builder> {
    private static readonly InvestmentSystemBroadcast defaultInstance = new Builder().BuildPartial();
    public static InvestmentSystemBroadcast DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvestmentSystemBroadcast DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override InvestmentSystemBroadcast ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemBroadcast__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvestmentSystemBroadcast, InvestmentSystemBroadcast.Builder> InternalFieldAccessors {
      get { return global::quantmodel.Quantmodel.internal__static_quantmodel_InvestmentSystemBroadcast__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum BroadcastType {
        PRICE = 1,
        TRADE = 2,
        DATA = 3,
        HEARTBEAT = 4,
      }
      
    }
    #endregion
    
    public const int BroadcastIdFieldNumber = 1;
    private bool hasBroadcastId;
    private string broadcastId_ = "";
    public bool HasBroadcastId {
      get { return hasBroadcastId; }
    }
    public string BroadcastId {
      get { return broadcastId_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType type_ = global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType.PRICE;
    public bool HasType {
      get { return hasType; }
    }
    public global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType Type {
      get { return type_; }
    }
    
    public const int DelegateFieldNumber = 4;
    private bool hasDelegate;
    private pb::ByteString delegate_ = pb::ByteString.Empty;
    public bool HasDelegate {
      get { return hasDelegate; }
    }
    public pb::ByteString Delegate {
      get { return delegate_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBroadcastId) {
        output.WriteString(1, BroadcastId);
      }
      if (HasTimestamp) {
        output.WriteString(2, Timestamp);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      if (HasDelegate) {
        output.WriteBytes(4, Delegate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBroadcastId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BroadcastId);
        }
        if (HasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Timestamp);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (HasDelegate) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, Delegate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvestmentSystemBroadcast ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvestmentSystemBroadcast ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvestmentSystemBroadcast prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<InvestmentSystemBroadcast, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      InvestmentSystemBroadcast result = new InvestmentSystemBroadcast();
      
      protected override InvestmentSystemBroadcast MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new InvestmentSystemBroadcast();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::quantmodel.InvestmentSystemBroadcast.Descriptor; }
      }
      
      public override InvestmentSystemBroadcast DefaultInstanceForType {
        get { return global::quantmodel.InvestmentSystemBroadcast.DefaultInstance; }
      }
      
      public override InvestmentSystemBroadcast BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        InvestmentSystemBroadcast returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvestmentSystemBroadcast) {
          return MergeFrom((InvestmentSystemBroadcast) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvestmentSystemBroadcast other) {
        if (other == global::quantmodel.InvestmentSystemBroadcast.DefaultInstance) return this;
        if (other.HasBroadcastId) {
          BroadcastId = other.BroadcastId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDelegate) {
          Delegate = other.Delegate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              BroadcastId = input.ReadString();
              break;
            }
            case 18: {
              Timestamp = input.ReadString();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType) rawValue;
              }
              break;
            }
            case 34: {
              Delegate = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasBroadcastId {
        get { return result.HasBroadcastId; }
      }
      public string BroadcastId {
        get { return result.BroadcastId; }
        set { SetBroadcastId(value); }
      }
      public Builder SetBroadcastId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBroadcastId = true;
        result.broadcastId_ = value;
        return this;
      }
      public Builder ClearBroadcastId() {
        result.hasBroadcastId = false;
        result.broadcastId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.HasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::quantmodel.InvestmentSystemBroadcast.Types.BroadcastType.PRICE;
        return this;
      }
      
      public bool HasDelegate {
        get { return result.HasDelegate; }
      }
      public pb::ByteString Delegate {
        get { return result.Delegate; }
        set { SetDelegate(value); }
      }
      public Builder SetDelegate(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDelegate = true;
        result.delegate_ = value;
        return this;
      }
      public Builder ClearDelegate() {
        result.hasDelegate = false;
        result.delegate_ = pb::ByteString.Empty;
        return this;
      }
    }
    static InvestmentSystemBroadcast() {
      object.ReferenceEquals(global::quantmodel.Quantmodel.Descriptor, null);
    }
  }
  
  #endregion
  
}
